#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTChronyRole(object):
    """
    Chrony角色

    """
    UNKNOWN = 0
    MASTER = 1
    SLAVE = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "MASTER",
        2: "SLAVE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "MASTER": 1,
        "SLAVE": 2,
    }


class ncTServiceStatus(object):
    SS_STOPPED = 0
    SS_STARTED = 1
    SS_OTHER = 2

    _VALUES_TO_NAMES = {
        0: "SS_STOPPED",
        1: "SS_STARTED",
        2: "SS_OTHER",
    }

    _NAMES_TO_VALUES = {
        "SS_STOPPED": 0,
        "SS_STARTED": 1,
        "SS_OTHER": 2,
    }


class ncTLogHostInfo(object):
    """
    Attributes:
     - facility
     - severity
     - ip
     - port
     - protocol

    """


    def __init__(self, facility=None, severity=None, ip=None, port=None, protocol=None,):
        self.facility = facility
        self.severity = severity
        self.ip = ip
        self.port = port
        self.protocol = protocol

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.facility = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.severity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.protocol = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLogHostInfo')
        if self.facility is not None:
            oprot.writeFieldBegin('facility', TType.STRING, 1)
            oprot.writeString(self.facility.encode('utf-8') if sys.version_info[0] == 2 else self.facility)
            oprot.writeFieldEnd()
        if self.severity is not None:
            oprot.writeFieldBegin('severity', TType.STRING, 2)
            oprot.writeString(self.severity.encode('utf-8') if sys.version_info[0] == 2 else self.severity)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 3)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 4)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.protocol is not None:
            oprot.writeFieldBegin('protocol', TType.STRING, 5)
            oprot.writeString(self.protocol.encode('utf-8') if sys.version_info[0] == 2 else self.protocol)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDBInstInfo(object):
    """
    数据库实例信息结构

    Attributes:
     - service_name
     - data_dir
     - socket
     - port
     - pid_file
     - mysqld_bin_path
     - log_error
     - package_name
     - option

    """


    def __init__(self, service_name=None, data_dir=None, socket=None, port=None, pid_file=None, mysqld_bin_path=None, log_error=None, package_name=None, option={
    },):
        self.service_name = service_name
        self.data_dir = data_dir
        self.socket = socket
        self.port = port
        self.pid_file = pid_file
        self.mysqld_bin_path = mysqld_bin_path
        self.log_error = log_error
        self.package_name = package_name
        if option is self.thrift_spec[9][4]:
            option = {
            }
        self.option = option

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.service_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data_dir = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.socket = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.pid_file = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.mysqld_bin_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.log_error = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.package_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.option = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.option[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDBInstInfo')
        if self.service_name is not None:
            oprot.writeFieldBegin('service_name', TType.STRING, 1)
            oprot.writeString(self.service_name.encode('utf-8') if sys.version_info[0] == 2 else self.service_name)
            oprot.writeFieldEnd()
        if self.data_dir is not None:
            oprot.writeFieldBegin('data_dir', TType.STRING, 2)
            oprot.writeString(self.data_dir.encode('utf-8') if sys.version_info[0] == 2 else self.data_dir)
            oprot.writeFieldEnd()
        if self.socket is not None:
            oprot.writeFieldBegin('socket', TType.STRING, 3)
            oprot.writeString(self.socket.encode('utf-8') if sys.version_info[0] == 2 else self.socket)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 4)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.pid_file is not None:
            oprot.writeFieldBegin('pid_file', TType.STRING, 5)
            oprot.writeString(self.pid_file.encode('utf-8') if sys.version_info[0] == 2 else self.pid_file)
            oprot.writeFieldEnd()
        if self.mysqld_bin_path is not None:
            oprot.writeFieldBegin('mysqld_bin_path', TType.STRING, 6)
            oprot.writeString(self.mysqld_bin_path.encode('utf-8') if sys.version_info[0] == 2 else self.mysqld_bin_path)
            oprot.writeFieldEnd()
        if self.log_error is not None:
            oprot.writeFieldBegin('log_error', TType.STRING, 7)
            oprot.writeString(self.log_error.encode('utf-8') if sys.version_info[0] == 2 else self.log_error)
            oprot.writeFieldEnd()
        if self.package_name is not None:
            oprot.writeFieldBegin('package_name', TType.STRING, 8)
            oprot.writeString(self.package_name.encode('utf-8') if sys.version_info[0] == 2 else self.package_name)
            oprot.writeFieldEnd()
        if self.option is not None:
            oprot.writeFieldBegin('option', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.option))
            for kiter7, viter8 in self.option.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTExternalDBInfo(object):
    """
    第三方数据库连接信息

    Attributes:
     - db_host
     - db_port
     - db_user
     - db_password

    """


    def __init__(self, db_host="", db_port=0, db_user="", db_password="",):
        self.db_host = db_host
        self.db_port = db_port
        self.db_user = db_user
        self.db_password = db_password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.db_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.db_user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.db_password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTExternalDBInfo')
        if self.db_host is not None:
            oprot.writeFieldBegin('db_host', TType.STRING, 1)
            oprot.writeString(self.db_host.encode('utf-8') if sys.version_info[0] == 2 else self.db_host)
            oprot.writeFieldEnd()
        if self.db_port is not None:
            oprot.writeFieldBegin('db_port', TType.I32, 2)
            oprot.writeI32(self.db_port)
            oprot.writeFieldEnd()
        if self.db_user is not None:
            oprot.writeFieldBegin('db_user', TType.STRING, 3)
            oprot.writeString(self.db_user.encode('utf-8') if sys.version_info[0] == 2 else self.db_user)
            oprot.writeFieldEnd()
        if self.db_password is not None:
            oprot.writeFieldBegin('db_password', TType.STRING, 4)
            oprot.writeString(self.db_password.encode('utf-8') if sys.version_info[0] == 2 else self.db_password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSSHInfo(object):
    """
    SSH 信息

    Attributes:
     - host
     - port
     - user
     - password

    """


    def __init__(self, host="", port=0, user="", password="",):
        self.host = host
        self.port = port
        self.user = user
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSSHInfo')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRING, 3)
            oprot.writeString(self.user.encode('utf-8') if sys.version_info[0] == 2 else self.user)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTTCPCheckInfo(object):
    """
    keepalived->virtual_server->real_server_>TCP_CHECK 信息

    Attributes:
     - connect_port
     - connect_timeout
     - nb_get_retry
     - delay_before_retry

    """


    def __init__(self, connect_port=None, connect_timeout=None, nb_get_retry=None, delay_before_retry=None,):
        self.connect_port = connect_port
        self.connect_timeout = connect_timeout
        self.nb_get_retry = nb_get_retry
        self.delay_before_retry = delay_before_retry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.connect_port = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.connect_timeout = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nb_get_retry = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.delay_before_retry = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTTCPCheckInfo')
        if self.connect_port is not None:
            oprot.writeFieldBegin('connect_port', TType.STRING, 1)
            oprot.writeString(self.connect_port.encode('utf-8') if sys.version_info[0] == 2 else self.connect_port)
            oprot.writeFieldEnd()
        if self.connect_timeout is not None:
            oprot.writeFieldBegin('connect_timeout', TType.STRING, 2)
            oprot.writeString(self.connect_timeout.encode('utf-8') if sys.version_info[0] == 2 else self.connect_timeout)
            oprot.writeFieldEnd()
        if self.nb_get_retry is not None:
            oprot.writeFieldBegin('nb_get_retry', TType.STRING, 3)
            oprot.writeString(self.nb_get_retry.encode('utf-8') if sys.version_info[0] == 2 else self.nb_get_retry)
            oprot.writeFieldEnd()
        if self.delay_before_retry is not None:
            oprot.writeFieldBegin('delay_before_retry', TType.STRING, 4)
            oprot.writeString(self.delay_before_retry.encode('utf-8') if sys.version_info[0] == 2 else self.delay_before_retry)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTRealServerInfo(object):
    """
    keepalived virtual_server 中 real_server 信息

    Attributes:
     - real_ip
     - port
     - weight
     - tcp_check

    """


    def __init__(self, real_ip=None, port=None, weight=None, tcp_check=None,):
        self.real_ip = real_ip
        self.port = port
        self.weight = weight
        self.tcp_check = tcp_check

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.real_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.port = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.weight = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.tcp_check = ncTTCPCheckInfo()
                    self.tcp_check.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTRealServerInfo')
        if self.real_ip is not None:
            oprot.writeFieldBegin('real_ip', TType.STRING, 1)
            oprot.writeString(self.real_ip.encode('utf-8') if sys.version_info[0] == 2 else self.real_ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.STRING, 2)
            oprot.writeString(self.port.encode('utf-8') if sys.version_info[0] == 2 else self.port)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.STRING, 3)
            oprot.writeString(self.weight.encode('utf-8') if sys.version_info[0] == 2 else self.weight)
            oprot.writeFieldEnd()
        if self.tcp_check is not None:
            oprot.writeFieldBegin('tcp_check', TType.STRUCT, 4)
            self.tcp_check.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTVirtualServerInfo(object):
    """
    keepalived.conf virtual_server 相关信息

    Attributes:
     - virtual_ip
     - port
     - delay_loop
     - lb_algo
     - lb_kind
     - protocol
     - real_server
     - exists

    """


    def __init__(self, virtual_ip=None, port=None, delay_loop=None, lb_algo=None, lb_kind=None, protocol=None, real_server=None, exists=False,):
        self.virtual_ip = virtual_ip
        self.port = port
        self.delay_loop = delay_loop
        self.lb_algo = lb_algo
        self.lb_kind = lb_kind
        self.protocol = protocol
        self.real_server = real_server
        self.exists = exists

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.virtual_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.port = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.delay_loop = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.lb_algo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.lb_kind = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.protocol = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.real_server = []
                    (_etype12, _size9) = iprot.readListBegin()
                    for _i13 in range(_size9):
                        _elem14 = ncTRealServerInfo()
                        _elem14.read(iprot)
                        self.real_server.append(_elem14)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTVirtualServerInfo')
        if self.virtual_ip is not None:
            oprot.writeFieldBegin('virtual_ip', TType.STRING, 1)
            oprot.writeString(self.virtual_ip.encode('utf-8') if sys.version_info[0] == 2 else self.virtual_ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.STRING, 2)
            oprot.writeString(self.port.encode('utf-8') if sys.version_info[0] == 2 else self.port)
            oprot.writeFieldEnd()
        if self.delay_loop is not None:
            oprot.writeFieldBegin('delay_loop', TType.STRING, 3)
            oprot.writeString(self.delay_loop.encode('utf-8') if sys.version_info[0] == 2 else self.delay_loop)
            oprot.writeFieldEnd()
        if self.lb_algo is not None:
            oprot.writeFieldBegin('lb_algo', TType.STRING, 4)
            oprot.writeString(self.lb_algo.encode('utf-8') if sys.version_info[0] == 2 else self.lb_algo)
            oprot.writeFieldEnd()
        if self.lb_kind is not None:
            oprot.writeFieldBegin('lb_kind', TType.STRING, 5)
            oprot.writeString(self.lb_kind.encode('utf-8') if sys.version_info[0] == 2 else self.lb_kind)
            oprot.writeFieldEnd()
        if self.protocol is not None:
            oprot.writeFieldBegin('protocol', TType.STRING, 6)
            oprot.writeString(self.protocol.encode('utf-8') if sys.version_info[0] == 2 else self.protocol)
            oprot.writeFieldEnd()
        if self.real_server is not None:
            oprot.writeFieldBegin('real_server', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.real_server))
            for iter15 in self.real_server:
                iter15.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.exists is not None:
            oprot.writeFieldBegin('exists', TType.BOOL, 8)
            oprot.writeBool(self.exists)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTGlobalDefsInfo(object):
    """
    keepalived.conf global_defs 相关信息

    Attributes:
     - notification_email
     - notification_email_from
     - smtp_server
     - smtp_connect_timeout
     - router_id
     - exists

    """


    def __init__(self, notification_email=None, notification_email_from=None, smtp_server=None, smtp_connect_timeout=None, router_id=None, exists=False,):
        self.notification_email = notification_email
        self.notification_email_from = notification_email_from
        self.smtp_server = smtp_server
        self.smtp_connect_timeout = smtp_connect_timeout
        self.router_id = router_id
        self.exists = exists

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.notification_email = []
                    (_etype19, _size16) = iprot.readListBegin()
                    for _i20 in range(_size16):
                        _elem21 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.notification_email.append(_elem21)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.notification_email_from = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.smtp_server = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.smtp_connect_timeout = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.router_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTGlobalDefsInfo')
        if self.notification_email is not None:
            oprot.writeFieldBegin('notification_email', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.notification_email))
            for iter22 in self.notification_email:
                oprot.writeString(iter22.encode('utf-8') if sys.version_info[0] == 2 else iter22)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.notification_email_from is not None:
            oprot.writeFieldBegin('notification_email_from', TType.STRING, 2)
            oprot.writeString(self.notification_email_from.encode('utf-8') if sys.version_info[0] == 2 else self.notification_email_from)
            oprot.writeFieldEnd()
        if self.smtp_server is not None:
            oprot.writeFieldBegin('smtp_server', TType.STRING, 3)
            oprot.writeString(self.smtp_server.encode('utf-8') if sys.version_info[0] == 2 else self.smtp_server)
            oprot.writeFieldEnd()
        if self.smtp_connect_timeout is not None:
            oprot.writeFieldBegin('smtp_connect_timeout', TType.STRING, 4)
            oprot.writeString(self.smtp_connect_timeout.encode('utf-8') if sys.version_info[0] == 2 else self.smtp_connect_timeout)
            oprot.writeFieldEnd()
        if self.router_id is not None:
            oprot.writeFieldBegin('router_id', TType.STRING, 5)
            oprot.writeString(self.router_id.encode('utf-8') if sys.version_info[0] == 2 else self.router_id)
            oprot.writeFieldEnd()
        if self.exists is not None:
            oprot.writeFieldBegin('exists', TType.BOOL, 6)
            oprot.writeBool(self.exists)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTVirtualIPAddressInfo(object):
    """
    vip结构

    Attributes:
     - ipaddr
     - netmask
     - nic_name
     - virtual_nic_name

    """


    def __init__(self, ipaddr="", netmask="", nic_name="", virtual_nic_name="",):
        self.ipaddr = ipaddr
        self.netmask = netmask
        self.nic_name = nic_name
        self.virtual_nic_name = virtual_nic_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ipaddr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.netmask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nic_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.virtual_nic_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTVirtualIPAddressInfo')
        if self.ipaddr is not None:
            oprot.writeFieldBegin('ipaddr', TType.STRING, 1)
            oprot.writeString(self.ipaddr.encode('utf-8') if sys.version_info[0] == 2 else self.ipaddr)
            oprot.writeFieldEnd()
        if self.netmask is not None:
            oprot.writeFieldBegin('netmask', TType.STRING, 2)
            oprot.writeString(self.netmask.encode('utf-8') if sys.version_info[0] == 2 else self.netmask)
            oprot.writeFieldEnd()
        if self.nic_name is not None:
            oprot.writeFieldBegin('nic_name', TType.STRING, 3)
            oprot.writeString(self.nic_name.encode('utf-8') if sys.version_info[0] == 2 else self.nic_name)
            oprot.writeFieldEnd()
        if self.virtual_nic_name is not None:
            oprot.writeFieldBegin('virtual_nic_name', TType.STRING, 4)
            oprot.writeString(self.virtual_nic_name.encode('utf-8') if sys.version_info[0] == 2 else self.virtual_nic_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTVrrpInstanceInfo(object):
    """
    keepalived 配置结构体

    Attributes:
     - vrrp_instance_name
     - state
     - interface_name
     - virtual_router_id
     - priority
     - advert_int
     - auth_type
     - auth_pass
     - virtual_ipaddress
     - unicast_src_ip
     - unicast_peer
     - exists

    """


    def __init__(self, vrrp_instance_name="", state="", interface_name="", virtual_router_id=0, priority=0, advert_int="", auth_type="", auth_pass="", virtual_ipaddress=None, unicast_src_ip="", unicast_peer="", exists=False,):
        self.vrrp_instance_name = vrrp_instance_name
        self.state = state
        self.interface_name = interface_name
        self.virtual_router_id = virtual_router_id
        self.priority = priority
        self.advert_int = advert_int
        self.auth_type = auth_type
        self.auth_pass = auth_pass
        self.virtual_ipaddress = virtual_ipaddress
        self.unicast_src_ip = unicast_src_ip
        self.unicast_peer = unicast_peer
        self.exists = exists

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vrrp_instance_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.interface_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.virtual_router_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.advert_int = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.auth_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.auth_pass = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.virtual_ipaddress = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = ncTVirtualIPAddressInfo()
                        _elem28.read(iprot)
                        self.virtual_ipaddress.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.unicast_src_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.unicast_peer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTVrrpInstanceInfo')
        if self.vrrp_instance_name is not None:
            oprot.writeFieldBegin('vrrp_instance_name', TType.STRING, 1)
            oprot.writeString(self.vrrp_instance_name.encode('utf-8') if sys.version_info[0] == 2 else self.vrrp_instance_name)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 2)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        if self.interface_name is not None:
            oprot.writeFieldBegin('interface_name', TType.STRING, 3)
            oprot.writeString(self.interface_name.encode('utf-8') if sys.version_info[0] == 2 else self.interface_name)
            oprot.writeFieldEnd()
        if self.virtual_router_id is not None:
            oprot.writeFieldBegin('virtual_router_id', TType.I32, 4)
            oprot.writeI32(self.virtual_router_id)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 5)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.advert_int is not None:
            oprot.writeFieldBegin('advert_int', TType.STRING, 6)
            oprot.writeString(self.advert_int.encode('utf-8') if sys.version_info[0] == 2 else self.advert_int)
            oprot.writeFieldEnd()
        if self.auth_type is not None:
            oprot.writeFieldBegin('auth_type', TType.STRING, 7)
            oprot.writeString(self.auth_type.encode('utf-8') if sys.version_info[0] == 2 else self.auth_type)
            oprot.writeFieldEnd()
        if self.auth_pass is not None:
            oprot.writeFieldBegin('auth_pass', TType.STRING, 8)
            oprot.writeString(self.auth_pass.encode('utf-8') if sys.version_info[0] == 2 else self.auth_pass)
            oprot.writeFieldEnd()
        if self.virtual_ipaddress is not None:
            oprot.writeFieldBegin('virtual_ipaddress', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.virtual_ipaddress))
            for iter29 in self.virtual_ipaddress:
                iter29.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.unicast_src_ip is not None:
            oprot.writeFieldBegin('unicast_src_ip', TType.STRING, 10)
            oprot.writeString(self.unicast_src_ip.encode('utf-8') if sys.version_info[0] == 2 else self.unicast_src_ip)
            oprot.writeFieldEnd()
        if self.unicast_peer is not None:
            oprot.writeFieldBegin('unicast_peer', TType.STRING, 11)
            oprot.writeString(self.unicast_peer.encode('utf-8') if sys.version_info[0] == 2 else self.unicast_peer)
            oprot.writeFieldEnd()
        if self.exists is not None:
            oprot.writeFieldBegin('exists', TType.BOOL, 12)
            oprot.writeBool(self.exists)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEtcdConfigInfo(object):
    """
    etcd 配置结构体

    Attributes:
     - name
     - ad_peer_urls
     - listen_peer_urls
     - listen_client_urls
     - ad_client_urls
     - cluster_token
     - cluster
     - data_dir
     - cluster_state

    """


    def __init__(self, name=None, ad_peer_urls=None, listen_peer_urls=None, listen_client_urls=None, ad_client_urls=None, cluster_token=None, cluster=None, data_dir=None, cluster_state=None,):
        self.name = name
        self.ad_peer_urls = ad_peer_urls
        self.listen_peer_urls = listen_peer_urls
        self.listen_client_urls = listen_client_urls
        self.ad_client_urls = ad_client_urls
        self.cluster_token = cluster_token
        self.cluster = cluster
        self.data_dir = data_dir
        self.cluster_state = cluster_state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ad_peer_urls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.listen_peer_urls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.listen_client_urls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ad_client_urls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.cluster_token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.cluster = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.data_dir = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.cluster_state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEtcdConfigInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.ad_peer_urls is not None:
            oprot.writeFieldBegin('ad_peer_urls', TType.STRING, 2)
            oprot.writeString(self.ad_peer_urls.encode('utf-8') if sys.version_info[0] == 2 else self.ad_peer_urls)
            oprot.writeFieldEnd()
        if self.listen_peer_urls is not None:
            oprot.writeFieldBegin('listen_peer_urls', TType.STRING, 3)
            oprot.writeString(self.listen_peer_urls.encode('utf-8') if sys.version_info[0] == 2 else self.listen_peer_urls)
            oprot.writeFieldEnd()
        if self.listen_client_urls is not None:
            oprot.writeFieldBegin('listen_client_urls', TType.STRING, 4)
            oprot.writeString(self.listen_client_urls.encode('utf-8') if sys.version_info[0] == 2 else self.listen_client_urls)
            oprot.writeFieldEnd()
        if self.ad_client_urls is not None:
            oprot.writeFieldBegin('ad_client_urls', TType.STRING, 5)
            oprot.writeString(self.ad_client_urls.encode('utf-8') if sys.version_info[0] == 2 else self.ad_client_urls)
            oprot.writeFieldEnd()
        if self.cluster_token is not None:
            oprot.writeFieldBegin('cluster_token', TType.STRING, 6)
            oprot.writeString(self.cluster_token.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_token)
            oprot.writeFieldEnd()
        if self.cluster is not None:
            oprot.writeFieldBegin('cluster', TType.STRING, 7)
            oprot.writeString(self.cluster.encode('utf-8') if sys.version_info[0] == 2 else self.cluster)
            oprot.writeFieldEnd()
        if self.data_dir is not None:
            oprot.writeFieldBegin('data_dir', TType.STRING, 8)
            oprot.writeString(self.data_dir.encode('utf-8') if sys.version_info[0] == 2 else self.data_dir)
            oprot.writeFieldEnd()
        if self.cluster_state is not None:
            oprot.writeFieldBegin('cluster_state', TType.STRING, 9)
            oprot.writeString(self.cluster_state.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEtcdMemberInfo(object):
    """
    etcd 实例结构体

    Attributes:
     - id
     - name
     - peerurl
     - clienturl
     - isLeader

    """


    def __init__(self, id=None, name=None, peerurl=None, clienturl=None, isLeader=None,):
        self.id = id
        self.name = name
        self.peerurl = peerurl
        self.clienturl = clienturl
        self.isLeader = isLeader

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.peerurl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.clienturl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.isLeader = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEtcdMemberInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.peerurl is not None:
            oprot.writeFieldBegin('peerurl', TType.STRING, 3)
            oprot.writeString(self.peerurl.encode('utf-8') if sys.version_info[0] == 2 else self.peerurl)
            oprot.writeFieldEnd()
        if self.clienturl is not None:
            oprot.writeFieldBegin('clienturl', TType.STRING, 4)
            oprot.writeString(self.clienturl.encode('utf-8') if sys.version_info[0] == 2 else self.clienturl)
            oprot.writeFieldEnd()
        if self.isLeader is not None:
            oprot.writeFieldBegin('isLeader', TType.STRING, 5)
            oprot.writeString(self.isLeader.encode('utf-8') if sys.version_info[0] == 2 else self.isLeader)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTIfAddr(object):
    """
    协议地址信息

    Attributes:
     - nic_dev_name
     - label
     - ipaddr
     - netmask
     - gateway

    """


    def __init__(self, nic_dev_name="", label="", ipaddr="", netmask="", gateway="",):
        self.nic_dev_name = nic_dev_name
        self.label = label
        self.ipaddr = ipaddr
        self.netmask = netmask
        self.gateway = gateway

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nic_dev_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.label = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ipaddr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.netmask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.gateway = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTIfAddr')
        if self.nic_dev_name is not None:
            oprot.writeFieldBegin('nic_dev_name', TType.STRING, 1)
            oprot.writeString(self.nic_dev_name.encode('utf-8') if sys.version_info[0] == 2 else self.nic_dev_name)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 2)
            oprot.writeString(self.label.encode('utf-8') if sys.version_info[0] == 2 else self.label)
            oprot.writeFieldEnd()
        if self.ipaddr is not None:
            oprot.writeFieldBegin('ipaddr', TType.STRING, 3)
            oprot.writeString(self.ipaddr.encode('utf-8') if sys.version_info[0] == 2 else self.ipaddr)
            oprot.writeFieldEnd()
        if self.netmask is not None:
            oprot.writeFieldBegin('netmask', TType.STRING, 4)
            oprot.writeString(self.netmask.encode('utf-8') if sys.version_info[0] == 2 else self.netmask)
            oprot.writeFieldEnd()
        if self.gateway is not None:
            oprot.writeFieldBegin('gateway', TType.STRING, 5)
            oprot.writeString(self.gateway.encode('utf-8') if sys.version_info[0] == 2 else self.gateway)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTNic(object):
    """
    网络接口设备信息
    包括物理网卡、绑定网卡、vlan网卡等

    Attributes:
     - nic_dev_name
     - is_up
     - state_info
     - hw_info
     - ifaddrs

    """


    def __init__(self, nic_dev_name="", is_up=False, state_info="", hw_info="", ifaddrs=[
    ],):
        self.nic_dev_name = nic_dev_name
        self.is_up = is_up
        self.state_info = state_info
        self.hw_info = hw_info
        if ifaddrs is self.thrift_spec[5][4]:
            ifaddrs = [
            ]
        self.ifaddrs = ifaddrs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nic_dev_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.is_up = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.state_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.hw_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.ifaddrs = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = ncTIfAddr()
                        _elem35.read(iprot)
                        self.ifaddrs.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTNic')
        if self.nic_dev_name is not None:
            oprot.writeFieldBegin('nic_dev_name', TType.STRING, 1)
            oprot.writeString(self.nic_dev_name.encode('utf-8') if sys.version_info[0] == 2 else self.nic_dev_name)
            oprot.writeFieldEnd()
        if self.is_up is not None:
            oprot.writeFieldBegin('is_up', TType.BOOL, 2)
            oprot.writeBool(self.is_up)
            oprot.writeFieldEnd()
        if self.state_info is not None:
            oprot.writeFieldBegin('state_info', TType.STRING, 3)
            oprot.writeString(self.state_info.encode('utf-8') if sys.version_info[0] == 2 else self.state_info)
            oprot.writeFieldEnd()
        if self.hw_info is not None:
            oprot.writeFieldBegin('hw_info', TType.STRING, 4)
            oprot.writeString(self.hw_info.encode('utf-8') if sys.version_info[0] == 2 else self.hw_info)
            oprot.writeFieldEnd()
        if self.ifaddrs is not None:
            oprot.writeFieldBegin('ifaddrs', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.ifaddrs))
            for iter36 in self.ifaddrs:
                iter36.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSwiftDevice(object):
    """
    Attributes:
     - dev_id
     - region
     - zone
     - ip
     - port
     - dev_name
     - weight
     - partition_count
     - balance
     - capacity_gb

    """


    def __init__(self, dev_id=-1, region=-1, zone=-1, ip="", port=-1, dev_name="", weight=float(-1), partition_count=-1, balance=float(-1), capacity_gb=float(-1),):
        self.dev_id = dev_id
        self.region = region
        self.zone = zone
        self.ip = ip
        self.port = port
        self.dev_name = dev_name
        self.weight = weight
        self.partition_count = partition_count
        self.balance = balance
        self.capacity_gb = capacity_gb

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.region = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.zone = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.dev_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.partition_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.balance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.capacity_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSwiftDevice')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.region is not None:
            oprot.writeFieldBegin('region', TType.I32, 2)
            oprot.writeI32(self.region)
            oprot.writeFieldEnd()
        if self.zone is not None:
            oprot.writeFieldBegin('zone', TType.I32, 3)
            oprot.writeI32(self.zone)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 4)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 5)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.dev_name is not None:
            oprot.writeFieldBegin('dev_name', TType.STRING, 6)
            oprot.writeString(self.dev_name.encode('utf-8') if sys.version_info[0] == 2 else self.dev_name)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 7)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        if self.partition_count is not None:
            oprot.writeFieldBegin('partition_count', TType.I64, 8)
            oprot.writeI64(self.partition_count)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.DOUBLE, 9)
            oprot.writeDouble(self.balance)
            oprot.writeFieldEnd()
        if self.capacity_gb is not None:
            oprot.writeFieldBegin('capacity_gb', TType.DOUBLE, 10)
            oprot.writeDouble(self.capacity_gb)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSwiftRing(object):
    """
    Attributes:
     - part_power
     - replicas
     - min_part_hours
     - partition_count
     - region_count
     - zone_count
     - device_count
     - balance
     - build_version
     - physical_capacity_gb
     - logical_capacity_gb

    """


    def __init__(self, part_power=0, replicas=0, min_part_hours=0, partition_count=0, region_count=0, zone_count=0, device_count=0, balance=float(0), build_version=0, physical_capacity_gb=float(0), logical_capacity_gb=float(0),):
        self.part_power = part_power
        self.replicas = replicas
        self.min_part_hours = min_part_hours
        self.partition_count = partition_count
        self.region_count = region_count
        self.zone_count = zone_count
        self.device_count = device_count
        self.balance = balance
        self.build_version = build_version
        self.physical_capacity_gb = physical_capacity_gb
        self.logical_capacity_gb = logical_capacity_gb

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.part_power = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.replicas = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.min_part_hours = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.partition_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.region_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.zone_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.device_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.balance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.build_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.physical_capacity_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.logical_capacity_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSwiftRing')
        if self.part_power is not None:
            oprot.writeFieldBegin('part_power', TType.I32, 1)
            oprot.writeI32(self.part_power)
            oprot.writeFieldEnd()
        if self.replicas is not None:
            oprot.writeFieldBegin('replicas', TType.I32, 2)
            oprot.writeI32(self.replicas)
            oprot.writeFieldEnd()
        if self.min_part_hours is not None:
            oprot.writeFieldBegin('min_part_hours', TType.I32, 3)
            oprot.writeI32(self.min_part_hours)
            oprot.writeFieldEnd()
        if self.partition_count is not None:
            oprot.writeFieldBegin('partition_count', TType.I64, 4)
            oprot.writeI64(self.partition_count)
            oprot.writeFieldEnd()
        if self.region_count is not None:
            oprot.writeFieldBegin('region_count', TType.I32, 5)
            oprot.writeI32(self.region_count)
            oprot.writeFieldEnd()
        if self.zone_count is not None:
            oprot.writeFieldBegin('zone_count', TType.I32, 6)
            oprot.writeI32(self.zone_count)
            oprot.writeFieldEnd()
        if self.device_count is not None:
            oprot.writeFieldBegin('device_count', TType.I32, 7)
            oprot.writeI32(self.device_count)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.DOUBLE, 8)
            oprot.writeDouble(self.balance)
            oprot.writeFieldEnd()
        if self.build_version is not None:
            oprot.writeFieldBegin('build_version', TType.I32, 9)
            oprot.writeI32(self.build_version)
            oprot.writeFieldEnd()
        if self.physical_capacity_gb is not None:
            oprot.writeFieldBegin('physical_capacity_gb', TType.DOUBLE, 10)
            oprot.writeDouble(self.physical_capacity_gb)
            oprot.writeFieldEnd()
        if self.logical_capacity_gb is not None:
            oprot.writeFieldBegin('logical_capacity_gb', TType.DOUBLE, 11)
            oprot.writeDouble(self.logical_capacity_gb)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTRaidPDInfo(object):
    """
    Attributes:
     - pd_devid
     - capacity_gb
     - ld_devid
     - firmware_state
     - foreign_state
     - device_id
     - is_hotspare

    """


    def __init__(self, pd_devid="", capacity_gb=float(0), ld_devid="", firmware_state="", foreign_state="", device_id="", is_hotspare=False,):
        self.pd_devid = pd_devid
        self.capacity_gb = capacity_gb
        self.ld_devid = ld_devid
        self.firmware_state = firmware_state
        self.foreign_state = foreign_state
        self.device_id = device_id
        self.is_hotspare = is_hotspare

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pd_devid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.capacity_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ld_devid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.firmware_state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.foreign_state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.device_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.is_hotspare = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTRaidPDInfo')
        if self.pd_devid is not None:
            oprot.writeFieldBegin('pd_devid', TType.STRING, 1)
            oprot.writeString(self.pd_devid.encode('utf-8') if sys.version_info[0] == 2 else self.pd_devid)
            oprot.writeFieldEnd()
        if self.capacity_gb is not None:
            oprot.writeFieldBegin('capacity_gb', TType.DOUBLE, 2)
            oprot.writeDouble(self.capacity_gb)
            oprot.writeFieldEnd()
        if self.ld_devid is not None:
            oprot.writeFieldBegin('ld_devid', TType.STRING, 3)
            oprot.writeString(self.ld_devid.encode('utf-8') if sys.version_info[0] == 2 else self.ld_devid)
            oprot.writeFieldEnd()
        if self.firmware_state is not None:
            oprot.writeFieldBegin('firmware_state', TType.STRING, 4)
            oprot.writeString(self.firmware_state.encode('utf-8') if sys.version_info[0] == 2 else self.firmware_state)
            oprot.writeFieldEnd()
        if self.foreign_state is not None:
            oprot.writeFieldBegin('foreign_state', TType.STRING, 5)
            oprot.writeString(self.foreign_state.encode('utf-8') if sys.version_info[0] == 2 else self.foreign_state)
            oprot.writeFieldEnd()
        if self.device_id is not None:
            oprot.writeFieldBegin('device_id', TType.STRING, 6)
            oprot.writeString(self.device_id.encode('utf-8') if sys.version_info[0] == 2 else self.device_id)
            oprot.writeFieldEnd()
        if self.is_hotspare is not None:
            oprot.writeFieldBegin('is_hotspare', TType.BOOL, 7)
            oprot.writeBool(self.is_hotspare)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTRaidLDInfo(object):
    """
    Attributes:
     - ld_devid
     - disk_dev_path
     - capacity_gb
     - raid_level
     - pd_devid_list
     - state
     - disk_group

    """


    def __init__(self, ld_devid="", disk_dev_path="", capacity_gb=float(0), raid_level="", pd_devid_list=[
    ], state="", disk_group="",):
        self.ld_devid = ld_devid
        self.disk_dev_path = disk_dev_path
        self.capacity_gb = capacity_gb
        self.raid_level = raid_level
        if pd_devid_list is self.thrift_spec[5][4]:
            pd_devid_list = [
            ]
        self.pd_devid_list = pd_devid_list
        self.state = state
        self.disk_group = disk_group

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ld_devid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.disk_dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.capacity_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.raid_level = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.pd_devid_list = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.pd_devid_list.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.disk_group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTRaidLDInfo')
        if self.ld_devid is not None:
            oprot.writeFieldBegin('ld_devid', TType.STRING, 1)
            oprot.writeString(self.ld_devid.encode('utf-8') if sys.version_info[0] == 2 else self.ld_devid)
            oprot.writeFieldEnd()
        if self.disk_dev_path is not None:
            oprot.writeFieldBegin('disk_dev_path', TType.STRING, 2)
            oprot.writeString(self.disk_dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.disk_dev_path)
            oprot.writeFieldEnd()
        if self.capacity_gb is not None:
            oprot.writeFieldBegin('capacity_gb', TType.DOUBLE, 3)
            oprot.writeDouble(self.capacity_gb)
            oprot.writeFieldEnd()
        if self.raid_level is not None:
            oprot.writeFieldBegin('raid_level', TType.STRING, 4)
            oprot.writeString(self.raid_level.encode('utf-8') if sys.version_info[0] == 2 else self.raid_level)
            oprot.writeFieldEnd()
        if self.pd_devid_list is not None:
            oprot.writeFieldBegin('pd_devid_list', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.pd_devid_list))
            for iter43 in self.pd_devid_list:
                oprot.writeString(iter43.encode('utf-8') if sys.version_info[0] == 2 else iter43)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 6)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        if self.disk_group is not None:
            oprot.writeFieldBegin('disk_group', TType.STRING, 7)
            oprot.writeString(self.disk_group.encode('utf-8') if sys.version_info[0] == 2 else self.disk_group)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDataVolume(object):
    """
    Attributes:
     - vol_dev_path
     - disk_dev_path
     - capacity_gb
     - fs_type
     - mount_uuid
     - mount_path
     - used_size_gb

    """


    def __init__(self, vol_dev_path="", disk_dev_path="", capacity_gb=float(0), fs_type="", mount_uuid="", mount_path="", used_size_gb=float(-1),):
        self.vol_dev_path = vol_dev_path
        self.disk_dev_path = disk_dev_path
        self.capacity_gb = capacity_gb
        self.fs_type = fs_type
        self.mount_uuid = mount_uuid
        self.mount_path = mount_path
        self.used_size_gb = used_size_gb

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vol_dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.disk_dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.capacity_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.fs_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.mount_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.mount_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.used_size_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDataVolume')
        if self.vol_dev_path is not None:
            oprot.writeFieldBegin('vol_dev_path', TType.STRING, 1)
            oprot.writeString(self.vol_dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.vol_dev_path)
            oprot.writeFieldEnd()
        if self.disk_dev_path is not None:
            oprot.writeFieldBegin('disk_dev_path', TType.STRING, 2)
            oprot.writeString(self.disk_dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.disk_dev_path)
            oprot.writeFieldEnd()
        if self.capacity_gb is not None:
            oprot.writeFieldBegin('capacity_gb', TType.DOUBLE, 3)
            oprot.writeDouble(self.capacity_gb)
            oprot.writeFieldEnd()
        if self.fs_type is not None:
            oprot.writeFieldBegin('fs_type', TType.STRING, 4)
            oprot.writeString(self.fs_type.encode('utf-8') if sys.version_info[0] == 2 else self.fs_type)
            oprot.writeFieldEnd()
        if self.mount_uuid is not None:
            oprot.writeFieldBegin('mount_uuid', TType.STRING, 5)
            oprot.writeString(self.mount_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.mount_uuid)
            oprot.writeFieldEnd()
        if self.mount_path is not None:
            oprot.writeFieldBegin('mount_path', TType.STRING, 6)
            oprot.writeString(self.mount_path.encode('utf-8') if sys.version_info[0] == 2 else self.mount_path)
            oprot.writeFieldEnd()
        if self.used_size_gb is not None:
            oprot.writeFieldBegin('used_size_gb', TType.DOUBLE, 7)
            oprot.writeDouble(self.used_size_gb)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDataDisk(object):
    """
    Attributes:
     - disk_dev_path
     - capacity_gb
     - disk_model
     - volumes

    """


    def __init__(self, disk_dev_path="", capacity_gb=float(0), disk_model="", volumes={
    },):
        self.disk_dev_path = disk_dev_path
        self.capacity_gb = capacity_gb
        self.disk_model = disk_model
        if volumes is self.thrift_spec[4][4]:
            volumes = {
            }
        self.volumes = volumes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.disk_dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.capacity_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.disk_model = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.volumes = {}
                    (_ktype45, _vtype46, _size44) = iprot.readMapBegin()
                    for _i48 in range(_size44):
                        _key49 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val50 = ncTDataVolume()
                        _val50.read(iprot)
                        self.volumes[_key49] = _val50
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDataDisk')
        if self.disk_dev_path is not None:
            oprot.writeFieldBegin('disk_dev_path', TType.STRING, 1)
            oprot.writeString(self.disk_dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.disk_dev_path)
            oprot.writeFieldEnd()
        if self.capacity_gb is not None:
            oprot.writeFieldBegin('capacity_gb', TType.DOUBLE, 2)
            oprot.writeDouble(self.capacity_gb)
            oprot.writeFieldEnd()
        if self.disk_model is not None:
            oprot.writeFieldBegin('disk_model', TType.STRING, 3)
            oprot.writeString(self.disk_model.encode('utf-8') if sys.version_info[0] == 2 else self.disk_model)
            oprot.writeFieldEnd()
        if self.volumes is not None:
            oprot.writeFieldBegin('volumes', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.volumes))
            for kiter51, viter52 in self.volumes.items():
                oprot.writeString(kiter51.encode('utf-8') if sys.version_info[0] == 2 else kiter51)
                viter52.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTVolume(object):
    """
    Attributes:
     - vol_dev_path
     - disk_dev_path
     - capacity_gb
     - used_size_gb
     - fs_type
     - mount_path
     - disk_model

    """


    def __init__(self, vol_dev_path="", disk_dev_path="", capacity_gb=float(0), used_size_gb=float(-1), fs_type="", mount_path="", disk_model="",):
        self.vol_dev_path = vol_dev_path
        self.disk_dev_path = disk_dev_path
        self.capacity_gb = capacity_gb
        self.used_size_gb = used_size_gb
        self.fs_type = fs_type
        self.mount_path = mount_path
        self.disk_model = disk_model

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vol_dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.disk_dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.capacity_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.used_size_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.fs_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.mount_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.disk_model = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTVolume')
        if self.vol_dev_path is not None:
            oprot.writeFieldBegin('vol_dev_path', TType.STRING, 1)
            oprot.writeString(self.vol_dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.vol_dev_path)
            oprot.writeFieldEnd()
        if self.disk_dev_path is not None:
            oprot.writeFieldBegin('disk_dev_path', TType.STRING, 2)
            oprot.writeString(self.disk_dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.disk_dev_path)
            oprot.writeFieldEnd()
        if self.capacity_gb is not None:
            oprot.writeFieldBegin('capacity_gb', TType.DOUBLE, 3)
            oprot.writeDouble(self.capacity_gb)
            oprot.writeFieldEnd()
        if self.used_size_gb is not None:
            oprot.writeFieldBegin('used_size_gb', TType.DOUBLE, 4)
            oprot.writeDouble(self.used_size_gb)
            oprot.writeFieldEnd()
        if self.fs_type is not None:
            oprot.writeFieldBegin('fs_type', TType.STRING, 5)
            oprot.writeString(self.fs_type.encode('utf-8') if sys.version_info[0] == 2 else self.fs_type)
            oprot.writeFieldEnd()
        if self.mount_path is not None:
            oprot.writeFieldBegin('mount_path', TType.STRING, 6)
            oprot.writeString(self.mount_path.encode('utf-8') if sys.version_info[0] == 2 else self.mount_path)
            oprot.writeFieldEnd()
        if self.disk_model is not None:
            oprot.writeFieldBegin('disk_model', TType.STRING, 7)
            oprot.writeString(self.disk_model.encode('utf-8') if sys.version_info[0] == 2 else self.disk_model)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTImportRule(object):
    """
    导入规则

    Attributes:
     - create_missing
     - update_existing
     - delete_missing

    """


    def __init__(self, create_missing=False, update_existing=False, delete_missing=False,):
        self.create_missing = create_missing
        self.update_existing = update_existing
        self.delete_missing = delete_missing

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.create_missing = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.update_existing = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.delete_missing = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTImportRule')
        if self.create_missing is not None:
            oprot.writeFieldBegin('create_missing', TType.BOOL, 1)
            oprot.writeBool(self.create_missing)
            oprot.writeFieldEnd()
        if self.update_existing is not None:
            oprot.writeFieldBegin('update_existing', TType.BOOL, 2)
            oprot.writeBool(self.update_existing)
            oprot.writeFieldEnd()
        if self.delete_missing is not None:
            oprot.writeFieldBegin('delete_missing', TType.BOOL, 3)
            oprot.writeBool(self.delete_missing)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTLogHostInfo)
ncTLogHostInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'facility', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'severity', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ip', 'UTF8', None, ),  # 3
    (4, TType.I32, 'port', None, None, ),  # 4
    (5, TType.STRING, 'protocol', 'UTF8', None, ),  # 5
)
all_structs.append(ncTDBInstInfo)
ncTDBInstInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'service_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'data_dir', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'socket', 'UTF8', None, ),  # 3
    (4, TType.I32, 'port', None, None, ),  # 4
    (5, TType.STRING, 'pid_file', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'mysqld_bin_path', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'log_error', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'package_name', 'UTF8', None, ),  # 8
    (9, TType.MAP, 'option', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), {
    }, ),  # 9
)
all_structs.append(ncTExternalDBInfo)
ncTExternalDBInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_host', 'UTF8', "", ),  # 1
    (2, TType.I32, 'db_port', None, 0, ),  # 2
    (3, TType.STRING, 'db_user', 'UTF8', "", ),  # 3
    (4, TType.STRING, 'db_password', 'UTF8', "", ),  # 4
)
all_structs.append(ncTSSHInfo)
ncTSSHInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'host', 'UTF8', "", ),  # 1
    (2, TType.I32, 'port', None, 0, ),  # 2
    (3, TType.STRING, 'user', 'UTF8', "", ),  # 3
    (4, TType.STRING, 'password', 'UTF8', "", ),  # 4
)
all_structs.append(ncTTCPCheckInfo)
ncTTCPCheckInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'connect_port', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'connect_timeout', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'nb_get_retry', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'delay_before_retry', 'UTF8', None, ),  # 4
)
all_structs.append(ncTRealServerInfo)
ncTRealServerInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'real_ip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'port', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'weight', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'tcp_check', [ncTTCPCheckInfo, None], None, ),  # 4
)
all_structs.append(ncTVirtualServerInfo)
ncTVirtualServerInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'virtual_ip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'port', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'delay_loop', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'lb_algo', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'lb_kind', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'protocol', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'real_server', (TType.STRUCT, [ncTRealServerInfo, None], False), None, ),  # 7
    (8, TType.BOOL, 'exists', None, False, ),  # 8
)
all_structs.append(ncTGlobalDefsInfo)
ncTGlobalDefsInfo.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'notification_email', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRING, 'notification_email_from', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'smtp_server', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'smtp_connect_timeout', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'router_id', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'exists', None, False, ),  # 6
)
all_structs.append(ncTVirtualIPAddressInfo)
ncTVirtualIPAddressInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ipaddr', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'netmask', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'nic_name', 'UTF8', "", ),  # 3
    (4, TType.STRING, 'virtual_nic_name', 'UTF8', "", ),  # 4
)
all_structs.append(ncTVrrpInstanceInfo)
ncTVrrpInstanceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vrrp_instance_name', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'state', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'interface_name', 'UTF8', "", ),  # 3
    (4, TType.I32, 'virtual_router_id', None, 0, ),  # 4
    (5, TType.I32, 'priority', None, 0, ),  # 5
    (6, TType.STRING, 'advert_int', 'UTF8', "", ),  # 6
    (7, TType.STRING, 'auth_type', 'UTF8', "", ),  # 7
    (8, TType.STRING, 'auth_pass', 'UTF8', "", ),  # 8
    (9, TType.LIST, 'virtual_ipaddress', (TType.STRUCT, [ncTVirtualIPAddressInfo, None], False), None, ),  # 9
    (10, TType.STRING, 'unicast_src_ip', 'UTF8', "", ),  # 10
    (11, TType.STRING, 'unicast_peer', 'UTF8', "", ),  # 11
    (12, TType.BOOL, 'exists', None, False, ),  # 12
)
all_structs.append(ncTEtcdConfigInfo)
ncTEtcdConfigInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ad_peer_urls', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'listen_peer_urls', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'listen_client_urls', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'ad_client_urls', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'cluster_token', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'cluster', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'data_dir', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'cluster_state', 'UTF8', None, ),  # 9
)
all_structs.append(ncTEtcdMemberInfo)
ncTEtcdMemberInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'peerurl', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'clienturl', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'isLeader', 'UTF8', None, ),  # 5
)
all_structs.append(ncTIfAddr)
ncTIfAddr.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nic_dev_name', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'label', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'ipaddr', 'UTF8', "", ),  # 3
    (4, TType.STRING, 'netmask', 'UTF8', "", ),  # 4
    (5, TType.STRING, 'gateway', 'UTF8', "", ),  # 5
)
all_structs.append(ncTNic)
ncTNic.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nic_dev_name', 'UTF8', "", ),  # 1
    (2, TType.BOOL, 'is_up', None, False, ),  # 2
    (3, TType.STRING, 'state_info', 'UTF8', "", ),  # 3
    (4, TType.STRING, 'hw_info', 'UTF8', "", ),  # 4
    (5, TType.LIST, 'ifaddrs', (TType.STRUCT, [ncTIfAddr, None], False), [
    ], ),  # 5
)
all_structs.append(ncTSwiftDevice)
ncTSwiftDevice.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, -1, ),  # 1
    (2, TType.I32, 'region', None, -1, ),  # 2
    (3, TType.I32, 'zone', None, -1, ),  # 3
    (4, TType.STRING, 'ip', 'UTF8', "", ),  # 4
    (5, TType.I32, 'port', None, -1, ),  # 5
    (6, TType.STRING, 'dev_name', 'UTF8', "", ),  # 6
    (7, TType.DOUBLE, 'weight', None, float(-1), ),  # 7
    (8, TType.I64, 'partition_count', None, -1, ),  # 8
    (9, TType.DOUBLE, 'balance', None, float(-1), ),  # 9
    (10, TType.DOUBLE, 'capacity_gb', None, float(-1), ),  # 10
)
all_structs.append(ncTSwiftRing)
ncTSwiftRing.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'part_power', None, 0, ),  # 1
    (2, TType.I32, 'replicas', None, 0, ),  # 2
    (3, TType.I32, 'min_part_hours', None, 0, ),  # 3
    (4, TType.I64, 'partition_count', None, 0, ),  # 4
    (5, TType.I32, 'region_count', None, 0, ),  # 5
    (6, TType.I32, 'zone_count', None, 0, ),  # 6
    (7, TType.I32, 'device_count', None, 0, ),  # 7
    (8, TType.DOUBLE, 'balance', None, float(0), ),  # 8
    (9, TType.I32, 'build_version', None, 0, ),  # 9
    (10, TType.DOUBLE, 'physical_capacity_gb', None, float(0), ),  # 10
    (11, TType.DOUBLE, 'logical_capacity_gb', None, float(0), ),  # 11
)
all_structs.append(ncTRaidPDInfo)
ncTRaidPDInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pd_devid', 'UTF8', "", ),  # 1
    (2, TType.DOUBLE, 'capacity_gb', None, float(0), ),  # 2
    (3, TType.STRING, 'ld_devid', 'UTF8', "", ),  # 3
    (4, TType.STRING, 'firmware_state', 'UTF8', "", ),  # 4
    (5, TType.STRING, 'foreign_state', 'UTF8', "", ),  # 5
    (6, TType.STRING, 'device_id', 'UTF8', "", ),  # 6
    (7, TType.BOOL, 'is_hotspare', None, False, ),  # 7
)
all_structs.append(ncTRaidLDInfo)
ncTRaidLDInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ld_devid', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'disk_dev_path', 'UTF8', "", ),  # 2
    (3, TType.DOUBLE, 'capacity_gb', None, float(0), ),  # 3
    (4, TType.STRING, 'raid_level', 'UTF8', "", ),  # 4
    (5, TType.LIST, 'pd_devid_list', (TType.STRING, 'UTF8', False), [
    ], ),  # 5
    (6, TType.STRING, 'state', 'UTF8', "", ),  # 6
    (7, TType.STRING, 'disk_group', 'UTF8', "", ),  # 7
)
all_structs.append(ncTDataVolume)
ncTDataVolume.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vol_dev_path', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'disk_dev_path', 'UTF8', "", ),  # 2
    (3, TType.DOUBLE, 'capacity_gb', None, float(0), ),  # 3
    (4, TType.STRING, 'fs_type', 'UTF8', "", ),  # 4
    (5, TType.STRING, 'mount_uuid', 'UTF8', "", ),  # 5
    (6, TType.STRING, 'mount_path', 'UTF8', "", ),  # 6
    (7, TType.DOUBLE, 'used_size_gb', None, float(-1), ),  # 7
)
all_structs.append(ncTDataDisk)
ncTDataDisk.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'disk_dev_path', 'UTF8', "", ),  # 1
    (2, TType.DOUBLE, 'capacity_gb', None, float(0), ),  # 2
    (3, TType.STRING, 'disk_model', 'UTF8', "", ),  # 3
    (4, TType.MAP, 'volumes', (TType.STRING, 'UTF8', TType.STRUCT, [ncTDataVolume, None], False), {
    }, ),  # 4
)
all_structs.append(ncTVolume)
ncTVolume.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vol_dev_path', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'disk_dev_path', 'UTF8', "", ),  # 2
    (3, TType.DOUBLE, 'capacity_gb', None, float(0), ),  # 3
    (4, TType.DOUBLE, 'used_size_gb', None, float(-1), ),  # 4
    (5, TType.STRING, 'fs_type', 'UTF8', "", ),  # 5
    (6, TType.STRING, 'mount_path', 'UTF8', "", ),  # 6
    (7, TType.STRING, 'disk_model', 'UTF8', "", ),  # 7
)
all_structs.append(ncTImportRule)
ncTImportRule.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'create_missing', None, False, ),  # 1
    (2, TType.BOOL, 'update_existing', None, False, ),  # 2
    (3, TType.BOOL, 'delete_missing', None, False, ),  # 3
)
fix_spec(all_structs)
del all_structs
