#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ECMSAgent import ncTECMSAgent
from ECMSAgent.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void yum_install(string name)')
    print('  void yum_remove(string name)')
    print('  bool yum_exist(string name)')
    print('  ncTChronyRole get_chrony_role()')
    print('  void set_chrony_server()')
    print('  void set_chrony_client(string server_ip)')
    print('  void clear_chrony_config()')
    print('  double get_chrony_diff_from_ref()')
    print('  void chrony_makestep()')
    print('  void start_service(string service_name)')
    print('  void stop_service(string service_name)')
    print('  void restart_service(string service_name)')
    print('  ncTServiceStatus get_service_status(string service_name)')
    print('  void start_service_certainly(string service_name, i32 timeout)')
    print('  void stop_service_certainly(string service_name, i32 timeout)')
    print('  void restart_service_async(string service_name)')
    print('  void reload_service(string service_name)')
    print('   get_service_pids(string service_name)')
    print('  void stop_service_by_pid(string pid)')
    print('  bool is_enabled(string service_name)')
    print('  void enable_service(string service_name)')
    print('  void disable_service(string service_name)')
    print('  void systemctl_daemon_reload()')
    print('  ncTDBInstInfo get_db_info(string inst)')
    print('  ncTDBInstInfo get_db_info_by_port(i32 port)')
    print('   get_all_db_info()')
    print('   get_db_include_inst()')
    print('  bool exist_inst(string inst_name)')
    print('  void add_inst_conf( conf_dict, ncTDBInstInfo db_info)')
    print('  void remove_inst(string service_name)')
    print('  void create_inst_dir(string data_dir)')
    print('  void start_mysql_service(string service_name)')
    print('  void stop_mysql_service(string service_name)')
    print('  void restart_mysql_service(string service_name)')
    print('  bool is_port_alive(string host, i32 port, string user, string password)')
    print('  void change_init_pwd(string unix_socket)')
    print('  void create_users(i32 port)')
    print('  void install_semisync_plugin(i32 port)')
    print('  void set_semi_sync(string service_name, string server_id)')
    print('  void skip_slave_error(string service_name, string error_number)')
    print('   get_master_status(string remote_ip, i32 remote_port)')
    print('   get_slave_status(string remote_ip, i32 remote_port)')
    print('  void init_mysql_data_dir(string data_dir)')
    print('  void innoxtrabackup_db(i32 port, string data_dir, string path)')
    print('  void send_db_file(string data_dir, ncTSSHInfo ssh_info)')
    print('  void remove_xtrabackup_dir(string data_dir)')
    print('  i32 get_server_id(string ip, i32 port)')
    print('  void reback_file(string path, string data_dir)')
    print('  void set_semisync_on_slave_node(string master_ip, string slave_ip, ncTDBInstInfo db_info)')
    print('  void set_semisync_on_master_node(string master_ip, string slave_ip, ncTDBInstInfo db_info)')
    print('  void start_semisync( remote_master_dict,  remote_slave_dict)')
    print('  void set_db_mode(string ip, i32 port, bool is_read_only)')
    print('   dump_db_to_path(string ip, i32 port,  db_list, string path)')
    print('  void import_sql_to_db( sql_path_dict, i32 port)')
    print('  void lock_tables(string ip, i32 port, bool lock_status)')
    print('  void reset_db_semisync(string ip, i32 port)')
    print('  void del_binary_log_to_file(string binlog_file_name, i32 db_port)')
    print('   get_custom_databases(string ip, i32 port)')
    print('  void create_database( database_list, string ip, i32 port)')
    print('  void make_instance_not_empty(string database, string ip, i32 port)')
    print('   get_inst_from_conf()')
    print('   get_conf_by_inst_name(string name)')
    print('  void add_rich_rule( rich_rule_list, string zone, bool is_permanent)')
    print('  void remove_rich_rule( rich_rule_list, string zone, bool is_permanent)')
    print('  void add_source(string source, string zone, bool is_permanent)')
    print('  void remove_source(string source, string zone, bool is_permanent)')
    print('   get_firewall_info(string option, string zone, bool is_permanent)')
    print('  string get_target(string zone)')
    print('  void set_target(string option, string zone)')
    print('  string get_default_zone()')
    print('  void set_default_zone(string zone)')
    print('  void remove_service(string service_name, string zone, bool is_permanent)')
    print('  void reload_firewall(bool is_complete)')
    print('  void init_firewall_xml()')
    print('  void set_global(string router_id)')
    print('  void set_keepalived(ncTVrrpInstanceInfo vrrp_instance_info)')
    print('  void set_lvs(string virtual_ip,  port_list,  real_ip_list)')
    print('  void clear_keepalived()')
    print('  bool keepalived_conf_is_empty()')
    print('  ncTGlobalDefsInfo get_global_info()')
    print('   get_keepalived_info()')
    print('   get_lvs_info()')
    print('   get_lvs_port()')
    print('  i32 get_lvs_active_conn(string host, i32 port)')
    print('   get_real_ips()')
    print('  void del_keepalived_by_name(string inst_name, bool need_reload)')
    print('  void del_lvs(bool need_reload)')
    print('  void start_keepalived_service()')
    print('  void stop_keepalived_service()')
    print('  void reload_keepalived_service(bool is_vrrp_changed)')
    print('  string get_add_etcd_info(string cmd_str)')
    print('   get_etcd_member_list()')
    print('   get_etcd_pid_list(bool is_second)')
    print('  void add_etcd_inst(ncTEtcdConfigInfo etcdinfo)')
    print('  void remove_etcd_inst(string etcdid)')
    print('  bool get_etcd_process_status()')
    print('  bool get_etcd_process_status_second()')
    print('  void start_etcd_on_node(ncTEtcdConfigInfo etcdinfo)')
    print('   get_etcd_data_dir()')
    print('   get_etcd_health_info()')
    print('  void backup_etcd_data(string dir_path)')
    print('  void send_etcd_data(string data_dir,  ssh_dict)')
    print('  void update_etcd_peerurl(string member_id, string url_str)')
    print('  i64 get_dir_size(string data_dir)')
    print('  i64 get_fs_free(string mount_path)')
    print('  void mv_dir(string src, string desc)')
    print('  void cp_file(string src, string desc)')
    print('   list_dir(string path)')
    print('  bool exists_path(string path)')
    print('  void rm_dir(string path)')
    print('  void set_cluster_conf(string db_host, i32 db_port)')
    print('  void update_cluster_ipaddr(string ipaddr)')
    print('  string get_cluster_ipaddr()')
    print('  void create_disk_conf()')
    print('  void remove_disk_conf()')
    print('  bool exists_disk_conf()')
    print('  string get_mount_extend_args()')
    print('  void set_nsqlookupd_addr(string ipaddr)')
    print('  void set_nsqlookupd_port(i32 port, string connect_type)')
    print('  string get_nsqlookupd_addr()')
    print('  void set_app_master_node_uuid(string node_uuid)')
    print('  string get_app_master_node_uuid()')
    print('  void remove_cluster_conf()')
    print('  bool exists_cluster_conf()')
    print('  void create_node_info_conf(string node_uuid)')
    print('  void remove_node_info_conf()')
    print('  bool exists_node_info_conf()')
    print('  string get_node_uuid()')
    print('  void set_backup_conf(i32 package_count, string backup_time)')
    print('  string get_os_version()')
    print('  string get_as_version()')
    print('  string get_time()')
    print('  void set_time(string time_str)')
    print('  void reboot_node()')
    print('  void shutdown_node()')
    print('  void disable_selinux()')
    print('  void syspatch()')
    print('  void add_cron_job(i32 minute, i32 hour, string command)')
    print('  void del_cron_job(string command)')
    print('  void set_rsyslog_server(ncTLogHostInfo log_host_info)')
    print('  void remove_rsyslog_server(ncTLogHostInfo log_host_info)')
    print('   get_rsyslog_server()')
    print('  bool is_asu_node()')
    print('  string get_language()')
    print('  void set_language(string langstr)')
    print('  void set_external_db_conf(ncTExternalDBInfo info)')
    print('  ncTExternalDBInfo get_external_db_conf()')
    print('  bool is_conf_file_consistency(string conf_file_path, string conf_file_md5)')
    print('  void update_distributed_conf_file(string conf_file_path, string conf_file_content, string conf_file_md5)')
    print('   get_registered_distributed_conf_files()')
    print('  void update_zabbix_agentd_config(string hostname, string server)')
    print('   query_zabbix_agentd_config()')
    print('  void update_zabbix_server_config(string dbhost, i32 dbport, string dbname, string dbuser, string dbpassword, string listenip)')
    print('   query_zabbix_server_config()')
    print('  void update_zabbix_gui_config(string server, i32 port, string database, string user, string password, string zbx_server, i32 zbx_server_port)')
    print('   query_zabbix_gui_config()')
    print('  void import_zabbix_config(string path)')
    print('   import_zabbix_action(string path, ncTImportRule rule)')
    print('  void patch_apache(i32 listen_port)')
    print('   get_ip_addrs()')
    print('   get_interface_name_for_vip()')
    print('   get_nics()')
    print('  ncTIfAddr get_ifaddr(string label)')
    print('  ncTIfAddr get_ifaddr_by_ipaddr(string ipaddr)')
    print('  void set_ifaddr(ncTIfAddr ifaddr)')
    print('  void del_ifaddr(string label)')
    print('  void bind_nics( nic_name_list)')
    print('  void unbind_nic(string bond_dev_name)')
    print('  bool exists_arp(string ipaddr)')
    print('  void del_arp(string ipaddr)')
    print('  void add_roster_conf(string ssh_ip, i32 ssh_port, string ssh_user, string ssh_passwd)')
    print('  void del_ssh_from_roster(string ssh_ip)')
    print('  void clear_roster_conf()')
    print('  void create_ring(i32 part_power, i32 replicas)')
    print('  i32 add_device(i32 region, i32 zone, string ip, string dev_name, double dev_capacity_gb)')
    print('  bool remove_device(i32 dev_id)')
    print('  void change_replicas(i32 replicas)')
    print('  void change_weight(i32 dev_id, double dev_capacity_gb)')
    print('  i64 rebalance()')
    print('  void change_dev_name(i32 dev_id, string dev_name)')
    print('  void change_ip(i32 dev_id, string ip)')
    print('  void write_ring()')
    print('  bool is_persistent_ring_exists()')
    print('  void backup_ring()')
    print('  void restore_ring()')
    print('  string get_persistent_ring_md5()')
    print('  ncTSwiftRing get_persistent_ring_info()')
    print('   get_persistent_ring_devices()')
    print('  void refresh_working_ring()')
    print('  string get_working_ring_md5()')
    print('  void clear_working_ring()')
    print('  void start_swift_service()')
    print('  void stop_swift_service()')
    print('  void restart_swift_service()')
    print('  bool is_service_started()')
    print('  double get_replicas_health()')
    print('   get_raid_pdlist()')
    print('   get_raid_pd_details(string pd_devid)')
    print('   get_data_raid_pdlist()')
    print('   get_sys_raid_pdlist()')
    print('   get_raid_ldlist()')
    print('   get_raid_ld_details(string ld_devid)')
    print('   get_data_raid_ldlist()')
    print('   get_sys_raid_ldlist()')
    print('  void clear_data_raid_pd(string pd_devid)')
    print('  bool is_data_raid_pd_good(string pd_devid)')
    print('  string create_raid( pd_devid_list, string raid_level)')
    print('  void remove_raid(string ld_devid)')
    print('  void add_raid_hotspare(string pd_devid, string ld_devid)')
    print('  void remove_raid_hotspare(string pd_devid)')
    print('  void offline_raid_pd(string pd_devid)')
    print('  string get_raid_rebuild_progress(string pd_devid)')
    print('  string get_raid_product_name()')
    print('  bool exist_iscsi_device()')
    print('   get_disk_info(string dev_path)')
    print('  ncTVolume get_sys_volume()')
    print('  ncTVolume get_sysvol_volume()')
    print('   get_data_disks()')
    print('  ncTDataDisk get_data_disk(string disk_dev_path)')
    print('  void clear_data_disk(string disk_dev_path)')
    print('  bool is_data_disk_dirty(string disk_dev_path)')
    print('  ncTDataVolume get_data_volume(string vol_dev_path)')
    print('  string create_data_volume(string disk_dev_path, double size_gb)')
    print('  void remove_data_volume(string vol_dev_path)')
    print('  void mount_data_volume(string vol_dev_path)')
    print('   get_data_mount_points()')
    print('  string create_data_mount_point(string mount_uuid, string vol_dev_path)')
    print('  void remove_data_mount_point(string mount_uuid)')
    print('  bool exists_io_error(string mount_uuid)')
    print('  string create_cache_volume(string disk_dev_path)')
    print('  void remove_cache_volume()')
    print('  ncTVolume get_cache_volume()')
    print('  void init_cache_volume()')
    print('  bool is_cache_volume_inited()')
    print('  void mount_cache_volume()')
    print('  void allocate_cache_volume()')
    print('   get_ssd_disks()')
    print('   get_ssd_status(string device_name)')
    print('   get_raid_list()')
    print('   get_raid_status(string ld_devid)')
    print('   get_physical_disk_list()')
    print('   get_physical_disk_status(string pd_devid)')
    print('  void add_time_server(string server)')
    print('  void del_time_server(string server)')
    print('  i32 get_nsqlookupd_port(string connect_type)')
    print('  void set_nsqd_lookup_addrs( addr_list)')
    print('   get_nsqd_lookup_addrs()')
    print('  void init_nsqd_cache_dir()')
    print('  bool exists_nsqd_cache_file()')
    print('  void set_nsqd_node_id(i32 node_id)')
    print('  void set_nsqd_braodcast_address(string node_ip)')
    print('   installed_service( service_names)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncTECMSAgent.Client(protocol)
transport.open()

if cmd == 'yum_install':
    if len(args) != 1:
        print('yum_install requires 1 args')
        sys.exit(1)
    pp.pprint(client.yum_install(args[0],))

elif cmd == 'yum_remove':
    if len(args) != 1:
        print('yum_remove requires 1 args')
        sys.exit(1)
    pp.pprint(client.yum_remove(args[0],))

elif cmd == 'yum_exist':
    if len(args) != 1:
        print('yum_exist requires 1 args')
        sys.exit(1)
    pp.pprint(client.yum_exist(args[0],))

elif cmd == 'get_chrony_role':
    if len(args) != 0:
        print('get_chrony_role requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_chrony_role())

elif cmd == 'set_chrony_server':
    if len(args) != 0:
        print('set_chrony_server requires 0 args')
        sys.exit(1)
    pp.pprint(client.set_chrony_server())

elif cmd == 'set_chrony_client':
    if len(args) != 1:
        print('set_chrony_client requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_chrony_client(args[0],))

elif cmd == 'clear_chrony_config':
    if len(args) != 0:
        print('clear_chrony_config requires 0 args')
        sys.exit(1)
    pp.pprint(client.clear_chrony_config())

elif cmd == 'get_chrony_diff_from_ref':
    if len(args) != 0:
        print('get_chrony_diff_from_ref requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_chrony_diff_from_ref())

elif cmd == 'chrony_makestep':
    if len(args) != 0:
        print('chrony_makestep requires 0 args')
        sys.exit(1)
    pp.pprint(client.chrony_makestep())

elif cmd == 'start_service':
    if len(args) != 1:
        print('start_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.start_service(args[0],))

elif cmd == 'stop_service':
    if len(args) != 1:
        print('stop_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop_service(args[0],))

elif cmd == 'restart_service':
    if len(args) != 1:
        print('restart_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.restart_service(args[0],))

elif cmd == 'get_service_status':
    if len(args) != 1:
        print('get_service_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_service_status(args[0],))

elif cmd == 'start_service_certainly':
    if len(args) != 2:
        print('start_service_certainly requires 2 args')
        sys.exit(1)
    pp.pprint(client.start_service_certainly(args[0], eval(args[1]),))

elif cmd == 'stop_service_certainly':
    if len(args) != 2:
        print('stop_service_certainly requires 2 args')
        sys.exit(1)
    pp.pprint(client.stop_service_certainly(args[0], eval(args[1]),))

elif cmd == 'restart_service_async':
    if len(args) != 1:
        print('restart_service_async requires 1 args')
        sys.exit(1)
    pp.pprint(client.restart_service_async(args[0],))

elif cmd == 'reload_service':
    if len(args) != 1:
        print('reload_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.reload_service(args[0],))

elif cmd == 'get_service_pids':
    if len(args) != 1:
        print('get_service_pids requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_service_pids(args[0],))

elif cmd == 'stop_service_by_pid':
    if len(args) != 1:
        print('stop_service_by_pid requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop_service_by_pid(args[0],))

elif cmd == 'is_enabled':
    if len(args) != 1:
        print('is_enabled requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_enabled(args[0],))

elif cmd == 'enable_service':
    if len(args) != 1:
        print('enable_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_service(args[0],))

elif cmd == 'disable_service':
    if len(args) != 1:
        print('disable_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable_service(args[0],))

elif cmd == 'systemctl_daemon_reload':
    if len(args) != 0:
        print('systemctl_daemon_reload requires 0 args')
        sys.exit(1)
    pp.pprint(client.systemctl_daemon_reload())

elif cmd == 'get_db_info':
    if len(args) != 1:
        print('get_db_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_db_info(args[0],))

elif cmd == 'get_db_info_by_port':
    if len(args) != 1:
        print('get_db_info_by_port requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_db_info_by_port(eval(args[0]),))

elif cmd == 'get_all_db_info':
    if len(args) != 0:
        print('get_all_db_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_db_info())

elif cmd == 'get_db_include_inst':
    if len(args) != 0:
        print('get_db_include_inst requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_db_include_inst())

elif cmd == 'exist_inst':
    if len(args) != 1:
        print('exist_inst requires 1 args')
        sys.exit(1)
    pp.pprint(client.exist_inst(args[0],))

elif cmd == 'add_inst_conf':
    if len(args) != 2:
        print('add_inst_conf requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_inst_conf(eval(args[0]), eval(args[1]),))

elif cmd == 'remove_inst':
    if len(args) != 1:
        print('remove_inst requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_inst(args[0],))

elif cmd == 'create_inst_dir':
    if len(args) != 1:
        print('create_inst_dir requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_inst_dir(args[0],))

elif cmd == 'start_mysql_service':
    if len(args) != 1:
        print('start_mysql_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.start_mysql_service(args[0],))

elif cmd == 'stop_mysql_service':
    if len(args) != 1:
        print('stop_mysql_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop_mysql_service(args[0],))

elif cmd == 'restart_mysql_service':
    if len(args) != 1:
        print('restart_mysql_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.restart_mysql_service(args[0],))

elif cmd == 'is_port_alive':
    if len(args) != 4:
        print('is_port_alive requires 4 args')
        sys.exit(1)
    pp.pprint(client.is_port_alive(args[0], eval(args[1]), args[2], args[3],))

elif cmd == 'change_init_pwd':
    if len(args) != 1:
        print('change_init_pwd requires 1 args')
        sys.exit(1)
    pp.pprint(client.change_init_pwd(args[0],))

elif cmd == 'create_users':
    if len(args) != 1:
        print('create_users requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_users(eval(args[0]),))

elif cmd == 'install_semisync_plugin':
    if len(args) != 1:
        print('install_semisync_plugin requires 1 args')
        sys.exit(1)
    pp.pprint(client.install_semisync_plugin(eval(args[0]),))

elif cmd == 'set_semi_sync':
    if len(args) != 2:
        print('set_semi_sync requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_semi_sync(args[0], args[1],))

elif cmd == 'skip_slave_error':
    if len(args) != 2:
        print('skip_slave_error requires 2 args')
        sys.exit(1)
    pp.pprint(client.skip_slave_error(args[0], args[1],))

elif cmd == 'get_master_status':
    if len(args) != 2:
        print('get_master_status requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_master_status(args[0], eval(args[1]),))

elif cmd == 'get_slave_status':
    if len(args) != 2:
        print('get_slave_status requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_slave_status(args[0], eval(args[1]),))

elif cmd == 'init_mysql_data_dir':
    if len(args) != 1:
        print('init_mysql_data_dir requires 1 args')
        sys.exit(1)
    pp.pprint(client.init_mysql_data_dir(args[0],))

elif cmd == 'innoxtrabackup_db':
    if len(args) != 3:
        print('innoxtrabackup_db requires 3 args')
        sys.exit(1)
    pp.pprint(client.innoxtrabackup_db(eval(args[0]), args[1], args[2],))

elif cmd == 'send_db_file':
    if len(args) != 2:
        print('send_db_file requires 2 args')
        sys.exit(1)
    pp.pprint(client.send_db_file(args[0], eval(args[1]),))

elif cmd == 'remove_xtrabackup_dir':
    if len(args) != 1:
        print('remove_xtrabackup_dir requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_xtrabackup_dir(args[0],))

elif cmd == 'get_server_id':
    if len(args) != 2:
        print('get_server_id requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_server_id(args[0], eval(args[1]),))

elif cmd == 'reback_file':
    if len(args) != 2:
        print('reback_file requires 2 args')
        sys.exit(1)
    pp.pprint(client.reback_file(args[0], args[1],))

elif cmd == 'set_semisync_on_slave_node':
    if len(args) != 3:
        print('set_semisync_on_slave_node requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_semisync_on_slave_node(args[0], args[1], eval(args[2]),))

elif cmd == 'set_semisync_on_master_node':
    if len(args) != 3:
        print('set_semisync_on_master_node requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_semisync_on_master_node(args[0], args[1], eval(args[2]),))

elif cmd == 'start_semisync':
    if len(args) != 2:
        print('start_semisync requires 2 args')
        sys.exit(1)
    pp.pprint(client.start_semisync(eval(args[0]), eval(args[1]),))

elif cmd == 'set_db_mode':
    if len(args) != 3:
        print('set_db_mode requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_db_mode(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'dump_db_to_path':
    if len(args) != 4:
        print('dump_db_to_path requires 4 args')
        sys.exit(1)
    pp.pprint(client.dump_db_to_path(args[0], eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'import_sql_to_db':
    if len(args) != 2:
        print('import_sql_to_db requires 2 args')
        sys.exit(1)
    pp.pprint(client.import_sql_to_db(eval(args[0]), eval(args[1]),))

elif cmd == 'lock_tables':
    if len(args) != 3:
        print('lock_tables requires 3 args')
        sys.exit(1)
    pp.pprint(client.lock_tables(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'reset_db_semisync':
    if len(args) != 2:
        print('reset_db_semisync requires 2 args')
        sys.exit(1)
    pp.pprint(client.reset_db_semisync(args[0], eval(args[1]),))

elif cmd == 'del_binary_log_to_file':
    if len(args) != 2:
        print('del_binary_log_to_file requires 2 args')
        sys.exit(1)
    pp.pprint(client.del_binary_log_to_file(args[0], eval(args[1]),))

elif cmd == 'get_custom_databases':
    if len(args) != 2:
        print('get_custom_databases requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_custom_databases(args[0], eval(args[1]),))

elif cmd == 'create_database':
    if len(args) != 3:
        print('create_database requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_database(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'make_instance_not_empty':
    if len(args) != 3:
        print('make_instance_not_empty requires 3 args')
        sys.exit(1)
    pp.pprint(client.make_instance_not_empty(args[0], args[1], eval(args[2]),))

elif cmd == 'get_inst_from_conf':
    if len(args) != 0:
        print('get_inst_from_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_inst_from_conf())

elif cmd == 'get_conf_by_inst_name':
    if len(args) != 1:
        print('get_conf_by_inst_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_conf_by_inst_name(args[0],))

elif cmd == 'add_rich_rule':
    if len(args) != 3:
        print('add_rich_rule requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_rich_rule(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'remove_rich_rule':
    if len(args) != 3:
        print('remove_rich_rule requires 3 args')
        sys.exit(1)
    pp.pprint(client.remove_rich_rule(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'add_source':
    if len(args) != 3:
        print('add_source requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_source(args[0], args[1], eval(args[2]),))

elif cmd == 'remove_source':
    if len(args) != 3:
        print('remove_source requires 3 args')
        sys.exit(1)
    pp.pprint(client.remove_source(args[0], args[1], eval(args[2]),))

elif cmd == 'get_firewall_info':
    if len(args) != 3:
        print('get_firewall_info requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_firewall_info(args[0], args[1], eval(args[2]),))

elif cmd == 'get_target':
    if len(args) != 1:
        print('get_target requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_target(args[0],))

elif cmd == 'set_target':
    if len(args) != 2:
        print('set_target requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_target(args[0], args[1],))

elif cmd == 'get_default_zone':
    if len(args) != 0:
        print('get_default_zone requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_default_zone())

elif cmd == 'set_default_zone':
    if len(args) != 1:
        print('set_default_zone requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_default_zone(args[0],))

elif cmd == 'remove_service':
    if len(args) != 3:
        print('remove_service requires 3 args')
        sys.exit(1)
    pp.pprint(client.remove_service(args[0], args[1], eval(args[2]),))

elif cmd == 'reload_firewall':
    if len(args) != 1:
        print('reload_firewall requires 1 args')
        sys.exit(1)
    pp.pprint(client.reload_firewall(eval(args[0]),))

elif cmd == 'init_firewall_xml':
    if len(args) != 0:
        print('init_firewall_xml requires 0 args')
        sys.exit(1)
    pp.pprint(client.init_firewall_xml())

elif cmd == 'set_global':
    if len(args) != 1:
        print('set_global requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_global(args[0],))

elif cmd == 'set_keepalived':
    if len(args) != 1:
        print('set_keepalived requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_keepalived(eval(args[0]),))

elif cmd == 'set_lvs':
    if len(args) != 3:
        print('set_lvs requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_lvs(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'clear_keepalived':
    if len(args) != 0:
        print('clear_keepalived requires 0 args')
        sys.exit(1)
    pp.pprint(client.clear_keepalived())

elif cmd == 'keepalived_conf_is_empty':
    if len(args) != 0:
        print('keepalived_conf_is_empty requires 0 args')
        sys.exit(1)
    pp.pprint(client.keepalived_conf_is_empty())

elif cmd == 'get_global_info':
    if len(args) != 0:
        print('get_global_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_global_info())

elif cmd == 'get_keepalived_info':
    if len(args) != 0:
        print('get_keepalived_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_keepalived_info())

elif cmd == 'get_lvs_info':
    if len(args) != 0:
        print('get_lvs_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_lvs_info())

elif cmd == 'get_lvs_port':
    if len(args) != 0:
        print('get_lvs_port requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_lvs_port())

elif cmd == 'get_lvs_active_conn':
    if len(args) != 2:
        print('get_lvs_active_conn requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_lvs_active_conn(args[0], eval(args[1]),))

elif cmd == 'get_real_ips':
    if len(args) != 0:
        print('get_real_ips requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_real_ips())

elif cmd == 'del_keepalived_by_name':
    if len(args) != 2:
        print('del_keepalived_by_name requires 2 args')
        sys.exit(1)
    pp.pprint(client.del_keepalived_by_name(args[0], eval(args[1]),))

elif cmd == 'del_lvs':
    if len(args) != 1:
        print('del_lvs requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_lvs(eval(args[0]),))

elif cmd == 'start_keepalived_service':
    if len(args) != 0:
        print('start_keepalived_service requires 0 args')
        sys.exit(1)
    pp.pprint(client.start_keepalived_service())

elif cmd == 'stop_keepalived_service':
    if len(args) != 0:
        print('stop_keepalived_service requires 0 args')
        sys.exit(1)
    pp.pprint(client.stop_keepalived_service())

elif cmd == 'reload_keepalived_service':
    if len(args) != 1:
        print('reload_keepalived_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.reload_keepalived_service(eval(args[0]),))

elif cmd == 'get_add_etcd_info':
    if len(args) != 1:
        print('get_add_etcd_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_add_etcd_info(args[0],))

elif cmd == 'get_etcd_member_list':
    if len(args) != 0:
        print('get_etcd_member_list requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_etcd_member_list())

elif cmd == 'get_etcd_pid_list':
    if len(args) != 1:
        print('get_etcd_pid_list requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_etcd_pid_list(eval(args[0]),))

elif cmd == 'add_etcd_inst':
    if len(args) != 1:
        print('add_etcd_inst requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_etcd_inst(eval(args[0]),))

elif cmd == 'remove_etcd_inst':
    if len(args) != 1:
        print('remove_etcd_inst requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_etcd_inst(args[0],))

elif cmd == 'get_etcd_process_status':
    if len(args) != 0:
        print('get_etcd_process_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_etcd_process_status())

elif cmd == 'get_etcd_process_status_second':
    if len(args) != 0:
        print('get_etcd_process_status_second requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_etcd_process_status_second())

elif cmd == 'start_etcd_on_node':
    if len(args) != 1:
        print('start_etcd_on_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.start_etcd_on_node(eval(args[0]),))

elif cmd == 'get_etcd_data_dir':
    if len(args) != 0:
        print('get_etcd_data_dir requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_etcd_data_dir())

elif cmd == 'get_etcd_health_info':
    if len(args) != 0:
        print('get_etcd_health_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_etcd_health_info())

elif cmd == 'backup_etcd_data':
    if len(args) != 1:
        print('backup_etcd_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.backup_etcd_data(args[0],))

elif cmd == 'send_etcd_data':
    if len(args) != 2:
        print('send_etcd_data requires 2 args')
        sys.exit(1)
    pp.pprint(client.send_etcd_data(args[0], eval(args[1]),))

elif cmd == 'update_etcd_peerurl':
    if len(args) != 2:
        print('update_etcd_peerurl requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_etcd_peerurl(args[0], args[1],))

elif cmd == 'get_dir_size':
    if len(args) != 1:
        print('get_dir_size requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_dir_size(args[0],))

elif cmd == 'get_fs_free':
    if len(args) != 1:
        print('get_fs_free requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fs_free(args[0],))

elif cmd == 'mv_dir':
    if len(args) != 2:
        print('mv_dir requires 2 args')
        sys.exit(1)
    pp.pprint(client.mv_dir(args[0], args[1],))

elif cmd == 'cp_file':
    if len(args) != 2:
        print('cp_file requires 2 args')
        sys.exit(1)
    pp.pprint(client.cp_file(args[0], args[1],))

elif cmd == 'list_dir':
    if len(args) != 1:
        print('list_dir requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_dir(args[0],))

elif cmd == 'exists_path':
    if len(args) != 1:
        print('exists_path requires 1 args')
        sys.exit(1)
    pp.pprint(client.exists_path(args[0],))

elif cmd == 'rm_dir':
    if len(args) != 1:
        print('rm_dir requires 1 args')
        sys.exit(1)
    pp.pprint(client.rm_dir(args[0],))

elif cmd == 'set_cluster_conf':
    if len(args) != 2:
        print('set_cluster_conf requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_cluster_conf(args[0], eval(args[1]),))

elif cmd == 'update_cluster_ipaddr':
    if len(args) != 1:
        print('update_cluster_ipaddr requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_cluster_ipaddr(args[0],))

elif cmd == 'get_cluster_ipaddr':
    if len(args) != 0:
        print('get_cluster_ipaddr requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_ipaddr())

elif cmd == 'create_disk_conf':
    if len(args) != 0:
        print('create_disk_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.create_disk_conf())

elif cmd == 'remove_disk_conf':
    if len(args) != 0:
        print('remove_disk_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.remove_disk_conf())

elif cmd == 'exists_disk_conf':
    if len(args) != 0:
        print('exists_disk_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.exists_disk_conf())

elif cmd == 'get_mount_extend_args':
    if len(args) != 0:
        print('get_mount_extend_args requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_mount_extend_args())

elif cmd == 'set_nsqlookupd_addr':
    if len(args) != 1:
        print('set_nsqlookupd_addr requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_nsqlookupd_addr(args[0],))

elif cmd == 'set_nsqlookupd_port':
    if len(args) != 2:
        print('set_nsqlookupd_port requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_nsqlookupd_port(eval(args[0]), args[1],))

elif cmd == 'get_nsqlookupd_addr':
    if len(args) != 0:
        print('get_nsqlookupd_addr requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_nsqlookupd_addr())

elif cmd == 'set_app_master_node_uuid':
    if len(args) != 1:
        print('set_app_master_node_uuid requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_app_master_node_uuid(args[0],))

elif cmd == 'get_app_master_node_uuid':
    if len(args) != 0:
        print('get_app_master_node_uuid requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_app_master_node_uuid())

elif cmd == 'remove_cluster_conf':
    if len(args) != 0:
        print('remove_cluster_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.remove_cluster_conf())

elif cmd == 'exists_cluster_conf':
    if len(args) != 0:
        print('exists_cluster_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.exists_cluster_conf())

elif cmd == 'create_node_info_conf':
    if len(args) != 1:
        print('create_node_info_conf requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_node_info_conf(args[0],))

elif cmd == 'remove_node_info_conf':
    if len(args) != 0:
        print('remove_node_info_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.remove_node_info_conf())

elif cmd == 'exists_node_info_conf':
    if len(args) != 0:
        print('exists_node_info_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.exists_node_info_conf())

elif cmd == 'get_node_uuid':
    if len(args) != 0:
        print('get_node_uuid requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_node_uuid())

elif cmd == 'set_backup_conf':
    if len(args) != 2:
        print('set_backup_conf requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_backup_conf(eval(args[0]), args[1],))

elif cmd == 'get_os_version':
    if len(args) != 0:
        print('get_os_version requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_os_version())

elif cmd == 'get_as_version':
    if len(args) != 0:
        print('get_as_version requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_as_version())

elif cmd == 'get_time':
    if len(args) != 0:
        print('get_time requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_time())

elif cmd == 'set_time':
    if len(args) != 1:
        print('set_time requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_time(args[0],))

elif cmd == 'reboot_node':
    if len(args) != 0:
        print('reboot_node requires 0 args')
        sys.exit(1)
    pp.pprint(client.reboot_node())

elif cmd == 'shutdown_node':
    if len(args) != 0:
        print('shutdown_node requires 0 args')
        sys.exit(1)
    pp.pprint(client.shutdown_node())

elif cmd == 'disable_selinux':
    if len(args) != 0:
        print('disable_selinux requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_selinux())

elif cmd == 'syspatch':
    if len(args) != 0:
        print('syspatch requires 0 args')
        sys.exit(1)
    pp.pprint(client.syspatch())

elif cmd == 'add_cron_job':
    if len(args) != 3:
        print('add_cron_job requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_cron_job(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'del_cron_job':
    if len(args) != 1:
        print('del_cron_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_cron_job(args[0],))

elif cmd == 'set_rsyslog_server':
    if len(args) != 1:
        print('set_rsyslog_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_rsyslog_server(eval(args[0]),))

elif cmd == 'remove_rsyslog_server':
    if len(args) != 1:
        print('remove_rsyslog_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_rsyslog_server(eval(args[0]),))

elif cmd == 'get_rsyslog_server':
    if len(args) != 0:
        print('get_rsyslog_server requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_rsyslog_server())

elif cmd == 'is_asu_node':
    if len(args) != 0:
        print('is_asu_node requires 0 args')
        sys.exit(1)
    pp.pprint(client.is_asu_node())

elif cmd == 'get_language':
    if len(args) != 0:
        print('get_language requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_language())

elif cmd == 'set_language':
    if len(args) != 1:
        print('set_language requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_language(args[0],))

elif cmd == 'set_external_db_conf':
    if len(args) != 1:
        print('set_external_db_conf requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_external_db_conf(eval(args[0]),))

elif cmd == 'get_external_db_conf':
    if len(args) != 0:
        print('get_external_db_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_external_db_conf())

elif cmd == 'is_conf_file_consistency':
    if len(args) != 2:
        print('is_conf_file_consistency requires 2 args')
        sys.exit(1)
    pp.pprint(client.is_conf_file_consistency(args[0], args[1],))

elif cmd == 'update_distributed_conf_file':
    if len(args) != 3:
        print('update_distributed_conf_file requires 3 args')
        sys.exit(1)
    pp.pprint(client.update_distributed_conf_file(args[0], args[1], args[2],))

elif cmd == 'get_registered_distributed_conf_files':
    if len(args) != 0:
        print('get_registered_distributed_conf_files requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_registered_distributed_conf_files())

elif cmd == 'update_zabbix_agentd_config':
    if len(args) != 2:
        print('update_zabbix_agentd_config requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_zabbix_agentd_config(args[0], args[1],))

elif cmd == 'query_zabbix_agentd_config':
    if len(args) != 0:
        print('query_zabbix_agentd_config requires 0 args')
        sys.exit(1)
    pp.pprint(client.query_zabbix_agentd_config())

elif cmd == 'update_zabbix_server_config':
    if len(args) != 6:
        print('update_zabbix_server_config requires 6 args')
        sys.exit(1)
    pp.pprint(client.update_zabbix_server_config(args[0], eval(args[1]), args[2], args[3], args[4], args[5],))

elif cmd == 'query_zabbix_server_config':
    if len(args) != 0:
        print('query_zabbix_server_config requires 0 args')
        sys.exit(1)
    pp.pprint(client.query_zabbix_server_config())

elif cmd == 'update_zabbix_gui_config':
    if len(args) != 7:
        print('update_zabbix_gui_config requires 7 args')
        sys.exit(1)
    pp.pprint(client.update_zabbix_gui_config(args[0], eval(args[1]), args[2], args[3], args[4], args[5], eval(args[6]),))

elif cmd == 'query_zabbix_gui_config':
    if len(args) != 0:
        print('query_zabbix_gui_config requires 0 args')
        sys.exit(1)
    pp.pprint(client.query_zabbix_gui_config())

elif cmd == 'import_zabbix_config':
    if len(args) != 1:
        print('import_zabbix_config requires 1 args')
        sys.exit(1)
    pp.pprint(client.import_zabbix_config(args[0],))

elif cmd == 'import_zabbix_action':
    if len(args) != 2:
        print('import_zabbix_action requires 2 args')
        sys.exit(1)
    pp.pprint(client.import_zabbix_action(args[0], eval(args[1]),))

elif cmd == 'patch_apache':
    if len(args) != 1:
        print('patch_apache requires 1 args')
        sys.exit(1)
    pp.pprint(client.patch_apache(eval(args[0]),))

elif cmd == 'get_ip_addrs':
    if len(args) != 0:
        print('get_ip_addrs requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_ip_addrs())

elif cmd == 'get_interface_name_for_vip':
    if len(args) != 0:
        print('get_interface_name_for_vip requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_interface_name_for_vip())

elif cmd == 'get_nics':
    if len(args) != 0:
        print('get_nics requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_nics())

elif cmd == 'get_ifaddr':
    if len(args) != 1:
        print('get_ifaddr requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_ifaddr(args[0],))

elif cmd == 'get_ifaddr_by_ipaddr':
    if len(args) != 1:
        print('get_ifaddr_by_ipaddr requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_ifaddr_by_ipaddr(args[0],))

elif cmd == 'set_ifaddr':
    if len(args) != 1:
        print('set_ifaddr requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_ifaddr(eval(args[0]),))

elif cmd == 'del_ifaddr':
    if len(args) != 1:
        print('del_ifaddr requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_ifaddr(args[0],))

elif cmd == 'bind_nics':
    if len(args) != 1:
        print('bind_nics requires 1 args')
        sys.exit(1)
    pp.pprint(client.bind_nics(eval(args[0]),))

elif cmd == 'unbind_nic':
    if len(args) != 1:
        print('unbind_nic requires 1 args')
        sys.exit(1)
    pp.pprint(client.unbind_nic(args[0],))

elif cmd == 'exists_arp':
    if len(args) != 1:
        print('exists_arp requires 1 args')
        sys.exit(1)
    pp.pprint(client.exists_arp(args[0],))

elif cmd == 'del_arp':
    if len(args) != 1:
        print('del_arp requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_arp(args[0],))

elif cmd == 'add_roster_conf':
    if len(args) != 4:
        print('add_roster_conf requires 4 args')
        sys.exit(1)
    pp.pprint(client.add_roster_conf(args[0], eval(args[1]), args[2], args[3],))

elif cmd == 'del_ssh_from_roster':
    if len(args) != 1:
        print('del_ssh_from_roster requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_ssh_from_roster(args[0],))

elif cmd == 'clear_roster_conf':
    if len(args) != 0:
        print('clear_roster_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.clear_roster_conf())

elif cmd == 'create_ring':
    if len(args) != 2:
        print('create_ring requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_ring(eval(args[0]), eval(args[1]),))

elif cmd == 'add_device':
    if len(args) != 5:
        print('add_device requires 5 args')
        sys.exit(1)
    pp.pprint(client.add_device(eval(args[0]), eval(args[1]), args[2], args[3], eval(args[4]),))

elif cmd == 'remove_device':
    if len(args) != 1:
        print('remove_device requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_device(eval(args[0]),))

elif cmd == 'change_replicas':
    if len(args) != 1:
        print('change_replicas requires 1 args')
        sys.exit(1)
    pp.pprint(client.change_replicas(eval(args[0]),))

elif cmd == 'change_weight':
    if len(args) != 2:
        print('change_weight requires 2 args')
        sys.exit(1)
    pp.pprint(client.change_weight(eval(args[0]), eval(args[1]),))

elif cmd == 'rebalance':
    if len(args) != 0:
        print('rebalance requires 0 args')
        sys.exit(1)
    pp.pprint(client.rebalance())

elif cmd == 'change_dev_name':
    if len(args) != 2:
        print('change_dev_name requires 2 args')
        sys.exit(1)
    pp.pprint(client.change_dev_name(eval(args[0]), args[1],))

elif cmd == 'change_ip':
    if len(args) != 2:
        print('change_ip requires 2 args')
        sys.exit(1)
    pp.pprint(client.change_ip(eval(args[0]), args[1],))

elif cmd == 'write_ring':
    if len(args) != 0:
        print('write_ring requires 0 args')
        sys.exit(1)
    pp.pprint(client.write_ring())

elif cmd == 'is_persistent_ring_exists':
    if len(args) != 0:
        print('is_persistent_ring_exists requires 0 args')
        sys.exit(1)
    pp.pprint(client.is_persistent_ring_exists())

elif cmd == 'backup_ring':
    if len(args) != 0:
        print('backup_ring requires 0 args')
        sys.exit(1)
    pp.pprint(client.backup_ring())

elif cmd == 'restore_ring':
    if len(args) != 0:
        print('restore_ring requires 0 args')
        sys.exit(1)
    pp.pprint(client.restore_ring())

elif cmd == 'get_persistent_ring_md5':
    if len(args) != 0:
        print('get_persistent_ring_md5 requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_persistent_ring_md5())

elif cmd == 'get_persistent_ring_info':
    if len(args) != 0:
        print('get_persistent_ring_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_persistent_ring_info())

elif cmd == 'get_persistent_ring_devices':
    if len(args) != 0:
        print('get_persistent_ring_devices requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_persistent_ring_devices())

elif cmd == 'refresh_working_ring':
    if len(args) != 0:
        print('refresh_working_ring requires 0 args')
        sys.exit(1)
    pp.pprint(client.refresh_working_ring())

elif cmd == 'get_working_ring_md5':
    if len(args) != 0:
        print('get_working_ring_md5 requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_working_ring_md5())

elif cmd == 'clear_working_ring':
    if len(args) != 0:
        print('clear_working_ring requires 0 args')
        sys.exit(1)
    pp.pprint(client.clear_working_ring())

elif cmd == 'start_swift_service':
    if len(args) != 0:
        print('start_swift_service requires 0 args')
        sys.exit(1)
    pp.pprint(client.start_swift_service())

elif cmd == 'stop_swift_service':
    if len(args) != 0:
        print('stop_swift_service requires 0 args')
        sys.exit(1)
    pp.pprint(client.stop_swift_service())

elif cmd == 'restart_swift_service':
    if len(args) != 0:
        print('restart_swift_service requires 0 args')
        sys.exit(1)
    pp.pprint(client.restart_swift_service())

elif cmd == 'is_service_started':
    if len(args) != 0:
        print('is_service_started requires 0 args')
        sys.exit(1)
    pp.pprint(client.is_service_started())

elif cmd == 'get_replicas_health':
    if len(args) != 0:
        print('get_replicas_health requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_replicas_health())

elif cmd == 'get_raid_pdlist':
    if len(args) != 0:
        print('get_raid_pdlist requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_raid_pdlist())

elif cmd == 'get_raid_pd_details':
    if len(args) != 1:
        print('get_raid_pd_details requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_raid_pd_details(args[0],))

elif cmd == 'get_data_raid_pdlist':
    if len(args) != 0:
        print('get_data_raid_pdlist requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_data_raid_pdlist())

elif cmd == 'get_sys_raid_pdlist':
    if len(args) != 0:
        print('get_sys_raid_pdlist requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_sys_raid_pdlist())

elif cmd == 'get_raid_ldlist':
    if len(args) != 0:
        print('get_raid_ldlist requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_raid_ldlist())

elif cmd == 'get_raid_ld_details':
    if len(args) != 1:
        print('get_raid_ld_details requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_raid_ld_details(args[0],))

elif cmd == 'get_data_raid_ldlist':
    if len(args) != 0:
        print('get_data_raid_ldlist requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_data_raid_ldlist())

elif cmd == 'get_sys_raid_ldlist':
    if len(args) != 0:
        print('get_sys_raid_ldlist requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_sys_raid_ldlist())

elif cmd == 'clear_data_raid_pd':
    if len(args) != 1:
        print('clear_data_raid_pd requires 1 args')
        sys.exit(1)
    pp.pprint(client.clear_data_raid_pd(args[0],))

elif cmd == 'is_data_raid_pd_good':
    if len(args) != 1:
        print('is_data_raid_pd_good requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_data_raid_pd_good(args[0],))

elif cmd == 'create_raid':
    if len(args) != 2:
        print('create_raid requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_raid(eval(args[0]), args[1],))

elif cmd == 'remove_raid':
    if len(args) != 1:
        print('remove_raid requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_raid(args[0],))

elif cmd == 'add_raid_hotspare':
    if len(args) != 2:
        print('add_raid_hotspare requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_raid_hotspare(args[0], args[1],))

elif cmd == 'remove_raid_hotspare':
    if len(args) != 1:
        print('remove_raid_hotspare requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_raid_hotspare(args[0],))

elif cmd == 'offline_raid_pd':
    if len(args) != 1:
        print('offline_raid_pd requires 1 args')
        sys.exit(1)
    pp.pprint(client.offline_raid_pd(args[0],))

elif cmd == 'get_raid_rebuild_progress':
    if len(args) != 1:
        print('get_raid_rebuild_progress requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_raid_rebuild_progress(args[0],))

elif cmd == 'get_raid_product_name':
    if len(args) != 0:
        print('get_raid_product_name requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_raid_product_name())

elif cmd == 'exist_iscsi_device':
    if len(args) != 0:
        print('exist_iscsi_device requires 0 args')
        sys.exit(1)
    pp.pprint(client.exist_iscsi_device())

elif cmd == 'get_disk_info':
    if len(args) != 1:
        print('get_disk_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_disk_info(args[0],))

elif cmd == 'get_sys_volume':
    if len(args) != 0:
        print('get_sys_volume requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_sys_volume())

elif cmd == 'get_sysvol_volume':
    if len(args) != 0:
        print('get_sysvol_volume requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_sysvol_volume())

elif cmd == 'get_data_disks':
    if len(args) != 0:
        print('get_data_disks requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_data_disks())

elif cmd == 'get_data_disk':
    if len(args) != 1:
        print('get_data_disk requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_data_disk(args[0],))

elif cmd == 'clear_data_disk':
    if len(args) != 1:
        print('clear_data_disk requires 1 args')
        sys.exit(1)
    pp.pprint(client.clear_data_disk(args[0],))

elif cmd == 'is_data_disk_dirty':
    if len(args) != 1:
        print('is_data_disk_dirty requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_data_disk_dirty(args[0],))

elif cmd == 'get_data_volume':
    if len(args) != 1:
        print('get_data_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_data_volume(args[0],))

elif cmd == 'create_data_volume':
    if len(args) != 2:
        print('create_data_volume requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_data_volume(args[0], eval(args[1]),))

elif cmd == 'remove_data_volume':
    if len(args) != 1:
        print('remove_data_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_data_volume(args[0],))

elif cmd == 'mount_data_volume':
    if len(args) != 1:
        print('mount_data_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.mount_data_volume(args[0],))

elif cmd == 'get_data_mount_points':
    if len(args) != 0:
        print('get_data_mount_points requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_data_mount_points())

elif cmd == 'create_data_mount_point':
    if len(args) != 2:
        print('create_data_mount_point requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_data_mount_point(args[0], args[1],))

elif cmd == 'remove_data_mount_point':
    if len(args) != 1:
        print('remove_data_mount_point requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_data_mount_point(args[0],))

elif cmd == 'exists_io_error':
    if len(args) != 1:
        print('exists_io_error requires 1 args')
        sys.exit(1)
    pp.pprint(client.exists_io_error(args[0],))

elif cmd == 'create_cache_volume':
    if len(args) != 1:
        print('create_cache_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_cache_volume(args[0],))

elif cmd == 'remove_cache_volume':
    if len(args) != 0:
        print('remove_cache_volume requires 0 args')
        sys.exit(1)
    pp.pprint(client.remove_cache_volume())

elif cmd == 'get_cache_volume':
    if len(args) != 0:
        print('get_cache_volume requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_cache_volume())

elif cmd == 'init_cache_volume':
    if len(args) != 0:
        print('init_cache_volume requires 0 args')
        sys.exit(1)
    pp.pprint(client.init_cache_volume())

elif cmd == 'is_cache_volume_inited':
    if len(args) != 0:
        print('is_cache_volume_inited requires 0 args')
        sys.exit(1)
    pp.pprint(client.is_cache_volume_inited())

elif cmd == 'mount_cache_volume':
    if len(args) != 0:
        print('mount_cache_volume requires 0 args')
        sys.exit(1)
    pp.pprint(client.mount_cache_volume())

elif cmd == 'allocate_cache_volume':
    if len(args) != 0:
        print('allocate_cache_volume requires 0 args')
        sys.exit(1)
    pp.pprint(client.allocate_cache_volume())

elif cmd == 'get_ssd_disks':
    if len(args) != 0:
        print('get_ssd_disks requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_ssd_disks())

elif cmd == 'get_ssd_status':
    if len(args) != 1:
        print('get_ssd_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_ssd_status(args[0],))

elif cmd == 'get_raid_list':
    if len(args) != 0:
        print('get_raid_list requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_raid_list())

elif cmd == 'get_raid_status':
    if len(args) != 1:
        print('get_raid_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_raid_status(args[0],))

elif cmd == 'get_physical_disk_list':
    if len(args) != 0:
        print('get_physical_disk_list requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_physical_disk_list())

elif cmd == 'get_physical_disk_status':
    if len(args) != 1:
        print('get_physical_disk_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_physical_disk_status(args[0],))

elif cmd == 'add_time_server':
    if len(args) != 1:
        print('add_time_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_time_server(args[0],))

elif cmd == 'del_time_server':
    if len(args) != 1:
        print('del_time_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_time_server(args[0],))

elif cmd == 'get_nsqlookupd_port':
    if len(args) != 1:
        print('get_nsqlookupd_port requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_nsqlookupd_port(args[0],))

elif cmd == 'set_nsqd_lookup_addrs':
    if len(args) != 1:
        print('set_nsqd_lookup_addrs requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_nsqd_lookup_addrs(eval(args[0]),))

elif cmd == 'get_nsqd_lookup_addrs':
    if len(args) != 0:
        print('get_nsqd_lookup_addrs requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_nsqd_lookup_addrs())

elif cmd == 'init_nsqd_cache_dir':
    if len(args) != 0:
        print('init_nsqd_cache_dir requires 0 args')
        sys.exit(1)
    pp.pprint(client.init_nsqd_cache_dir())

elif cmd == 'exists_nsqd_cache_file':
    if len(args) != 0:
        print('exists_nsqd_cache_file requires 0 args')
        sys.exit(1)
    pp.pprint(client.exists_nsqd_cache_file())

elif cmd == 'set_nsqd_node_id':
    if len(args) != 1:
        print('set_nsqd_node_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_nsqd_node_id(eval(args[0]),))

elif cmd == 'set_nsqd_braodcast_address':
    if len(args) != 1:
        print('set_nsqd_braodcast_address requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_nsqd_braodcast_address(args[0],))

elif cmd == 'installed_service':
    if len(args) != 1:
        print('installed_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.installed_service(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
