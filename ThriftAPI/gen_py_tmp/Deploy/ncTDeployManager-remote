#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from Deploy import ncTDeployManager
from Deploy.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void deploy_upload_package(string package_path)')
    print('  void deploy_remove_package(string service_name)')
    print('  ncTServiceInfos deploy_get_service_infos(string service_name)')
    print('  ncTPackageInfo deploy_get_package_info(string service_name)')
    print('   deploy_get_node_ip_by_service(string service_name)')
    print('   deploy_install_service(string service_name,  hosts)')
    print('  void deploy_uninstall_service(string service_name,  hosts)')
    print('  void deploy_erds_install_from_as(string host)')
    print('  void deploy_erds_uninstall_service(string host)')
    print('   deploy_get_services_by_node_ip(string ip)')
    print('  void deploy_start_MongoDB()')
    print('  void deploy_install_MongoDB( hosts)')
    print('  void deploy_init_MongoDB_cluster( hosts)')
    print('  ncTMongoDBInfo deploy_get_MongoDB_infos()')
    print('  void deploy_uninstall_MongoDB( hosts)')
    print('  bool deploy_is_MongoDB_available()')
    print('  void deploy_set_ha_master(string node_uuid, VipInfo vip_info)')
    print('  void deploy_set_ha_slave(string node_uuid, HaSys ha_sys)')
    print('  void deploy_cancel_ha(string node_uuid)')
    print('  void deploy_enable_lvs(string node_uuid, ncTLVSSys lvs_sys)')
    print('  void deploy_disable_lvs(string node_uuid, ncTLVSSys lvs_sys)')
    print('   deploy_get_vip_info()')
    print('  void deploy_set_vip_info(VipInfo vip_info)')
    print('   deploy_get_ha_node_info()')
    print('  void deploy_enable_slb()')
    print('  void deploy_disable_slb()')
    print('  bool deploy_get_slb_status()')
    print('  void deploy_remove_node(ncTNodeInfo node_info)')
    print('  void deploy_node_enter_master()')
    print('  void deploy_node_enter_slave()')
    print('  void deploy_consistency_repair()')
    print('  bool deploy_consistency_check()')
    print('  void deploy_cs_init( data)')
    print('  void deploy_cs_node_add(string ip)')
    print('  void deploy_machine_trust()')
    print('  void deploy_cs_node_delete(string ip)')
    print('  void deploy_set_node_role(string node_uuid, string node_role)')
    print('  void deploy_cancel_node_role(string node_uuid, string node_role)')
    print('   deploy_get_roles_by_node_uuid(string node_uuid)')
    print('   deploy_get_nodes_by_role(string node_role)')
    print('  void deploy_update_secret(string cert_type)')
    print('  void deploy_install_containerized_service(ServiceConf service_conf)')
    print('  void deploy_uninstall_containerized_service(string service_name)')
    print('  void deploy_upload_containerized_service_package(string service_name, string package_path)')
    print('  void deploy_remove_containerized_service_package(string service_name)')
    print('  void deploy_upgrade_containerized_service(string service_name)')
    print('  ContainerizedServiceInfo deploy_get_containerized_service_info(string service_name)')
    print('  bool deploy_had_service(string service_name)')
    print('  void deploy_containerized_service_add_node(string service_name, string node_ip)')
    print('  void deploy_containerized_service_remove_node(string service_name, string node_ip)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncTDeployManager.Client(protocol)
transport.open()

if cmd == 'deploy_upload_package':
    if len(args) != 1:
        print('deploy_upload_package requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_upload_package(args[0],))

elif cmd == 'deploy_remove_package':
    if len(args) != 1:
        print('deploy_remove_package requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_remove_package(args[0],))

elif cmd == 'deploy_get_service_infos':
    if len(args) != 1:
        print('deploy_get_service_infos requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_service_infos(args[0],))

elif cmd == 'deploy_get_package_info':
    if len(args) != 1:
        print('deploy_get_package_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_package_info(args[0],))

elif cmd == 'deploy_get_node_ip_by_service':
    if len(args) != 1:
        print('deploy_get_node_ip_by_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_node_ip_by_service(args[0],))

elif cmd == 'deploy_install_service':
    if len(args) != 2:
        print('deploy_install_service requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_install_service(args[0], eval(args[1]),))

elif cmd == 'deploy_uninstall_service':
    if len(args) != 2:
        print('deploy_uninstall_service requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_uninstall_service(args[0], eval(args[1]),))

elif cmd == 'deploy_erds_install_from_as':
    if len(args) != 1:
        print('deploy_erds_install_from_as requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_erds_install_from_as(args[0],))

elif cmd == 'deploy_erds_uninstall_service':
    if len(args) != 1:
        print('deploy_erds_uninstall_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_erds_uninstall_service(args[0],))

elif cmd == 'deploy_get_services_by_node_ip':
    if len(args) != 1:
        print('deploy_get_services_by_node_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_services_by_node_ip(args[0],))

elif cmd == 'deploy_start_MongoDB':
    if len(args) != 0:
        print('deploy_start_MongoDB requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_start_MongoDB())

elif cmd == 'deploy_install_MongoDB':
    if len(args) != 1:
        print('deploy_install_MongoDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_install_MongoDB(eval(args[0]),))

elif cmd == 'deploy_init_MongoDB_cluster':
    if len(args) != 1:
        print('deploy_init_MongoDB_cluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_init_MongoDB_cluster(eval(args[0]),))

elif cmd == 'deploy_get_MongoDB_infos':
    if len(args) != 0:
        print('deploy_get_MongoDB_infos requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_MongoDB_infos())

elif cmd == 'deploy_uninstall_MongoDB':
    if len(args) != 1:
        print('deploy_uninstall_MongoDB requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_uninstall_MongoDB(eval(args[0]),))

elif cmd == 'deploy_is_MongoDB_available':
    if len(args) != 0:
        print('deploy_is_MongoDB_available requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_is_MongoDB_available())

elif cmd == 'deploy_set_ha_master':
    if len(args) != 2:
        print('deploy_set_ha_master requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_set_ha_master(args[0], eval(args[1]),))

elif cmd == 'deploy_set_ha_slave':
    if len(args) != 2:
        print('deploy_set_ha_slave requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_set_ha_slave(args[0], eval(args[1]),))

elif cmd == 'deploy_cancel_ha':
    if len(args) != 1:
        print('deploy_cancel_ha requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_cancel_ha(args[0],))

elif cmd == 'deploy_enable_lvs':
    if len(args) != 2:
        print('deploy_enable_lvs requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_enable_lvs(args[0], eval(args[1]),))

elif cmd == 'deploy_disable_lvs':
    if len(args) != 2:
        print('deploy_disable_lvs requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_disable_lvs(args[0], eval(args[1]),))

elif cmd == 'deploy_get_vip_info':
    if len(args) != 0:
        print('deploy_get_vip_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_vip_info())

elif cmd == 'deploy_set_vip_info':
    if len(args) != 1:
        print('deploy_set_vip_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_set_vip_info(eval(args[0]),))

elif cmd == 'deploy_get_ha_node_info':
    if len(args) != 0:
        print('deploy_get_ha_node_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_ha_node_info())

elif cmd == 'deploy_enable_slb':
    if len(args) != 0:
        print('deploy_enable_slb requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_enable_slb())

elif cmd == 'deploy_disable_slb':
    if len(args) != 0:
        print('deploy_disable_slb requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_disable_slb())

elif cmd == 'deploy_get_slb_status':
    if len(args) != 0:
        print('deploy_get_slb_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_slb_status())

elif cmd == 'deploy_remove_node':
    if len(args) != 1:
        print('deploy_remove_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_remove_node(eval(args[0]),))

elif cmd == 'deploy_node_enter_master':
    if len(args) != 0:
        print('deploy_node_enter_master requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_node_enter_master())

elif cmd == 'deploy_node_enter_slave':
    if len(args) != 0:
        print('deploy_node_enter_slave requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_node_enter_slave())

elif cmd == 'deploy_consistency_repair':
    if len(args) != 0:
        print('deploy_consistency_repair requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_consistency_repair())

elif cmd == 'deploy_consistency_check':
    if len(args) != 0:
        print('deploy_consistency_check requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_consistency_check())

elif cmd == 'deploy_cs_init':
    if len(args) != 1:
        print('deploy_cs_init requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_cs_init(eval(args[0]),))

elif cmd == 'deploy_cs_node_add':
    if len(args) != 1:
        print('deploy_cs_node_add requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_cs_node_add(args[0],))

elif cmd == 'deploy_machine_trust':
    if len(args) != 0:
        print('deploy_machine_trust requires 0 args')
        sys.exit(1)
    pp.pprint(client.deploy_machine_trust())

elif cmd == 'deploy_cs_node_delete':
    if len(args) != 1:
        print('deploy_cs_node_delete requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_cs_node_delete(args[0],))

elif cmd == 'deploy_set_node_role':
    if len(args) != 2:
        print('deploy_set_node_role requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_set_node_role(args[0], args[1],))

elif cmd == 'deploy_cancel_node_role':
    if len(args) != 2:
        print('deploy_cancel_node_role requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_cancel_node_role(args[0], args[1],))

elif cmd == 'deploy_get_roles_by_node_uuid':
    if len(args) != 1:
        print('deploy_get_roles_by_node_uuid requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_roles_by_node_uuid(args[0],))

elif cmd == 'deploy_get_nodes_by_role':
    if len(args) != 1:
        print('deploy_get_nodes_by_role requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_nodes_by_role(args[0],))

elif cmd == 'deploy_update_secret':
    if len(args) != 1:
        print('deploy_update_secret requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_update_secret(args[0],))

elif cmd == 'deploy_install_containerized_service':
    if len(args) != 1:
        print('deploy_install_containerized_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_install_containerized_service(eval(args[0]),))

elif cmd == 'deploy_uninstall_containerized_service':
    if len(args) != 1:
        print('deploy_uninstall_containerized_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_uninstall_containerized_service(args[0],))

elif cmd == 'deploy_upload_containerized_service_package':
    if len(args) != 2:
        print('deploy_upload_containerized_service_package requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_upload_containerized_service_package(args[0], args[1],))

elif cmd == 'deploy_remove_containerized_service_package':
    if len(args) != 1:
        print('deploy_remove_containerized_service_package requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_remove_containerized_service_package(args[0],))

elif cmd == 'deploy_upgrade_containerized_service':
    if len(args) != 1:
        print('deploy_upgrade_containerized_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_upgrade_containerized_service(args[0],))

elif cmd == 'deploy_get_containerized_service_info':
    if len(args) != 1:
        print('deploy_get_containerized_service_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_get_containerized_service_info(args[0],))

elif cmd == 'deploy_had_service':
    if len(args) != 1:
        print('deploy_had_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.deploy_had_service(args[0],))

elif cmd == 'deploy_containerized_service_add_node':
    if len(args) != 2:
        print('deploy_containerized_service_add_node requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_containerized_service_add_node(args[0], args[1],))

elif cmd == 'deploy_containerized_service_remove_node':
    if len(args) != 2:
        print('deploy_containerized_service_remove_node requires 2 args')
        sys.exit(1)
    pp.pprint(client.deploy_containerized_service_remove_node(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
