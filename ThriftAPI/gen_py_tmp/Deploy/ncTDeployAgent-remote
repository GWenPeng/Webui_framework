#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from Deploy import ncTDeployAgent
from Deploy.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void install_service(string service_name)')
    print('  void install_erds_from_as()')
    print('  void uninstall_service(string service_name)')
    print('  void install_MongoDB()')
    print('  void init_mongodb_repl( hosts)')
    print('  void uninstall_MongoDB()')
    print('  string get_Primary_node_ip()')
    print('  void erds_clear_node()')
    print('  void install_slb()')
    print('  void uninstall_slb()')
    print('  void cs_reset(string ip)')
    print('  void cs_init( data)')
    print('  void cs_update_config( data)')
    print('  void cs_node_delete(string ip)')
    print('  void cs_node_add(string ip)')
    print('  void install_cr()')
    print('  void machine_trust()')
    print('  string get_machine_rsa()')
    print('  void install_micro_service(string micro_service_name, ServiceConf service_conf, i32 timeout)')
    print('  void uninstall_micro_service(string micro_service_name)')
    print('  void upgrade_micro_service(string micro_service_name, ServiceConf service_conf, string operation)')
    print('   get_micro_service_info(string micro_service_name)')
    print('  void rollback_micro_service(string micro_service_name, string revision)')
    print('  void update_vm_max_map_count()')
    print('  string get_machine_code()')
    print('  void set_node_role(string node_uuid, string node_role)')
    print('  void cancel_node_role(string node_uuid, string node_role)')
    print('  void update_secret(string secret_name)')
    print('  void create_secret(string secret_name, string ns, string secret_type, string cert_type)')
    print('  void update_access_conf()')
    print('  void set_release_replicas(string release, i32 replicas)')
    print('  void create_pv( nodes, string micro_service_name)')
    print('  void prepare_pv_path(string micro_service_name)')
    print('  void delete_pv(string pv_name)')
    print('  void delete_pvc(string micro_service_name)')
    print('   get_pod_name_by_node(string name_space, string node_ip)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncTDeployAgent.Client(protocol)
transport.open()

if cmd == 'install_service':
    if len(args) != 1:
        print('install_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.install_service(args[0],))

elif cmd == 'install_erds_from_as':
    if len(args) != 0:
        print('install_erds_from_as requires 0 args')
        sys.exit(1)
    pp.pprint(client.install_erds_from_as())

elif cmd == 'uninstall_service':
    if len(args) != 1:
        print('uninstall_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.uninstall_service(args[0],))

elif cmd == 'install_MongoDB':
    if len(args) != 0:
        print('install_MongoDB requires 0 args')
        sys.exit(1)
    pp.pprint(client.install_MongoDB())

elif cmd == 'init_mongodb_repl':
    if len(args) != 1:
        print('init_mongodb_repl requires 1 args')
        sys.exit(1)
    pp.pprint(client.init_mongodb_repl(eval(args[0]),))

elif cmd == 'uninstall_MongoDB':
    if len(args) != 0:
        print('uninstall_MongoDB requires 0 args')
        sys.exit(1)
    pp.pprint(client.uninstall_MongoDB())

elif cmd == 'get_Primary_node_ip':
    if len(args) != 0:
        print('get_Primary_node_ip requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_Primary_node_ip())

elif cmd == 'erds_clear_node':
    if len(args) != 0:
        print('erds_clear_node requires 0 args')
        sys.exit(1)
    pp.pprint(client.erds_clear_node())

elif cmd == 'install_slb':
    if len(args) != 0:
        print('install_slb requires 0 args')
        sys.exit(1)
    pp.pprint(client.install_slb())

elif cmd == 'uninstall_slb':
    if len(args) != 0:
        print('uninstall_slb requires 0 args')
        sys.exit(1)
    pp.pprint(client.uninstall_slb())

elif cmd == 'cs_reset':
    if len(args) != 1:
        print('cs_reset requires 1 args')
        sys.exit(1)
    pp.pprint(client.cs_reset(args[0],))

elif cmd == 'cs_init':
    if len(args) != 1:
        print('cs_init requires 1 args')
        sys.exit(1)
    pp.pprint(client.cs_init(eval(args[0]),))

elif cmd == 'cs_update_config':
    if len(args) != 1:
        print('cs_update_config requires 1 args')
        sys.exit(1)
    pp.pprint(client.cs_update_config(eval(args[0]),))

elif cmd == 'cs_node_delete':
    if len(args) != 1:
        print('cs_node_delete requires 1 args')
        sys.exit(1)
    pp.pprint(client.cs_node_delete(args[0],))

elif cmd == 'cs_node_add':
    if len(args) != 1:
        print('cs_node_add requires 1 args')
        sys.exit(1)
    pp.pprint(client.cs_node_add(args[0],))

elif cmd == 'install_cr':
    if len(args) != 0:
        print('install_cr requires 0 args')
        sys.exit(1)
    pp.pprint(client.install_cr())

elif cmd == 'machine_trust':
    if len(args) != 0:
        print('machine_trust requires 0 args')
        sys.exit(1)
    pp.pprint(client.machine_trust())

elif cmd == 'get_machine_rsa':
    if len(args) != 0:
        print('get_machine_rsa requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_machine_rsa())

elif cmd == 'install_micro_service':
    if len(args) != 3:
        print('install_micro_service requires 3 args')
        sys.exit(1)
    pp.pprint(client.install_micro_service(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'uninstall_micro_service':
    if len(args) != 1:
        print('uninstall_micro_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.uninstall_micro_service(args[0],))

elif cmd == 'upgrade_micro_service':
    if len(args) != 3:
        print('upgrade_micro_service requires 3 args')
        sys.exit(1)
    pp.pprint(client.upgrade_micro_service(args[0], eval(args[1]), args[2],))

elif cmd == 'get_micro_service_info':
    if len(args) != 1:
        print('get_micro_service_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_micro_service_info(args[0],))

elif cmd == 'rollback_micro_service':
    if len(args) != 2:
        print('rollback_micro_service requires 2 args')
        sys.exit(1)
    pp.pprint(client.rollback_micro_service(args[0], args[1],))

elif cmd == 'update_vm_max_map_count':
    if len(args) != 0:
        print('update_vm_max_map_count requires 0 args')
        sys.exit(1)
    pp.pprint(client.update_vm_max_map_count())

elif cmd == 'get_machine_code':
    if len(args) != 0:
        print('get_machine_code requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_machine_code())

elif cmd == 'set_node_role':
    if len(args) != 2:
        print('set_node_role requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_node_role(args[0], args[1],))

elif cmd == 'cancel_node_role':
    if len(args) != 2:
        print('cancel_node_role requires 2 args')
        sys.exit(1)
    pp.pprint(client.cancel_node_role(args[0], args[1],))

elif cmd == 'update_secret':
    if len(args) != 1:
        print('update_secret requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_secret(args[0],))

elif cmd == 'create_secret':
    if len(args) != 4:
        print('create_secret requires 4 args')
        sys.exit(1)
    pp.pprint(client.create_secret(args[0], args[1], args[2], args[3],))

elif cmd == 'update_access_conf':
    if len(args) != 0:
        print('update_access_conf requires 0 args')
        sys.exit(1)
    pp.pprint(client.update_access_conf())

elif cmd == 'set_release_replicas':
    if len(args) != 2:
        print('set_release_replicas requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_release_replicas(args[0], eval(args[1]),))

elif cmd == 'create_pv':
    if len(args) != 2:
        print('create_pv requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_pv(eval(args[0]), args[1],))

elif cmd == 'prepare_pv_path':
    if len(args) != 1:
        print('prepare_pv_path requires 1 args')
        sys.exit(1)
    pp.pprint(client.prepare_pv_path(args[0],))

elif cmd == 'delete_pv':
    if len(args) != 1:
        print('delete_pv requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_pv(args[0],))

elif cmd == 'delete_pvc':
    if len(args) != 1:
        print('delete_pvc requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_pvc(args[0],))

elif cmd == 'get_pod_name_by_node':
    if len(args) != 2:
        print('get_pod_name_by_node requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_pod_name_by_node(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
