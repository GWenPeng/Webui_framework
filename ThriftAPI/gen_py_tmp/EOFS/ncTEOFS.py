#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    """
    EOFS 管理服务接口

    """
    def Mgr_OnESwiftPrepared(self):
        """
        响应ESwift就绪事件，若EOFS尚未初始化则初始化EOFS

        @throw 转抛内部调用异常。

        """
        pass

    def Mgr_OnMemcachedServersJoin(self, serversList):
        """
        响应添加新的memcached服务器地址

        @param serversList： string为IP地址，错误格式不解析

        Parameters:
         - serversList

        """
        pass

    def Mgr_OnL1CacheSetServers(self, serversList):
        """
        响应设置memcached服务器地址列表
        调用此接口后，原来设置的列表会被清空

        @param serversList： string为IP地址，错误格式不解析

        Parameters:
         - serversList

        """
        pass

    def Mgr_GetL1CacheServers(self):
        """
        返回设置的memcached服务器地址列表

        @return： string为IP地址

        """
        pass

    def Mgr_GetL1CacheStats(self):
        """
        返回一级缓存服务器统计信息
        该接口返回各个添加进去的server的各个统计信息，包括：

        bytes ------------------------------- 系统存储缓存对象所使用的存储空间，单位为字节
        bytes_read -------------------------- 从memcached服务器查询的总的字节数
        bytes_written ----------------------- 向memcached服务器写入的总的字节数
        cmd_get ----------------------------- 累积获取数据的命令数量
        cmd_set ----------------------------- 累积保存数据的命令数量
        connection_structures --------------- 从memcached服务启动到当前时间，被服务器分配的连接结构的数量
        curr_connections -------------------- 当前系统打开的连接数
        curr_items -------------------------- 当前缓存中存放的所有缓存对象的数量，不包括目前已经从缓存中删除的对象
        evictions --------------------------- 为了给新的数据项目释放空间，从缓存移除的缓存对象的数目
        get_hits ---------------------------- 获取数据成功的次数
        get_misses -------------------------- 获取数据失败的次数
        limit_maxbytes ---------------------- memcached服务缓存允许使用的最大字节数
        pid --------------------------------- memcached服务进程的进程ID
        pointer_size ------------------------ 服务器所在主机操作系统的指针大小，一般为32或64
        rusage_system ----------------------- 进程的累计系统时间
        rusage_user ------------------------- 进程的累计用户时间
        threads ----------------------------- 被请求的工作线程的总数量
        time -------------------------------- memcached服务器所在主机当前系统的时间，单位为秒
        total_connections ------------------- 从memcached服务启动到当前时间，系统打开过的连接的总数
        total_items ------------------------- 从memcached服务启动到当前时间，系统存储过的所有对象的数量，包括目前已经从缓存中删除的对象
        uptime ------------------------------ memcached服务从启动到当前所经过的时间，单位为秒
        version ----------------------------- memcached组件的版本

        @return： 返回一级缓存所有节点的状态信息：<serverIp:port, <key, value> >

        """
        pass

    def Mgr_GetL2CacheStats(self):
        """
        返回当前节点二级缓存统计信息
        该接口返回二级缓存的状态统计信息，包括：

        get_hits ---------------------- 获取数据成功的次数
        get_misses -------------------- 获取数据失败的次数
        set_hits ---------------------- 设置数据成功的次数
        set_misses -------------------- 设置数据失败的次数
        exist_hits -------------------- 检查数据成功的次数
        exist_misses ------------------ 检查数据失败的次数
        bytes_read -------------------- 已读取的字节数
        bytes_written ----------------- 已写入的字节数
        bytes ------------------------- 总共使用情况（字节数）
        capacity ---------------------- 设置的空间大小（字节数）
        path -------------------------- 设置的存储路径（不存在则为空）
        is_running -------------------- 当前是否正在运行（yes, no）

        @return： 返回当前节点二级缓存状态信息：<key, value>

        """
        pass

    def Mgr_SetL2CacheCapacity(self, capacity):
        """
        修改二级缓存空间

        @param   capacity 总容量大小，以MB为单位

        Parameters:
         - capacity

        """
        pass


class Client(Iface):
    """
    EOFS 管理服务接口

    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def Mgr_OnESwiftPrepared(self):
        """
        响应ESwift就绪事件，若EOFS尚未初始化则初始化EOFS

        @throw 转抛内部调用异常。

        """
        self.send_Mgr_OnESwiftPrepared()
        self.recv_Mgr_OnESwiftPrepared()

    def send_Mgr_OnESwiftPrepared(self):
        self._oprot.writeMessageBegin('Mgr_OnESwiftPrepared', TMessageType.CALL, self._seqid)
        args = Mgr_OnESwiftPrepared_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_Mgr_OnESwiftPrepared(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = Mgr_OnESwiftPrepared_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exp is not None:
            raise result.exp
        return

    def Mgr_OnMemcachedServersJoin(self, serversList):
        """
        响应添加新的memcached服务器地址

        @param serversList： string为IP地址，错误格式不解析

        Parameters:
         - serversList

        """
        self.send_Mgr_OnMemcachedServersJoin(serversList)
        self.recv_Mgr_OnMemcachedServersJoin()

    def send_Mgr_OnMemcachedServersJoin(self, serversList):
        self._oprot.writeMessageBegin('Mgr_OnMemcachedServersJoin', TMessageType.CALL, self._seqid)
        args = Mgr_OnMemcachedServersJoin_args()
        args.serversList = serversList
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_Mgr_OnMemcachedServersJoin(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = Mgr_OnMemcachedServersJoin_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def Mgr_OnL1CacheSetServers(self, serversList):
        """
        响应设置memcached服务器地址列表
        调用此接口后，原来设置的列表会被清空

        @param serversList： string为IP地址，错误格式不解析

        Parameters:
         - serversList

        """
        self.send_Mgr_OnL1CacheSetServers(serversList)
        self.recv_Mgr_OnL1CacheSetServers()

    def send_Mgr_OnL1CacheSetServers(self, serversList):
        self._oprot.writeMessageBegin('Mgr_OnL1CacheSetServers', TMessageType.CALL, self._seqid)
        args = Mgr_OnL1CacheSetServers_args()
        args.serversList = serversList
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_Mgr_OnL1CacheSetServers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = Mgr_OnL1CacheSetServers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def Mgr_GetL1CacheServers(self):
        """
        返回设置的memcached服务器地址列表

        @return： string为IP地址

        """
        self.send_Mgr_GetL1CacheServers()
        return self.recv_Mgr_GetL1CacheServers()

    def send_Mgr_GetL1CacheServers(self):
        self._oprot.writeMessageBegin('Mgr_GetL1CacheServers', TMessageType.CALL, self._seqid)
        args = Mgr_GetL1CacheServers_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_Mgr_GetL1CacheServers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = Mgr_GetL1CacheServers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "Mgr_GetL1CacheServers failed: unknown result")

    def Mgr_GetL1CacheStats(self):
        """
        返回一级缓存服务器统计信息
        该接口返回各个添加进去的server的各个统计信息，包括：

        bytes ------------------------------- 系统存储缓存对象所使用的存储空间，单位为字节
        bytes_read -------------------------- 从memcached服务器查询的总的字节数
        bytes_written ----------------------- 向memcached服务器写入的总的字节数
        cmd_get ----------------------------- 累积获取数据的命令数量
        cmd_set ----------------------------- 累积保存数据的命令数量
        connection_structures --------------- 从memcached服务启动到当前时间，被服务器分配的连接结构的数量
        curr_connections -------------------- 当前系统打开的连接数
        curr_items -------------------------- 当前缓存中存放的所有缓存对象的数量，不包括目前已经从缓存中删除的对象
        evictions --------------------------- 为了给新的数据项目释放空间，从缓存移除的缓存对象的数目
        get_hits ---------------------------- 获取数据成功的次数
        get_misses -------------------------- 获取数据失败的次数
        limit_maxbytes ---------------------- memcached服务缓存允许使用的最大字节数
        pid --------------------------------- memcached服务进程的进程ID
        pointer_size ------------------------ 服务器所在主机操作系统的指针大小，一般为32或64
        rusage_system ----------------------- 进程的累计系统时间
        rusage_user ------------------------- 进程的累计用户时间
        threads ----------------------------- 被请求的工作线程的总数量
        time -------------------------------- memcached服务器所在主机当前系统的时间，单位为秒
        total_connections ------------------- 从memcached服务启动到当前时间，系统打开过的连接的总数
        total_items ------------------------- 从memcached服务启动到当前时间，系统存储过的所有对象的数量，包括目前已经从缓存中删除的对象
        uptime ------------------------------ memcached服务从启动到当前所经过的时间，单位为秒
        version ----------------------------- memcached组件的版本

        @return： 返回一级缓存所有节点的状态信息：<serverIp:port, <key, value> >

        """
        self.send_Mgr_GetL1CacheStats()
        return self.recv_Mgr_GetL1CacheStats()

    def send_Mgr_GetL1CacheStats(self):
        self._oprot.writeMessageBegin('Mgr_GetL1CacheStats', TMessageType.CALL, self._seqid)
        args = Mgr_GetL1CacheStats_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_Mgr_GetL1CacheStats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = Mgr_GetL1CacheStats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "Mgr_GetL1CacheStats failed: unknown result")

    def Mgr_GetL2CacheStats(self):
        """
        返回当前节点二级缓存统计信息
        该接口返回二级缓存的状态统计信息，包括：

        get_hits ---------------------- 获取数据成功的次数
        get_misses -------------------- 获取数据失败的次数
        set_hits ---------------------- 设置数据成功的次数
        set_misses -------------------- 设置数据失败的次数
        exist_hits -------------------- 检查数据成功的次数
        exist_misses ------------------ 检查数据失败的次数
        bytes_read -------------------- 已读取的字节数
        bytes_written ----------------- 已写入的字节数
        bytes ------------------------- 总共使用情况（字节数）
        capacity ---------------------- 设置的空间大小（字节数）
        path -------------------------- 设置的存储路径（不存在则为空）
        is_running -------------------- 当前是否正在运行（yes, no）

        @return： 返回当前节点二级缓存状态信息：<key, value>

        """
        self.send_Mgr_GetL2CacheStats()
        return self.recv_Mgr_GetL2CacheStats()

    def send_Mgr_GetL2CacheStats(self):
        self._oprot.writeMessageBegin('Mgr_GetL2CacheStats', TMessageType.CALL, self._seqid)
        args = Mgr_GetL2CacheStats_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_Mgr_GetL2CacheStats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = Mgr_GetL2CacheStats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "Mgr_GetL2CacheStats failed: unknown result")

    def Mgr_SetL2CacheCapacity(self, capacity):
        """
        修改二级缓存空间

        @param   capacity 总容量大小，以MB为单位

        Parameters:
         - capacity

        """
        self.send_Mgr_SetL2CacheCapacity(capacity)
        self.recv_Mgr_SetL2CacheCapacity()

    def send_Mgr_SetL2CacheCapacity(self, capacity):
        self._oprot.writeMessageBegin('Mgr_SetL2CacheCapacity', TMessageType.CALL, self._seqid)
        args = Mgr_SetL2CacheCapacity_args()
        args.capacity = capacity
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_Mgr_SetL2CacheCapacity(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = Mgr_SetL2CacheCapacity_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exp is not None:
            raise result.exp
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["Mgr_OnESwiftPrepared"] = Processor.process_Mgr_OnESwiftPrepared
        self._processMap["Mgr_OnMemcachedServersJoin"] = Processor.process_Mgr_OnMemcachedServersJoin
        self._processMap["Mgr_OnL1CacheSetServers"] = Processor.process_Mgr_OnL1CacheSetServers
        self._processMap["Mgr_GetL1CacheServers"] = Processor.process_Mgr_GetL1CacheServers
        self._processMap["Mgr_GetL1CacheStats"] = Processor.process_Mgr_GetL1CacheStats
        self._processMap["Mgr_GetL2CacheStats"] = Processor.process_Mgr_GetL2CacheStats
        self._processMap["Mgr_SetL2CacheCapacity"] = Processor.process_Mgr_SetL2CacheCapacity
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_Mgr_OnESwiftPrepared(self, seqid, iprot, oprot):
        args = Mgr_OnESwiftPrepared_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = Mgr_OnESwiftPrepared_result()
        try:
            self._handler.Mgr_OnESwiftPrepared()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except EThriftException.ttypes.ncTException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("Mgr_OnESwiftPrepared", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_Mgr_OnMemcachedServersJoin(self, seqid, iprot, oprot):
        args = Mgr_OnMemcachedServersJoin_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = Mgr_OnMemcachedServersJoin_result()
        try:
            self._handler.Mgr_OnMemcachedServersJoin(args.serversList)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("Mgr_OnMemcachedServersJoin", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_Mgr_OnL1CacheSetServers(self, seqid, iprot, oprot):
        args = Mgr_OnL1CacheSetServers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = Mgr_OnL1CacheSetServers_result()
        try:
            self._handler.Mgr_OnL1CacheSetServers(args.serversList)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("Mgr_OnL1CacheSetServers", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_Mgr_GetL1CacheServers(self, seqid, iprot, oprot):
        args = Mgr_GetL1CacheServers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = Mgr_GetL1CacheServers_result()
        try:
            result.success = self._handler.Mgr_GetL1CacheServers()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("Mgr_GetL1CacheServers", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_Mgr_GetL1CacheStats(self, seqid, iprot, oprot):
        args = Mgr_GetL1CacheStats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = Mgr_GetL1CacheStats_result()
        try:
            result.success = self._handler.Mgr_GetL1CacheStats()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("Mgr_GetL1CacheStats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_Mgr_GetL2CacheStats(self, seqid, iprot, oprot):
        args = Mgr_GetL2CacheStats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = Mgr_GetL2CacheStats_result()
        try:
            result.success = self._handler.Mgr_GetL2CacheStats()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("Mgr_GetL2CacheStats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_Mgr_SetL2CacheCapacity(self, seqid, iprot, oprot):
        args = Mgr_SetL2CacheCapacity_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = Mgr_SetL2CacheCapacity_result()
        try:
            self._handler.Mgr_SetL2CacheCapacity(args.capacity)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except EThriftException.ttypes.ncTException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("Mgr_SetL2CacheCapacity", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class Mgr_OnESwiftPrepared_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_OnESwiftPrepared_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_OnESwiftPrepared_args)
Mgr_OnESwiftPrepared_args.thrift_spec = (
)


class Mgr_OnESwiftPrepared_result(object):
    """
    Attributes:
     - exp

    """


    def __init__(self, exp=None,):
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = EThriftException.ttypes.ncTException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_OnESwiftPrepared_result')
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_OnESwiftPrepared_result)
Mgr_OnESwiftPrepared_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exp', [EThriftException.ttypes.ncTException, None], None, ),  # 1
)


class Mgr_OnMemcachedServersJoin_args(object):
    """
    Attributes:
     - serversList

    """


    def __init__(self, serversList=None,):
        self.serversList = serversList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.serversList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.serversList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_OnMemcachedServersJoin_args')
        if self.serversList is not None:
            oprot.writeFieldBegin('serversList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.serversList))
            for iter6 in self.serversList:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_OnMemcachedServersJoin_args)
Mgr_OnMemcachedServersJoin_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'serversList', (TType.STRING, 'UTF8', False), None, ),  # 1
)


class Mgr_OnMemcachedServersJoin_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_OnMemcachedServersJoin_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_OnMemcachedServersJoin_result)
Mgr_OnMemcachedServersJoin_result.thrift_spec = (
)


class Mgr_OnL1CacheSetServers_args(object):
    """
    Attributes:
     - serversList

    """


    def __init__(self, serversList=None,):
        self.serversList = serversList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.serversList = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.serversList.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_OnL1CacheSetServers_args')
        if self.serversList is not None:
            oprot.writeFieldBegin('serversList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.serversList))
            for iter13 in self.serversList:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_OnL1CacheSetServers_args)
Mgr_OnL1CacheSetServers_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'serversList', (TType.STRING, 'UTF8', False), None, ),  # 1
)


class Mgr_OnL1CacheSetServers_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_OnL1CacheSetServers_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_OnL1CacheSetServers_result)
Mgr_OnL1CacheSetServers_result.thrift_spec = (
)


class Mgr_GetL1CacheServers_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_GetL1CacheServers_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_GetL1CacheServers_args)
Mgr_GetL1CacheServers_args.thrift_spec = (
)


class Mgr_GetL1CacheServers_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_GetL1CacheServers_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for iter20 in self.success:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_GetL1CacheServers_result)
Mgr_GetL1CacheServers_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
)


class Mgr_GetL1CacheStats_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_GetL1CacheStats_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_GetL1CacheStats_args)
Mgr_GetL1CacheStats_args.thrift_spec = (
)


class Mgr_GetL1CacheStats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype22, _vtype23, _size21) = iprot.readMapBegin()
                    for _i25 in range(_size21):
                        _key26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val27 = {}
                        (_ktype29, _vtype30, _size28) = iprot.readMapBegin()
                        for _i32 in range(_size28):
                            _key33 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val34 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val27[_key33] = _val34
                        iprot.readMapEnd()
                        self.success[_key26] = _val27
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_GetL1CacheStats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
            for kiter35, viter36 in self.success.items():
                oprot.writeString(kiter35.encode('utf-8') if sys.version_info[0] == 2 else kiter35)
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(viter36))
                for kiter37, viter38 in viter36.items():
                    oprot.writeString(kiter37.encode('utf-8') if sys.version_info[0] == 2 else kiter37)
                    oprot.writeString(viter38.encode('utf-8') if sys.version_info[0] == 2 else viter38)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_GetL1CacheStats_result)
Mgr_GetL1CacheStats_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 0
)


class Mgr_GetL2CacheStats_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_GetL2CacheStats_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_GetL2CacheStats_args)
Mgr_GetL2CacheStats_args.thrift_spec = (
)


class Mgr_GetL2CacheStats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype40, _vtype41, _size39) = iprot.readMapBegin()
                    for _i43 in range(_size39):
                        _key44 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val45 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.success[_key44] = _val45
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_GetL2CacheStats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
            for kiter46, viter47 in self.success.items():
                oprot.writeString(kiter46.encode('utf-8') if sys.version_info[0] == 2 else kiter46)
                oprot.writeString(viter47.encode('utf-8') if sys.version_info[0] == 2 else viter47)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_GetL2CacheStats_result)
Mgr_GetL2CacheStats_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 0
)


class Mgr_SetL2CacheCapacity_args(object):
    """
    Attributes:
     - capacity

    """


    def __init__(self, capacity=None,):
        self.capacity = capacity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.capacity = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_SetL2CacheCapacity_args')
        if self.capacity is not None:
            oprot.writeFieldBegin('capacity', TType.I64, 1)
            oprot.writeI64(self.capacity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_SetL2CacheCapacity_args)
Mgr_SetL2CacheCapacity_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'capacity', None, None, ),  # 1
)


class Mgr_SetL2CacheCapacity_result(object):
    """
    Attributes:
     - exp

    """


    def __init__(self, exp=None,):
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = EThriftException.ttypes.ncTException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mgr_SetL2CacheCapacity_result')
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Mgr_SetL2CacheCapacity_result)
Mgr_SetL2CacheCapacity_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exp', [EThriftException.ttypes.ncTException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

