#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTEOFSError(object):
    NCT_UNKNOWN_EXCEPTION = 10001
    NCT_FAILED_TO_GET_EOFS_MGR = 10002
    NCT_FAILED_TO_GET_EOFS_CACHE_MGR = 10003

    _VALUES_TO_NAMES = {
        10001: "NCT_UNKNOWN_EXCEPTION",
        10002: "NCT_FAILED_TO_GET_EOFS_MGR",
        10003: "NCT_FAILED_TO_GET_EOFS_CACHE_MGR",
    }

    _NAMES_TO_VALUES = {
        "NCT_UNKNOWN_EXCEPTION": 10001,
        "NCT_FAILED_TO_GET_EOFS_MGR": 10002,
        "NCT_FAILED_TO_GET_EOFS_CACHE_MGR": 10003,
    }


class ncTEOFSUsedSize(object):
    """
    EOFS 容量信息，单位为字节

    Attributes:
     - allocSize

    """


    def __init__(self, allocSize=None,):
        self.allocSize = allocSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.allocSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEOFSUsedSize')
        if self.allocSize is not None:
            oprot.writeFieldBegin('allocSize', TType.I64, 1)
            oprot.writeI64(self.allocSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.allocSize is None:
            raise TProtocolException(message='Required field allocSize is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTEOFSUsedSize)
ncTEOFSUsedSize.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'allocSize', None, None, ),  # 1
)
fix_spec(all_structs)
del all_structs
