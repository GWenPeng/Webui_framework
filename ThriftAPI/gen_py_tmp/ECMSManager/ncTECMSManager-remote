#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ECMSManager import ncTECMSManager
from ECMSManager.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool is_node_dirty(string host, i32 port, string user, string passwd)')
    print('  bool is_env_dirty(string node_ipaddr)')
    print('  void clear_node(string node_ipaddr)')
    print('  string active_cluster(string node_ipaddr)')
    print('  string add_node(string host)')
    print('  void del_node(string node_uuid)')
    print('  bool get_module_status(string module_name)')
    print('  void enable_module(string module_name)')
    print('  void disable_module(string module_name)')
    print('  void create_ecms_db()')
    print('   get_db_node_info()')
    print('  void set_db_master(string node_uuid)')
    print('  void set_db_slave(string node_uuid)')
    print('  void set_db_slave_by_xtrabackup(string node_uuid, ncTSSHInfo slave_ssh_info)')
    print('  void cancel_db_node(string node_uuid)')
    print('  void update_deployment_mode(string mode)')
    print('  string get_deployment_mode()')
    print('  void dump_databases_to_path(string host, i32 port, string db_name, string path)')
    print('   get_databases_name(string host, i32 port)')
    print('  void purge_binlogs(string node_uuid)')
    print('  void update_external_db_info(ncTExternalDBInfo info)')
    print('  ncTExternalDBInfo get_external_db_info()')
    print('  bool is_external_db()')
    print('  bool is_available_external_db(ncTExternalDBInfo info)')
    print('  void add_firewall_rule(ncTFirewallInfo firewall_info)')
    print('  void del_firewall_rule(ncTFirewallInfo firewall_info)')
    print('  void update_firewall_rule(ncTFirewallInfo old_info, ncTFirewallInfo new_info)')
    print('   get_firewall_rule(string sys_role)')
    print('  void enable_firewall()')
    print('  void disable_firewall()')
    print('  bool get_firewall_status()')
    print('  void enable_sys_service(string sys_role)')
    print('  void disable_sys_service(string sys_role)')
    print('  bool get_sys_service_status(string sys_role)')
    print('  void add_trusted_ip( ip_list)')
    print('  void set_storage_trusted_ip( firewall_list)')
    print('   get_asu_node_ip()')
    print('  bool get_keepalived_status()')
    print('  void enable_keepalived()')
    print('  void disable_keepalived()')
    print('   get_vip_info()')
    print('  void set_vip_info(ncTVipInfo vip_info)')
    print('  void set_ivip_info(ncTVipInfo ivip_info)')
    print('   get_ha_node_info()')
    print('  void set_ha_master(string node_uuid, ncTVipInfo vip_info)')
    print('  void set_ha_slave(string node_uuid, i32 ha_sys)')
    print('  void cancel_ha_node(string node_uuid)')
    print('  void set_db_ha_master(ncTVipInfo ivip_info)')
    print('  void set_db_ha_slave()')
    print('  void cancel_db_ha_node(string node_uuid)')
    print('  void on_lvs_changed()')
    print('  void on_node_entering_master()')
    print('  void on_node_entering_slave()')
    print('  void force_enter_master()')
    print('  ncTNodeInfo get_node_info(string node_uuid)')
    print('   get_all_node_info()')
    print('  void set_node_alias(string node_uuid, string node_alias)')
    print('  void restart_eisooapp(string node_uuid)')
    print('  void reboot_node(string node_uuid)')
    print('  void shutdown_cluster()')
    print('  i64 get_cluster_time()')
    print('  void set_cluster_time(string datetime)')
    print('  string get_cluster_version()')
    print('  string get_cluster_uuid()')
    print('  void add_log_server(string facility, string severity, string ip, i32 port, string protocol)')
    print('  void delete_log_server(string facility, string severity, string ip, i32 port, string protocol)')
    print('  void enable_upload_log(string datetime)')
    print('  void disable_upload_log()')
    print('  bool get_upload_log_status()')
    print('   get_upload_log_server()')
    print('  i32 get_upload_log_time()')
    print('   get_all_nics_name(string node_uuid)')
    print('  double get_cpu_usage(string node_uuid)')
    print('   get_memory_info(string node_uuid)')
    print('  i64 get_network_outgoing_rate(string node_uuid)')
    print('  i64 get_network_incoming_rate(string node_uuid)')
    print('  void troubleshoot()')
    print('  void consistency_repair()')
    print('  bool consistency_check()')
    print('  void on_node_heartbeat(string node_uuid)')
    print('  void on_change_node_ip(string old_ip, string new_ip, bool update_db_host)')
    print('  void enable_raid_manager()')
    print('  void disable_raid_manager()')
    print('  bool get_raid_manager_status()')
    print('  bool is_available_of_raid_manager(string node_ip)')
    print('  bool exist_iscsi_device(string node_ip)')
    print('   get_free_data_disks(string node_ip)')
    print('  void init_storage_pool(i32 replicas)')
    print('  bool is_storage_pool_inited()')
    print('  ncTStoragePool get_storage_pool(bool include_used_size)')
    print('   get_storage_pool_devices(string node_ip)')
    print('   get_storage_pool_swift_devices()')
    print('  void add_devices_to_pool( disk_dev_paths)')
    print('  void add_node_devices_to_pool(string node_ip)')
    print('   get_maintenance_of_devices( dev_uuids)')
    print('   enable_maintenance_of_devices( dev_uuids)')
    print('   disable_maintenance_of_devices( dev_uuids)')
    print('   get_free_data_disks_for_replace(i32 dev_id)')
    print('  void replace_device_in_pool(i32 dev_id, string disk_dev_path)')
    print('  void remove_device_from_pool(i32 dev_id)')
    print('  void remove_node_devices_from_pool(string node_ip)')
    print('  void rebalance_storage_pool()')
    print('  void change_replicas(i32 replicas)')
    print('  double get_replicas_health()')
    print('   get_all_data_raid_pds(string node_ip)')
    print('   get_free_data_raid_pds(string node_ip)')
    print('   get_raid_pds_in_storage_pool(string node_ip)')
    print('   get_sys_raid_pds(string node_ip)')
    print('   get_all_raid_lds(string node_ip)')
    print('   get_raid_pd_details(string node_ip, string pd_devid)')
    print('   get_raid_ld_details(string node_ip, string ld_devid)')
    print('   init_free_data_raid_pds(string node_ip,  pd_devids, i32 bond_disks_num)')
    print('  void add_raid_hotspare(string node_ip, string pd_devid, string ld_devid)')
    print('  void remove_raid_hotspare(string node_ip, string pd_devid)')
    print('   get_raid_lds_for_hotspare(string node_ip)')
    print('  string create_cache_volume(string node_uuid, string disk_dev_path)')
    print('  void remove_cache_volume(string node_uuid)')
    print('  ncTVolume get_cache_volume(string node_uuid)')
    print('  void init_cache_volume(string node_uuid)')
    print('  bool is_cache_volume_inited(string node_uuid)')
    print('  void mount_cache_volume(string node_uuid)')
    print('  void allocate_cache_volume(string node_uuid)')
    print('  ncTVolume get_sys_volume(string node_uuid)')
    print('  ncTVolume get_sysvol_volume(string node_uuid)')
    print('   get_disk_info(string node_uuid, string dev_path)')
    print('   get_data_disks(string node_uuid)')
    print('  string get_storage_console_address(string storage_server_name)')
    print('  ncTCephStorageInfo get_local_ceph_storage_info(string storage_server_name)')
    print('  void set_local_ceph_manage_vip(string ceph_manage_vip)')
    print('  string get_local_ceph_manage_vip()')
    print('  bool get_zabbix_status()')
    print('  void enable_zabbix()')
    print('  void disable_zabbix()')
    print('   get_alert_trigger_status()')
    print('  bool is_alert_enable()')
    print('  void enable_alert()')
    print('  void disable_alert()')
    print('  void enable_maintenance()')
    print('  void disable_maintenance()')
    print('  bool get_maintenance_status()')
    print('   get_service_problem_records(string ipaddr, i32 time_from, i32 time_till)')
    print('   get_database_problem_records(string ipaddr, i32 time_from, i32 time_till)')
    print('   get_cpu_problem_records(string ipaddr, double threshold, i32 time_from, i32 time_till)')
    print('   get_sysvol_problem_records(string ipaddr, i32 time_from, i32 time_till)')
    print('   get_memory_problem_records(string ipaddr, double threshold, i32 time_from, i32 time_till)')
    print('   get_self_backup_problem_records(string ipaddr, i32 time_from, i32 time_till)')
    print('   get_node_online_problem_records(string ipaddr, i32 time_from, i32 time_till)')
    print('   get_node_switch_problem_records(string ipaddr, i32 time_from, i32 time_till)')
    print('   get_replicas_problem_records(string ipaddr, i32 time_from, i32 time_till)')
    print('   get_storage_dev_problem_records(string ipaddr, i32 time_from, i32 time_till)')
    print('   get_balance_problem_records(string ipaddr, i32 time_from, i32 time_till)')
    print('  void add_storage_node(string node_uuid)')
    print('  void del_storage_node(string node_uuid)')
    print('   get_storage_node_info()')
    print('  string get_storage_master_node_ip()')
    print('  void enable_storage_lvs(string node_uuid)')
    print('  void disable_storage_lvs(string node_uuid)')
    print('  void add_application_node(string node_uuid)')
    print('  void del_application_node(string node_uuid)')
    print('   get_app_node_info()')
    print('  ncTAppNodeInfo get_app_master_node_info()')
    print('  string get_app_master_node_ip()')
    print('  void enable_app_lvs(string node_uuid)')
    print('  void disable_app_lvs(string node_uuid)')
    print('   get_application_service()')
    print('  void add_application_service(string service_name, i32 port, bool is_lvs)')
    print('  void del_application_service(string service_name)')
    print('  ncTServiceStatus get_service_status(string node_uuid, string service_name)')
    print('  bool is_app_registered(string app_name)')
    print('  void add_single_application_node(string node_uuid, string app_name)')
    print('  void del_single_application_node(string app_name)')
    print('   get_single_application_service_by_node(string node_uuid)')
    print('  string get_node_uuid_by_app_name(string app_name)')
    print('  string get_app_host_ip(string app_name)')
    print('  string verify_sign_in(string user, string password)')
    print('  bool app_sys_status()')
    print('  void update_password(string uuid, string password)')
    print('  void update_user_name(string uuid, string user_name)')
    print('  void commit_conf_file(string conf_file_path, string source_file_path)')
    print('  void commit_conf_file_content(string conf_file_path, string file_content)')
    print('  void delete_conf_file(string conf_file_path)')
    print('   get_commited_conf_files()')
    print('  void set_dns_server( nameservers)')
    print('   get_dns_server()')
    print('  bool get_chrony_status()')
    print('  void disable_chrony()')
    print('  void enable_chrony()')
    print('  void add_time_server(string server)')
    print('  void del_time_server(string server)')
    print('   get_time_server()')
    print('  void install_service(string server_name)')
    print('  void uninstall_service(string server_name)')
    print('   get_node_service()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncTECMSManager.Client(protocol)
transport.open()

if cmd == 'is_node_dirty':
    if len(args) != 4:
        print('is_node_dirty requires 4 args')
        sys.exit(1)
    pp.pprint(client.is_node_dirty(args[0], eval(args[1]), args[2], args[3],))

elif cmd == 'is_env_dirty':
    if len(args) != 1:
        print('is_env_dirty requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_env_dirty(args[0],))

elif cmd == 'clear_node':
    if len(args) != 1:
        print('clear_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.clear_node(args[0],))

elif cmd == 'active_cluster':
    if len(args) != 1:
        print('active_cluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.active_cluster(args[0],))

elif cmd == 'add_node':
    if len(args) != 1:
        print('add_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_node(args[0],))

elif cmd == 'del_node':
    if len(args) != 1:
        print('del_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_node(args[0],))

elif cmd == 'get_module_status':
    if len(args) != 1:
        print('get_module_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_module_status(args[0],))

elif cmd == 'enable_module':
    if len(args) != 1:
        print('enable_module requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_module(args[0],))

elif cmd == 'disable_module':
    if len(args) != 1:
        print('disable_module requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable_module(args[0],))

elif cmd == 'create_ecms_db':
    if len(args) != 0:
        print('create_ecms_db requires 0 args')
        sys.exit(1)
    pp.pprint(client.create_ecms_db())

elif cmd == 'get_db_node_info':
    if len(args) != 0:
        print('get_db_node_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_db_node_info())

elif cmd == 'set_db_master':
    if len(args) != 1:
        print('set_db_master requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_db_master(args[0],))

elif cmd == 'set_db_slave':
    if len(args) != 1:
        print('set_db_slave requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_db_slave(args[0],))

elif cmd == 'set_db_slave_by_xtrabackup':
    if len(args) != 2:
        print('set_db_slave_by_xtrabackup requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_db_slave_by_xtrabackup(args[0], eval(args[1]),))

elif cmd == 'cancel_db_node':
    if len(args) != 1:
        print('cancel_db_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.cancel_db_node(args[0],))

elif cmd == 'update_deployment_mode':
    if len(args) != 1:
        print('update_deployment_mode requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_deployment_mode(args[0],))

elif cmd == 'get_deployment_mode':
    if len(args) != 0:
        print('get_deployment_mode requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_deployment_mode())

elif cmd == 'dump_databases_to_path':
    if len(args) != 4:
        print('dump_databases_to_path requires 4 args')
        sys.exit(1)
    pp.pprint(client.dump_databases_to_path(args[0], eval(args[1]), args[2], args[3],))

elif cmd == 'get_databases_name':
    if len(args) != 2:
        print('get_databases_name requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_databases_name(args[0], eval(args[1]),))

elif cmd == 'purge_binlogs':
    if len(args) != 1:
        print('purge_binlogs requires 1 args')
        sys.exit(1)
    pp.pprint(client.purge_binlogs(args[0],))

elif cmd == 'update_external_db_info':
    if len(args) != 1:
        print('update_external_db_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_external_db_info(eval(args[0]),))

elif cmd == 'get_external_db_info':
    if len(args) != 0:
        print('get_external_db_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_external_db_info())

elif cmd == 'is_external_db':
    if len(args) != 0:
        print('is_external_db requires 0 args')
        sys.exit(1)
    pp.pprint(client.is_external_db())

elif cmd == 'is_available_external_db':
    if len(args) != 1:
        print('is_available_external_db requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_available_external_db(eval(args[0]),))

elif cmd == 'add_firewall_rule':
    if len(args) != 1:
        print('add_firewall_rule requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_firewall_rule(eval(args[0]),))

elif cmd == 'del_firewall_rule':
    if len(args) != 1:
        print('del_firewall_rule requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_firewall_rule(eval(args[0]),))

elif cmd == 'update_firewall_rule':
    if len(args) != 2:
        print('update_firewall_rule requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_firewall_rule(eval(args[0]), eval(args[1]),))

elif cmd == 'get_firewall_rule':
    if len(args) != 1:
        print('get_firewall_rule requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_firewall_rule(args[0],))

elif cmd == 'enable_firewall':
    if len(args) != 0:
        print('enable_firewall requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_firewall())

elif cmd == 'disable_firewall':
    if len(args) != 0:
        print('disable_firewall requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_firewall())

elif cmd == 'get_firewall_status':
    if len(args) != 0:
        print('get_firewall_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_firewall_status())

elif cmd == 'enable_sys_service':
    if len(args) != 1:
        print('enable_sys_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_sys_service(args[0],))

elif cmd == 'disable_sys_service':
    if len(args) != 1:
        print('disable_sys_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable_sys_service(args[0],))

elif cmd == 'get_sys_service_status':
    if len(args) != 1:
        print('get_sys_service_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_sys_service_status(args[0],))

elif cmd == 'add_trusted_ip':
    if len(args) != 1:
        print('add_trusted_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_trusted_ip(eval(args[0]),))

elif cmd == 'set_storage_trusted_ip':
    if len(args) != 1:
        print('set_storage_trusted_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_storage_trusted_ip(eval(args[0]),))

elif cmd == 'get_asu_node_ip':
    if len(args) != 0:
        print('get_asu_node_ip requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_asu_node_ip())

elif cmd == 'get_keepalived_status':
    if len(args) != 0:
        print('get_keepalived_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_keepalived_status())

elif cmd == 'enable_keepalived':
    if len(args) != 0:
        print('enable_keepalived requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_keepalived())

elif cmd == 'disable_keepalived':
    if len(args) != 0:
        print('disable_keepalived requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_keepalived())

elif cmd == 'get_vip_info':
    if len(args) != 0:
        print('get_vip_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_vip_info())

elif cmd == 'set_vip_info':
    if len(args) != 1:
        print('set_vip_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_vip_info(eval(args[0]),))

elif cmd == 'set_ivip_info':
    if len(args) != 1:
        print('set_ivip_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_ivip_info(eval(args[0]),))

elif cmd == 'get_ha_node_info':
    if len(args) != 0:
        print('get_ha_node_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_ha_node_info())

elif cmd == 'set_ha_master':
    if len(args) != 2:
        print('set_ha_master requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_ha_master(args[0], eval(args[1]),))

elif cmd == 'set_ha_slave':
    if len(args) != 2:
        print('set_ha_slave requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_ha_slave(args[0], eval(args[1]),))

elif cmd == 'cancel_ha_node':
    if len(args) != 1:
        print('cancel_ha_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.cancel_ha_node(args[0],))

elif cmd == 'set_db_ha_master':
    if len(args) != 1:
        print('set_db_ha_master requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_db_ha_master(eval(args[0]),))

elif cmd == 'set_db_ha_slave':
    if len(args) != 0:
        print('set_db_ha_slave requires 0 args')
        sys.exit(1)
    pp.pprint(client.set_db_ha_slave())

elif cmd == 'cancel_db_ha_node':
    if len(args) != 1:
        print('cancel_db_ha_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.cancel_db_ha_node(args[0],))

elif cmd == 'on_lvs_changed':
    if len(args) != 0:
        print('on_lvs_changed requires 0 args')
        sys.exit(1)
    pp.pprint(client.on_lvs_changed())

elif cmd == 'on_node_entering_master':
    if len(args) != 0:
        print('on_node_entering_master requires 0 args')
        sys.exit(1)
    pp.pprint(client.on_node_entering_master())

elif cmd == 'on_node_entering_slave':
    if len(args) != 0:
        print('on_node_entering_slave requires 0 args')
        sys.exit(1)
    pp.pprint(client.on_node_entering_slave())

elif cmd == 'force_enter_master':
    if len(args) != 0:
        print('force_enter_master requires 0 args')
        sys.exit(1)
    pp.pprint(client.force_enter_master())

elif cmd == 'get_node_info':
    if len(args) != 1:
        print('get_node_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_node_info(args[0],))

elif cmd == 'get_all_node_info':
    if len(args) != 0:
        print('get_all_node_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_node_info())

elif cmd == 'set_node_alias':
    if len(args) != 2:
        print('set_node_alias requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_node_alias(args[0], args[1],))

elif cmd == 'restart_eisooapp':
    if len(args) != 1:
        print('restart_eisooapp requires 1 args')
        sys.exit(1)
    pp.pprint(client.restart_eisooapp(args[0],))

elif cmd == 'reboot_node':
    if len(args) != 1:
        print('reboot_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.reboot_node(args[0],))

elif cmd == 'shutdown_cluster':
    if len(args) != 0:
        print('shutdown_cluster requires 0 args')
        sys.exit(1)
    pp.pprint(client.shutdown_cluster())

elif cmd == 'get_cluster_time':
    if len(args) != 0:
        print('get_cluster_time requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_time())

elif cmd == 'set_cluster_time':
    if len(args) != 1:
        print('set_cluster_time requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_cluster_time(args[0],))

elif cmd == 'get_cluster_version':
    if len(args) != 0:
        print('get_cluster_version requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_version())

elif cmd == 'get_cluster_uuid':
    if len(args) != 0:
        print('get_cluster_uuid requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_uuid())

elif cmd == 'add_log_server':
    if len(args) != 5:
        print('add_log_server requires 5 args')
        sys.exit(1)
    pp.pprint(client.add_log_server(args[0], args[1], args[2], eval(args[3]), args[4],))

elif cmd == 'delete_log_server':
    if len(args) != 5:
        print('delete_log_server requires 5 args')
        sys.exit(1)
    pp.pprint(client.delete_log_server(args[0], args[1], args[2], eval(args[3]), args[4],))

elif cmd == 'enable_upload_log':
    if len(args) != 1:
        print('enable_upload_log requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_upload_log(args[0],))

elif cmd == 'disable_upload_log':
    if len(args) != 0:
        print('disable_upload_log requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_upload_log())

elif cmd == 'get_upload_log_status':
    if len(args) != 0:
        print('get_upload_log_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_upload_log_status())

elif cmd == 'get_upload_log_server':
    if len(args) != 0:
        print('get_upload_log_server requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_upload_log_server())

elif cmd == 'get_upload_log_time':
    if len(args) != 0:
        print('get_upload_log_time requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_upload_log_time())

elif cmd == 'get_all_nics_name':
    if len(args) != 1:
        print('get_all_nics_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_all_nics_name(args[0],))

elif cmd == 'get_cpu_usage':
    if len(args) != 1:
        print('get_cpu_usage requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cpu_usage(args[0],))

elif cmd == 'get_memory_info':
    if len(args) != 1:
        print('get_memory_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_memory_info(args[0],))

elif cmd == 'get_network_outgoing_rate':
    if len(args) != 1:
        print('get_network_outgoing_rate requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_network_outgoing_rate(args[0],))

elif cmd == 'get_network_incoming_rate':
    if len(args) != 1:
        print('get_network_incoming_rate requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_network_incoming_rate(args[0],))

elif cmd == 'troubleshoot':
    if len(args) != 0:
        print('troubleshoot requires 0 args')
        sys.exit(1)
    pp.pprint(client.troubleshoot())

elif cmd == 'consistency_repair':
    if len(args) != 0:
        print('consistency_repair requires 0 args')
        sys.exit(1)
    pp.pprint(client.consistency_repair())

elif cmd == 'consistency_check':
    if len(args) != 0:
        print('consistency_check requires 0 args')
        sys.exit(1)
    pp.pprint(client.consistency_check())

elif cmd == 'on_node_heartbeat':
    if len(args) != 1:
        print('on_node_heartbeat requires 1 args')
        sys.exit(1)
    pp.pprint(client.on_node_heartbeat(args[0],))

elif cmd == 'on_change_node_ip':
    if len(args) != 3:
        print('on_change_node_ip requires 3 args')
        sys.exit(1)
    pp.pprint(client.on_change_node_ip(args[0], args[1], eval(args[2]),))

elif cmd == 'enable_raid_manager':
    if len(args) != 0:
        print('enable_raid_manager requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_raid_manager())

elif cmd == 'disable_raid_manager':
    if len(args) != 0:
        print('disable_raid_manager requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_raid_manager())

elif cmd == 'get_raid_manager_status':
    if len(args) != 0:
        print('get_raid_manager_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_raid_manager_status())

elif cmd == 'is_available_of_raid_manager':
    if len(args) != 1:
        print('is_available_of_raid_manager requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_available_of_raid_manager(args[0],))

elif cmd == 'exist_iscsi_device':
    if len(args) != 1:
        print('exist_iscsi_device requires 1 args')
        sys.exit(1)
    pp.pprint(client.exist_iscsi_device(args[0],))

elif cmd == 'get_free_data_disks':
    if len(args) != 1:
        print('get_free_data_disks requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_free_data_disks(args[0],))

elif cmd == 'init_storage_pool':
    if len(args) != 1:
        print('init_storage_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.init_storage_pool(eval(args[0]),))

elif cmd == 'is_storage_pool_inited':
    if len(args) != 0:
        print('is_storage_pool_inited requires 0 args')
        sys.exit(1)
    pp.pprint(client.is_storage_pool_inited())

elif cmd == 'get_storage_pool':
    if len(args) != 1:
        print('get_storage_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_storage_pool(eval(args[0]),))

elif cmd == 'get_storage_pool_devices':
    if len(args) != 1:
        print('get_storage_pool_devices requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_storage_pool_devices(args[0],))

elif cmd == 'get_storage_pool_swift_devices':
    if len(args) != 0:
        print('get_storage_pool_swift_devices requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_storage_pool_swift_devices())

elif cmd == 'add_devices_to_pool':
    if len(args) != 1:
        print('add_devices_to_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_devices_to_pool(eval(args[0]),))

elif cmd == 'add_node_devices_to_pool':
    if len(args) != 1:
        print('add_node_devices_to_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_node_devices_to_pool(args[0],))

elif cmd == 'get_maintenance_of_devices':
    if len(args) != 1:
        print('get_maintenance_of_devices requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_maintenance_of_devices(eval(args[0]),))

elif cmd == 'enable_maintenance_of_devices':
    if len(args) != 1:
        print('enable_maintenance_of_devices requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_maintenance_of_devices(eval(args[0]),))

elif cmd == 'disable_maintenance_of_devices':
    if len(args) != 1:
        print('disable_maintenance_of_devices requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable_maintenance_of_devices(eval(args[0]),))

elif cmd == 'get_free_data_disks_for_replace':
    if len(args) != 1:
        print('get_free_data_disks_for_replace requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_free_data_disks_for_replace(eval(args[0]),))

elif cmd == 'replace_device_in_pool':
    if len(args) != 2:
        print('replace_device_in_pool requires 2 args')
        sys.exit(1)
    pp.pprint(client.replace_device_in_pool(eval(args[0]), args[1],))

elif cmd == 'remove_device_from_pool':
    if len(args) != 1:
        print('remove_device_from_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_device_from_pool(eval(args[0]),))

elif cmd == 'remove_node_devices_from_pool':
    if len(args) != 1:
        print('remove_node_devices_from_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_node_devices_from_pool(args[0],))

elif cmd == 'rebalance_storage_pool':
    if len(args) != 0:
        print('rebalance_storage_pool requires 0 args')
        sys.exit(1)
    pp.pprint(client.rebalance_storage_pool())

elif cmd == 'change_replicas':
    if len(args) != 1:
        print('change_replicas requires 1 args')
        sys.exit(1)
    pp.pprint(client.change_replicas(eval(args[0]),))

elif cmd == 'get_replicas_health':
    if len(args) != 0:
        print('get_replicas_health requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_replicas_health())

elif cmd == 'get_all_data_raid_pds':
    if len(args) != 1:
        print('get_all_data_raid_pds requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_all_data_raid_pds(args[0],))

elif cmd == 'get_free_data_raid_pds':
    if len(args) != 1:
        print('get_free_data_raid_pds requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_free_data_raid_pds(args[0],))

elif cmd == 'get_raid_pds_in_storage_pool':
    if len(args) != 1:
        print('get_raid_pds_in_storage_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_raid_pds_in_storage_pool(args[0],))

elif cmd == 'get_sys_raid_pds':
    if len(args) != 1:
        print('get_sys_raid_pds requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_sys_raid_pds(args[0],))

elif cmd == 'get_all_raid_lds':
    if len(args) != 1:
        print('get_all_raid_lds requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_all_raid_lds(args[0],))

elif cmd == 'get_raid_pd_details':
    if len(args) != 2:
        print('get_raid_pd_details requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_raid_pd_details(args[0], args[1],))

elif cmd == 'get_raid_ld_details':
    if len(args) != 2:
        print('get_raid_ld_details requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_raid_ld_details(args[0], args[1],))

elif cmd == 'init_free_data_raid_pds':
    if len(args) != 3:
        print('init_free_data_raid_pds requires 3 args')
        sys.exit(1)
    pp.pprint(client.init_free_data_raid_pds(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'add_raid_hotspare':
    if len(args) != 3:
        print('add_raid_hotspare requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_raid_hotspare(args[0], args[1], args[2],))

elif cmd == 'remove_raid_hotspare':
    if len(args) != 2:
        print('remove_raid_hotspare requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_raid_hotspare(args[0], args[1],))

elif cmd == 'get_raid_lds_for_hotspare':
    if len(args) != 1:
        print('get_raid_lds_for_hotspare requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_raid_lds_for_hotspare(args[0],))

elif cmd == 'create_cache_volume':
    if len(args) != 2:
        print('create_cache_volume requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_cache_volume(args[0], args[1],))

elif cmd == 'remove_cache_volume':
    if len(args) != 1:
        print('remove_cache_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_cache_volume(args[0],))

elif cmd == 'get_cache_volume':
    if len(args) != 1:
        print('get_cache_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cache_volume(args[0],))

elif cmd == 'init_cache_volume':
    if len(args) != 1:
        print('init_cache_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.init_cache_volume(args[0],))

elif cmd == 'is_cache_volume_inited':
    if len(args) != 1:
        print('is_cache_volume_inited requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_cache_volume_inited(args[0],))

elif cmd == 'mount_cache_volume':
    if len(args) != 1:
        print('mount_cache_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.mount_cache_volume(args[0],))

elif cmd == 'allocate_cache_volume':
    if len(args) != 1:
        print('allocate_cache_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.allocate_cache_volume(args[0],))

elif cmd == 'get_sys_volume':
    if len(args) != 1:
        print('get_sys_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_sys_volume(args[0],))

elif cmd == 'get_sysvol_volume':
    if len(args) != 1:
        print('get_sysvol_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_sysvol_volume(args[0],))

elif cmd == 'get_disk_info':
    if len(args) != 2:
        print('get_disk_info requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_disk_info(args[0], args[1],))

elif cmd == 'get_data_disks':
    if len(args) != 1:
        print('get_data_disks requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_data_disks(args[0],))

elif cmd == 'get_storage_console_address':
    if len(args) != 1:
        print('get_storage_console_address requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_storage_console_address(args[0],))

elif cmd == 'get_local_ceph_storage_info':
    if len(args) != 1:
        print('get_local_ceph_storage_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_local_ceph_storage_info(args[0],))

elif cmd == 'set_local_ceph_manage_vip':
    if len(args) != 1:
        print('set_local_ceph_manage_vip requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_local_ceph_manage_vip(args[0],))

elif cmd == 'get_local_ceph_manage_vip':
    if len(args) != 0:
        print('get_local_ceph_manage_vip requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_local_ceph_manage_vip())

elif cmd == 'get_zabbix_status':
    if len(args) != 0:
        print('get_zabbix_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_zabbix_status())

elif cmd == 'enable_zabbix':
    if len(args) != 0:
        print('enable_zabbix requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_zabbix())

elif cmd == 'disable_zabbix':
    if len(args) != 0:
        print('disable_zabbix requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_zabbix())

elif cmd == 'get_alert_trigger_status':
    if len(args) != 0:
        print('get_alert_trigger_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_alert_trigger_status())

elif cmd == 'is_alert_enable':
    if len(args) != 0:
        print('is_alert_enable requires 0 args')
        sys.exit(1)
    pp.pprint(client.is_alert_enable())

elif cmd == 'enable_alert':
    if len(args) != 0:
        print('enable_alert requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_alert())

elif cmd == 'disable_alert':
    if len(args) != 0:
        print('disable_alert requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_alert())

elif cmd == 'enable_maintenance':
    if len(args) != 0:
        print('enable_maintenance requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_maintenance())

elif cmd == 'disable_maintenance':
    if len(args) != 0:
        print('disable_maintenance requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_maintenance())

elif cmd == 'get_maintenance_status':
    if len(args) != 0:
        print('get_maintenance_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_maintenance_status())

elif cmd == 'get_service_problem_records':
    if len(args) != 3:
        print('get_service_problem_records requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_service_problem_records(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'get_database_problem_records':
    if len(args) != 3:
        print('get_database_problem_records requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_database_problem_records(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'get_cpu_problem_records':
    if len(args) != 4:
        print('get_cpu_problem_records requires 4 args')
        sys.exit(1)
    pp.pprint(client.get_cpu_problem_records(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'get_sysvol_problem_records':
    if len(args) != 3:
        print('get_sysvol_problem_records requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_sysvol_problem_records(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'get_memory_problem_records':
    if len(args) != 4:
        print('get_memory_problem_records requires 4 args')
        sys.exit(1)
    pp.pprint(client.get_memory_problem_records(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'get_self_backup_problem_records':
    if len(args) != 3:
        print('get_self_backup_problem_records requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_self_backup_problem_records(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'get_node_online_problem_records':
    if len(args) != 3:
        print('get_node_online_problem_records requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_node_online_problem_records(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'get_node_switch_problem_records':
    if len(args) != 3:
        print('get_node_switch_problem_records requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_node_switch_problem_records(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'get_replicas_problem_records':
    if len(args) != 3:
        print('get_replicas_problem_records requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_replicas_problem_records(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'get_storage_dev_problem_records':
    if len(args) != 3:
        print('get_storage_dev_problem_records requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_storage_dev_problem_records(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'get_balance_problem_records':
    if len(args) != 3:
        print('get_balance_problem_records requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_balance_problem_records(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'add_storage_node':
    if len(args) != 1:
        print('add_storage_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_storage_node(args[0],))

elif cmd == 'del_storage_node':
    if len(args) != 1:
        print('del_storage_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_storage_node(args[0],))

elif cmd == 'get_storage_node_info':
    if len(args) != 0:
        print('get_storage_node_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_storage_node_info())

elif cmd == 'get_storage_master_node_ip':
    if len(args) != 0:
        print('get_storage_master_node_ip requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_storage_master_node_ip())

elif cmd == 'enable_storage_lvs':
    if len(args) != 1:
        print('enable_storage_lvs requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_storage_lvs(args[0],))

elif cmd == 'disable_storage_lvs':
    if len(args) != 1:
        print('disable_storage_lvs requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable_storage_lvs(args[0],))

elif cmd == 'add_application_node':
    if len(args) != 1:
        print('add_application_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_application_node(args[0],))

elif cmd == 'del_application_node':
    if len(args) != 1:
        print('del_application_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_application_node(args[0],))

elif cmd == 'get_app_node_info':
    if len(args) != 0:
        print('get_app_node_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_app_node_info())

elif cmd == 'get_app_master_node_info':
    if len(args) != 0:
        print('get_app_master_node_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_app_master_node_info())

elif cmd == 'get_app_master_node_ip':
    if len(args) != 0:
        print('get_app_master_node_ip requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_app_master_node_ip())

elif cmd == 'enable_app_lvs':
    if len(args) != 1:
        print('enable_app_lvs requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_app_lvs(args[0],))

elif cmd == 'disable_app_lvs':
    if len(args) != 1:
        print('disable_app_lvs requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable_app_lvs(args[0],))

elif cmd == 'get_application_service':
    if len(args) != 0:
        print('get_application_service requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_application_service())

elif cmd == 'add_application_service':
    if len(args) != 3:
        print('add_application_service requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_application_service(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'del_application_service':
    if len(args) != 1:
        print('del_application_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_application_service(args[0],))

elif cmd == 'get_service_status':
    if len(args) != 2:
        print('get_service_status requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_service_status(args[0], args[1],))

elif cmd == 'is_app_registered':
    if len(args) != 1:
        print('is_app_registered requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_app_registered(args[0],))

elif cmd == 'add_single_application_node':
    if len(args) != 2:
        print('add_single_application_node requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_single_application_node(args[0], args[1],))

elif cmd == 'del_single_application_node':
    if len(args) != 1:
        print('del_single_application_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_single_application_node(args[0],))

elif cmd == 'get_single_application_service_by_node':
    if len(args) != 1:
        print('get_single_application_service_by_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_single_application_service_by_node(args[0],))

elif cmd == 'get_node_uuid_by_app_name':
    if len(args) != 1:
        print('get_node_uuid_by_app_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_node_uuid_by_app_name(args[0],))

elif cmd == 'get_app_host_ip':
    if len(args) != 1:
        print('get_app_host_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_app_host_ip(args[0],))

elif cmd == 'verify_sign_in':
    if len(args) != 2:
        print('verify_sign_in requires 2 args')
        sys.exit(1)
    pp.pprint(client.verify_sign_in(args[0], args[1],))

elif cmd == 'app_sys_status':
    if len(args) != 0:
        print('app_sys_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.app_sys_status())

elif cmd == 'update_password':
    if len(args) != 2:
        print('update_password requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_password(args[0], args[1],))

elif cmd == 'update_user_name':
    if len(args) != 2:
        print('update_user_name requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_user_name(args[0], args[1],))

elif cmd == 'commit_conf_file':
    if len(args) != 2:
        print('commit_conf_file requires 2 args')
        sys.exit(1)
    pp.pprint(client.commit_conf_file(args[0], args[1],))

elif cmd == 'commit_conf_file_content':
    if len(args) != 2:
        print('commit_conf_file_content requires 2 args')
        sys.exit(1)
    pp.pprint(client.commit_conf_file_content(args[0], args[1],))

elif cmd == 'delete_conf_file':
    if len(args) != 1:
        print('delete_conf_file requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_conf_file(args[0],))

elif cmd == 'get_commited_conf_files':
    if len(args) != 0:
        print('get_commited_conf_files requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_commited_conf_files())

elif cmd == 'set_dns_server':
    if len(args) != 1:
        print('set_dns_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_dns_server(eval(args[0]),))

elif cmd == 'get_dns_server':
    if len(args) != 0:
        print('get_dns_server requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_dns_server())

elif cmd == 'get_chrony_status':
    if len(args) != 0:
        print('get_chrony_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_chrony_status())

elif cmd == 'disable_chrony':
    if len(args) != 0:
        print('disable_chrony requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_chrony())

elif cmd == 'enable_chrony':
    if len(args) != 0:
        print('enable_chrony requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_chrony())

elif cmd == 'add_time_server':
    if len(args) != 1:
        print('add_time_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_time_server(args[0],))

elif cmd == 'del_time_server':
    if len(args) != 1:
        print('del_time_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_time_server(args[0],))

elif cmd == 'get_time_server':
    if len(args) != 0:
        print('get_time_server requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_time_server())

elif cmd == 'install_service':
    if len(args) != 1:
        print('install_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.install_service(args[0],))

elif cmd == 'uninstall_service':
    if len(args) != 1:
        print('uninstall_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.uninstall_service(args[0],))

elif cmd == 'get_node_service':
    if len(args) != 0:
        print('get_node_service requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_node_service())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
