#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes
import ECMSAgent.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTHaSys(object):
    NORMAL = 0
    BASIC = 1
    APP = 2
    STORAGE = 3
    DB = 4

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "BASIC",
        2: "APP",
        3: "STORAGE",
        4: "DB",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "BASIC": 1,
        "APP": 2,
        "STORAGE": 3,
        "DB": 4,
    }


class ncTECMSManagerError(object):
    NCT_INVALID_ACCOUNT_OR_PASSWORD = 10001
    NCT_NODE_ALREADAY_IN_CLUSTER = 10002
    NCT_NIC_NOT_AVAILABLE = 10003
    NCT_SSH_TO_REMOTE_HOST_FAILED = 10004
    NCT_EXTERNAL_DB_NOT_AVAILABLE = 10005
    NCT_NODE_IS_OFFLINE = 10006
    NCT_NO_APPLICATION_NODE = 10007
    NCT_NO_AVAILABLE_APPLICATION_NODE = 10008
    NCT_INVALID_ARGUMENT = 20001
    NCT_INTERNAL_ERROR = 20002
    NCT_NOT_IN_SAME_SUNNET = 20006
    NCT_NOT_APPLICATION_NODE = 30001
    NCT_SERVICE_PACKAGE_MISSING = 30002
    NCT_SERVER_ALREADY_INSTALLED = 30003
    NCT_SERVER_NOT_INSTALLED = 30004

    _VALUES_TO_NAMES = {
        10001: "NCT_INVALID_ACCOUNT_OR_PASSWORD",
        10002: "NCT_NODE_ALREADAY_IN_CLUSTER",
        10003: "NCT_NIC_NOT_AVAILABLE",
        10004: "NCT_SSH_TO_REMOTE_HOST_FAILED",
        10005: "NCT_EXTERNAL_DB_NOT_AVAILABLE",
        10006: "NCT_NODE_IS_OFFLINE",
        10007: "NCT_NO_APPLICATION_NODE",
        10008: "NCT_NO_AVAILABLE_APPLICATION_NODE",
        20001: "NCT_INVALID_ARGUMENT",
        20002: "NCT_INTERNAL_ERROR",
        20006: "NCT_NOT_IN_SAME_SUNNET",
        30001: "NCT_NOT_APPLICATION_NODE",
        30002: "NCT_SERVICE_PACKAGE_MISSING",
        30003: "NCT_SERVER_ALREADY_INSTALLED",
        30004: "NCT_SERVER_NOT_INSTALLED",
    }

    _NAMES_TO_VALUES = {
        "NCT_INVALID_ACCOUNT_OR_PASSWORD": 10001,
        "NCT_NODE_ALREADAY_IN_CLUSTER": 10002,
        "NCT_NIC_NOT_AVAILABLE": 10003,
        "NCT_SSH_TO_REMOTE_HOST_FAILED": 10004,
        "NCT_EXTERNAL_DB_NOT_AVAILABLE": 10005,
        "NCT_NODE_IS_OFFLINE": 10006,
        "NCT_NO_APPLICATION_NODE": 10007,
        "NCT_NO_AVAILABLE_APPLICATION_NODE": 10008,
        "NCT_INVALID_ARGUMENT": 20001,
        "NCT_INTERNAL_ERROR": 20002,
        "NCT_NOT_IN_SAME_SUNNET": 20006,
        "NCT_NOT_APPLICATION_NODE": 30001,
        "NCT_SERVICE_PACKAGE_MISSING": 30002,
        "NCT_SERVER_ALREADY_INSTALLED": 30003,
        "NCT_SERVER_NOT_INSTALLED": 30004,
    }


class ncTClusterInfo(object):
    """
    集群基本信息

    Attributes:
     - cluster_uuid

    """


    def __init__(self, cluster_uuid="",):
        self.cluster_uuid = cluster_uuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cluster_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTClusterInfo')
        if self.cluster_uuid is not None:
            oprot.writeFieldBegin('cluster_uuid', TType.STRING, 1)
            oprot.writeString(self.cluster_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_uuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDBNodeInfo(object):
    """
    数据库节点结构

    Attributes:
     - node_uuid
     - node_alias
     - node_ip
     - db_role
     - service_status
     - slave_status
     - is_online

    """


    def __init__(self, node_uuid=None, node_alias="", node_ip=None, db_role=None, service_status=None, slave_status=None, is_online=None,):
        self.node_uuid = node_uuid
        self.node_alias = node_alias
        self.node_ip = node_ip
        self.db_role = db_role
        self.service_status = service_status
        self.slave_status = slave_status
        self.is_online = is_online

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_alias = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.node_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.db_role = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.service_status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.slave_status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.is_online = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDBNodeInfo')
        if self.node_uuid is not None:
            oprot.writeFieldBegin('node_uuid', TType.STRING, 1)
            oprot.writeString(self.node_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.node_uuid)
            oprot.writeFieldEnd()
        if self.node_alias is not None:
            oprot.writeFieldBegin('node_alias', TType.STRING, 2)
            oprot.writeString(self.node_alias.encode('utf-8') if sys.version_info[0] == 2 else self.node_alias)
            oprot.writeFieldEnd()
        if self.node_ip is not None:
            oprot.writeFieldBegin('node_ip', TType.STRING, 3)
            oprot.writeString(self.node_ip.encode('utf-8') if sys.version_info[0] == 2 else self.node_ip)
            oprot.writeFieldEnd()
        if self.db_role is not None:
            oprot.writeFieldBegin('db_role', TType.STRING, 4)
            oprot.writeString(self.db_role.encode('utf-8') if sys.version_info[0] == 2 else self.db_role)
            oprot.writeFieldEnd()
        if self.service_status is not None:
            oprot.writeFieldBegin('service_status', TType.STRING, 5)
            oprot.writeString(self.service_status.encode('utf-8') if sys.version_info[0] == 2 else self.service_status)
            oprot.writeFieldEnd()
        if self.slave_status is not None:
            oprot.writeFieldBegin('slave_status', TType.STRING, 6)
            oprot.writeString(self.slave_status.encode('utf-8') if sys.version_info[0] == 2 else self.slave_status)
            oprot.writeFieldEnd()
        if self.is_online is not None:
            oprot.writeFieldBegin('is_online', TType.BOOL, 7)
            oprot.writeBool(self.is_online)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAppNodeInfo(object):
    """
    应用节点结构

    Attributes:
     - node_uuid
     - node_alias
     - node_ip
     - service_status
     - lvs_status
     - is_online

    """


    def __init__(self, node_uuid=None, node_alias=None, node_ip=None, service_status=None, lvs_status=None, is_online=None,):
        self.node_uuid = node_uuid
        self.node_alias = node_alias
        self.node_ip = node_ip
        self.service_status = service_status
        self.lvs_status = lvs_status
        self.is_online = is_online

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_alias = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.node_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.service_status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.lvs_status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_online = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAppNodeInfo')
        if self.node_uuid is not None:
            oprot.writeFieldBegin('node_uuid', TType.STRING, 1)
            oprot.writeString(self.node_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.node_uuid)
            oprot.writeFieldEnd()
        if self.node_alias is not None:
            oprot.writeFieldBegin('node_alias', TType.STRING, 2)
            oprot.writeString(self.node_alias.encode('utf-8') if sys.version_info[0] == 2 else self.node_alias)
            oprot.writeFieldEnd()
        if self.node_ip is not None:
            oprot.writeFieldBegin('node_ip', TType.STRING, 3)
            oprot.writeString(self.node_ip.encode('utf-8') if sys.version_info[0] == 2 else self.node_ip)
            oprot.writeFieldEnd()
        if self.service_status is not None:
            oprot.writeFieldBegin('service_status', TType.BOOL, 4)
            oprot.writeBool(self.service_status)
            oprot.writeFieldEnd()
        if self.lvs_status is not None:
            oprot.writeFieldBegin('lvs_status', TType.BOOL, 5)
            oprot.writeBool(self.lvs_status)
            oprot.writeFieldEnd()
        if self.is_online is not None:
            oprot.writeFieldBegin('is_online', TType.BOOL, 6)
            oprot.writeBool(self.is_online)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTStorageNodeInfo(object):
    """
    存储节点结构

    Attributes:
     - node_uuid
     - node_alias
     - node_ip
     - service_status
     - lvs_status
     - is_online

    """


    def __init__(self, node_uuid=None, node_alias=None, node_ip=None, service_status=None, lvs_status=None, is_online=None,):
        self.node_uuid = node_uuid
        self.node_alias = node_alias
        self.node_ip = node_ip
        self.service_status = service_status
        self.lvs_status = lvs_status
        self.is_online = is_online

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_alias = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.node_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.service_status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.lvs_status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_online = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTStorageNodeInfo')
        if self.node_uuid is not None:
            oprot.writeFieldBegin('node_uuid', TType.STRING, 1)
            oprot.writeString(self.node_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.node_uuid)
            oprot.writeFieldEnd()
        if self.node_alias is not None:
            oprot.writeFieldBegin('node_alias', TType.STRING, 2)
            oprot.writeString(self.node_alias.encode('utf-8') if sys.version_info[0] == 2 else self.node_alias)
            oprot.writeFieldEnd()
        if self.node_ip is not None:
            oprot.writeFieldBegin('node_ip', TType.STRING, 3)
            oprot.writeString(self.node_ip.encode('utf-8') if sys.version_info[0] == 2 else self.node_ip)
            oprot.writeFieldEnd()
        if self.service_status is not None:
            oprot.writeFieldBegin('service_status', TType.BOOL, 4)
            oprot.writeBool(self.service_status)
            oprot.writeFieldEnd()
        if self.lvs_status is not None:
            oprot.writeFieldBegin('lvs_status', TType.BOOL, 5)
            oprot.writeBool(self.lvs_status)
            oprot.writeFieldEnd()
        if self.is_online is not None:
            oprot.writeFieldBegin('is_online', TType.BOOL, 6)
            oprot.writeBool(self.is_online)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAppServiceInfo(object):
    """
    Attributes:
     - name
     - port
     - is_lvs

    """


    def __init__(self, name=None, port=None, is_lvs=None,):
        self.name = name
        self.port = port
        self.is_lvs = is_lvs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.is_lvs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAppServiceInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.is_lvs is not None:
            oprot.writeFieldBegin('is_lvs', TType.BOOL, 3)
            oprot.writeBool(self.is_lvs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTVipInfo(object):
    """
    vip信息

    Attributes:
     - vip
     - mask
     - nic
     - sys

    """


    def __init__(self, vip="", mask="", nic="", sys=1,):
        self.vip = vip
        self.mask = mask
        self.nic = nic
        self.sys = sys

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nic = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.sys = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTVipInfo')
        if self.vip is not None:
            oprot.writeFieldBegin('vip', TType.STRING, 1)
            oprot.writeString(self.vip.encode('utf-8') if sys.version_info[0] == 2 else self.vip)
            oprot.writeFieldEnd()
        if self.mask is not None:
            oprot.writeFieldBegin('mask', TType.STRING, 2)
            oprot.writeString(self.mask.encode('utf-8') if sys.version_info[0] == 2 else self.mask)
            oprot.writeFieldEnd()
        if self.nic is not None:
            oprot.writeFieldBegin('nic', TType.STRING, 3)
            oprot.writeString(self.nic.encode('utf-8') if sys.version_info[0] == 2 else self.nic)
            oprot.writeFieldEnd()
        if self.sys is not None:
            oprot.writeFieldBegin('sys', TType.I32, 4)
            oprot.writeI32(self.sys)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTHaNodeInfo(object):
    """
    高可用节点结构

    Attributes:
     - node_uuid
     - node_alias
     - node_ip
     - is_online
     - is_master
     - sys

    """


    def __init__(self, node_uuid="", node_alias="", node_ip="", is_online=True, is_master=False, sys=1,):
        self.node_uuid = node_uuid
        self.node_alias = node_alias
        self.node_ip = node_ip
        self.is_online = is_online
        self.is_master = is_master
        self.sys = sys

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_alias = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.node_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.is_online = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.is_master = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.sys = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTHaNodeInfo')
        if self.node_uuid is not None:
            oprot.writeFieldBegin('node_uuid', TType.STRING, 1)
            oprot.writeString(self.node_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.node_uuid)
            oprot.writeFieldEnd()
        if self.node_alias is not None:
            oprot.writeFieldBegin('node_alias', TType.STRING, 2)
            oprot.writeString(self.node_alias.encode('utf-8') if sys.version_info[0] == 2 else self.node_alias)
            oprot.writeFieldEnd()
        if self.node_ip is not None:
            oprot.writeFieldBegin('node_ip', TType.STRING, 3)
            oprot.writeString(self.node_ip.encode('utf-8') if sys.version_info[0] == 2 else self.node_ip)
            oprot.writeFieldEnd()
        if self.is_online is not None:
            oprot.writeFieldBegin('is_online', TType.BOOL, 4)
            oprot.writeBool(self.is_online)
            oprot.writeFieldEnd()
        if self.is_master is not None:
            oprot.writeFieldBegin('is_master', TType.BOOL, 5)
            oprot.writeBool(self.is_master)
            oprot.writeFieldEnd()
        if self.sys is not None:
            oprot.writeFieldBegin('sys', TType.I32, 6)
            oprot.writeI32(self.sys)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTNodeInfo(object):
    """
    节点信息结构

    Attributes:
     - node_uuid
     - role_db
     - role_ecms
     - role_app
     - role_storage
     - node_alias
     - node_ip
     - is_online
     - is_ha
     - is_etcd
     - consistency_status

    """


    def __init__(self, node_uuid="", role_db=0, role_ecms=0, role_app=0, role_storage=0, node_alias="", node_ip="", is_online=True, is_ha=0, is_etcd=0, consistency_status=True,):
        self.node_uuid = node_uuid
        self.role_db = role_db
        self.role_ecms = role_ecms
        self.role_app = role_app
        self.role_storage = role_storage
        self.node_alias = node_alias
        self.node_ip = node_ip
        self.is_online = is_online
        self.is_ha = is_ha
        self.is_etcd = is_etcd
        self.consistency_status = consistency_status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.role_db = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.role_ecms = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.role_app = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.role_storage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.node_alias = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.node_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.is_online = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.is_ha = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.is_etcd = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.consistency_status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTNodeInfo')
        if self.node_uuid is not None:
            oprot.writeFieldBegin('node_uuid', TType.STRING, 1)
            oprot.writeString(self.node_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.node_uuid)
            oprot.writeFieldEnd()
        if self.role_db is not None:
            oprot.writeFieldBegin('role_db', TType.I32, 2)
            oprot.writeI32(self.role_db)
            oprot.writeFieldEnd()
        if self.role_ecms is not None:
            oprot.writeFieldBegin('role_ecms', TType.I32, 3)
            oprot.writeI32(self.role_ecms)
            oprot.writeFieldEnd()
        if self.role_app is not None:
            oprot.writeFieldBegin('role_app', TType.I32, 4)
            oprot.writeI32(self.role_app)
            oprot.writeFieldEnd()
        if self.role_storage is not None:
            oprot.writeFieldBegin('role_storage', TType.I32, 5)
            oprot.writeI32(self.role_storage)
            oprot.writeFieldEnd()
        if self.node_alias is not None:
            oprot.writeFieldBegin('node_alias', TType.STRING, 6)
            oprot.writeString(self.node_alias.encode('utf-8') if sys.version_info[0] == 2 else self.node_alias)
            oprot.writeFieldEnd()
        if self.node_ip is not None:
            oprot.writeFieldBegin('node_ip', TType.STRING, 7)
            oprot.writeString(self.node_ip.encode('utf-8') if sys.version_info[0] == 2 else self.node_ip)
            oprot.writeFieldEnd()
        if self.is_online is not None:
            oprot.writeFieldBegin('is_online', TType.BOOL, 8)
            oprot.writeBool(self.is_online)
            oprot.writeFieldEnd()
        if self.is_ha is not None:
            oprot.writeFieldBegin('is_ha', TType.I32, 9)
            oprot.writeI32(self.is_ha)
            oprot.writeFieldEnd()
        if self.is_etcd is not None:
            oprot.writeFieldBegin('is_etcd', TType.I32, 10)
            oprot.writeI32(self.is_etcd)
            oprot.writeFieldEnd()
        if self.consistency_status is not None:
            oprot.writeFieldBegin('consistency_status', TType.BOOL, 11)
            oprot.writeBool(self.consistency_status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTFirewallInfo(object):
    """
    防火墙信息结构

    Attributes:
     - port
     - protocol
     - source_net
     - dest_net
     - role_sys
     - service_desc

    """


    def __init__(self, port=0, protocol="tcp", source_net="", dest_net="", role_sys="", service_desc="",):
        self.port = port
        self.protocol = protocol
        self.source_net = source_net
        self.dest_net = dest_net
        self.role_sys = role_sys
        self.service_desc = service_desc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.protocol = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.source_net = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.dest_net = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.role_sys = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.service_desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTFirewallInfo')
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 1)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.protocol is not None:
            oprot.writeFieldBegin('protocol', TType.STRING, 2)
            oprot.writeString(self.protocol.encode('utf-8') if sys.version_info[0] == 2 else self.protocol)
            oprot.writeFieldEnd()
        if self.source_net is not None:
            oprot.writeFieldBegin('source_net', TType.STRING, 3)
            oprot.writeString(self.source_net.encode('utf-8') if sys.version_info[0] == 2 else self.source_net)
            oprot.writeFieldEnd()
        if self.dest_net is not None:
            oprot.writeFieldBegin('dest_net', TType.STRING, 4)
            oprot.writeString(self.dest_net.encode('utf-8') if sys.version_info[0] == 2 else self.dest_net)
            oprot.writeFieldEnd()
        if self.role_sys is not None:
            oprot.writeFieldBegin('role_sys', TType.STRING, 5)
            oprot.writeString(self.role_sys.encode('utf-8') if sys.version_info[0] == 2 else self.role_sys)
            oprot.writeFieldEnd()
        if self.service_desc is not None:
            oprot.writeFieldBegin('service_desc', TType.STRING, 6)
            oprot.writeString(self.service_desc.encode('utf-8') if sys.version_info[0] == 2 else self.service_desc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTStoragePoolDevice(object):
    """
    存储池设备信息

    Attributes:
     - swift_device
     - data_volume

    """


    def __init__(self, swift_device=None, data_volume=None,):
        self.swift_device = swift_device
        self.data_volume = data_volume

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.swift_device = ECMSAgent.ttypes.ncTSwiftDevice()
                    self.swift_device.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.data_volume = ECMSAgent.ttypes.ncTDataVolume()
                    self.data_volume.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTStoragePoolDevice')
        if self.swift_device is not None:
            oprot.writeFieldBegin('swift_device', TType.STRUCT, 1)
            self.swift_device.write(oprot)
            oprot.writeFieldEnd()
        if self.data_volume is not None:
            oprot.writeFieldBegin('data_volume', TType.STRUCT, 2)
            self.data_volume.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.swift_device is None:
            raise TProtocolException(message='Required field swift_device is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTStoragePool(object):
    """
    存储池信息

    Attributes:
     - ring
     - logical_used_size_gb
     - physical_used_size_gb

    """


    def __init__(self, ring=None, logical_used_size_gb=None, physical_used_size_gb=None,):
        self.ring = ring
        self.logical_used_size_gb = logical_used_size_gb
        self.physical_used_size_gb = physical_used_size_gb

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ring = ECMSAgent.ttypes.ncTSwiftRing()
                    self.ring.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.logical_used_size_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.physical_used_size_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTStoragePool')
        if self.ring is not None:
            oprot.writeFieldBegin('ring', TType.STRUCT, 1)
            self.ring.write(oprot)
            oprot.writeFieldEnd()
        if self.logical_used_size_gb is not None:
            oprot.writeFieldBegin('logical_used_size_gb', TType.DOUBLE, 2)
            oprot.writeDouble(self.logical_used_size_gb)
            oprot.writeFieldEnd()
        if self.physical_used_size_gb is not None:
            oprot.writeFieldBegin('physical_used_size_gb', TType.DOUBLE, 3)
            oprot.writeDouble(self.physical_used_size_gb)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ring is None:
            raise TProtocolException(message='Required field ring is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTCephStorageInfo(object):
    """
    本地 Ceph 存储信息

    Attributes:
     - used_size_gb
     - capacity_gb

    """


    def __init__(self, used_size_gb=None, capacity_gb=None,):
        self.used_size_gb = used_size_gb
        self.capacity_gb = capacity_gb

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.used_size_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.capacity_gb = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTCephStorageInfo')
        if self.used_size_gb is not None:
            oprot.writeFieldBegin('used_size_gb', TType.DOUBLE, 1)
            oprot.writeDouble(self.used_size_gb)
            oprot.writeFieldEnd()
        if self.capacity_gb is not None:
            oprot.writeFieldBegin('capacity_gb', TType.DOUBLE, 2)
            oprot.writeDouble(self.capacity_gb)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTConfFileInfo(object):
    """
    Attributes:
     - conf_file_path
     - conf_file_md5
     - modified_time

    """


    def __init__(self, conf_file_path=None, conf_file_md5=None, modified_time=None,):
        self.conf_file_path = conf_file_path
        self.conf_file_md5 = conf_file_md5
        self.modified_time = modified_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.conf_file_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.conf_file_md5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.modified_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTConfFileInfo')
        if self.conf_file_path is not None:
            oprot.writeFieldBegin('conf_file_path', TType.STRING, 1)
            oprot.writeString(self.conf_file_path.encode('utf-8') if sys.version_info[0] == 2 else self.conf_file_path)
            oprot.writeFieldEnd()
        if self.conf_file_md5 is not None:
            oprot.writeFieldBegin('conf_file_md5', TType.STRING, 2)
            oprot.writeString(self.conf_file_md5.encode('utf-8') if sys.version_info[0] == 2 else self.conf_file_md5)
            oprot.writeFieldEnd()
        if self.modified_time is not None:
            oprot.writeFieldBegin('modified_time', TType.STRING, 3)
            oprot.writeString(self.modified_time.encode('utf-8') if sys.version_info[0] == 2 else self.modified_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTMonitorProblemRecord(object):
    """
    Attributes:
     - objectid
     - description
     - timestamp
     - timestamp_recovery
     - value
     - minimum
     - maximum

    """


    def __init__(self, objectid=None, description=None, timestamp=None, timestamp_recovery=None, value=None, minimum=None, maximum=None,):
        self.objectid = objectid
        self.description = description
        self.timestamp = timestamp
        self.timestamp_recovery = timestamp_recovery
        self.value = value
        self.minimum = minimum
        self.maximum = maximum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.objectid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.timestamp_recovery = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.value = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.minimum = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.maximum = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTMonitorProblemRecord')
        if self.objectid is not None:
            oprot.writeFieldBegin('objectid', TType.I64, 1)
            oprot.writeI64(self.objectid)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 2)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.timestamp_recovery is not None:
            oprot.writeFieldBegin('timestamp_recovery', TType.I64, 4)
            oprot.writeI64(self.timestamp_recovery)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BOOL, 5)
            oprot.writeBool(self.value)
            oprot.writeFieldEnd()
        if self.minimum is not None:
            oprot.writeFieldBegin('minimum', TType.DOUBLE, 6)
            oprot.writeDouble(self.minimum)
            oprot.writeFieldEnd()
        if self.maximum is not None:
            oprot.writeFieldBegin('maximum', TType.DOUBLE, 7)
            oprot.writeDouble(self.maximum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTNodeServer(object):
    """
    Attributes:
     - uuid
     - services

    """


    def __init__(self, uuid=None, services=None,):
        self.uuid = uuid
        self.services = services

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.services = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.services.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTNodeServer')
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 1)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.services is not None:
            oprot.writeFieldBegin('services', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.services))
            for iter6 in self.services:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTClusterInfo)
ncTClusterInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cluster_uuid', 'UTF8', "", ),  # 1
)
all_structs.append(ncTDBNodeInfo)
ncTDBNodeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_uuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_alias', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'node_ip', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'db_role', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'service_status', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'slave_status', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'is_online', None, None, ),  # 7
)
all_structs.append(ncTAppNodeInfo)
ncTAppNodeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_uuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_alias', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'node_ip', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'service_status', None, None, ),  # 4
    (5, TType.BOOL, 'lvs_status', None, None, ),  # 5
    (6, TType.BOOL, 'is_online', None, None, ),  # 6
)
all_structs.append(ncTStorageNodeInfo)
ncTStorageNodeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_uuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_alias', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'node_ip', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'service_status', None, None, ),  # 4
    (5, TType.BOOL, 'lvs_status', None, None, ),  # 5
    (6, TType.BOOL, 'is_online', None, None, ),  # 6
)
all_structs.append(ncTAppServiceInfo)
ncTAppServiceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'port', None, None, ),  # 2
    (3, TType.BOOL, 'is_lvs', None, None, ),  # 3
)
all_structs.append(ncTVipInfo)
ncTVipInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vip', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'mask', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'nic', 'UTF8', "", ),  # 3
    (4, TType.I32, 'sys', None, 1, ),  # 4
)
all_structs.append(ncTHaNodeInfo)
ncTHaNodeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_uuid', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'node_alias', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'node_ip', 'UTF8', "", ),  # 3
    (4, TType.BOOL, 'is_online', None, True, ),  # 4
    (5, TType.BOOL, 'is_master', None, False, ),  # 5
    (6, TType.I32, 'sys', None, 1, ),  # 6
)
all_structs.append(ncTNodeInfo)
ncTNodeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_uuid', 'UTF8', "", ),  # 1
    (2, TType.I32, 'role_db', None, 0, ),  # 2
    (3, TType.I32, 'role_ecms', None, 0, ),  # 3
    (4, TType.I32, 'role_app', None, 0, ),  # 4
    (5, TType.I32, 'role_storage', None, 0, ),  # 5
    (6, TType.STRING, 'node_alias', 'UTF8', "", ),  # 6
    (7, TType.STRING, 'node_ip', 'UTF8', "", ),  # 7
    (8, TType.BOOL, 'is_online', None, True, ),  # 8
    (9, TType.I32, 'is_ha', None, 0, ),  # 9
    (10, TType.I32, 'is_etcd', None, 0, ),  # 10
    (11, TType.BOOL, 'consistency_status', None, True, ),  # 11
)
all_structs.append(ncTFirewallInfo)
ncTFirewallInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'port', None, 0, ),  # 1
    (2, TType.STRING, 'protocol', 'UTF8', "tcp", ),  # 2
    (3, TType.STRING, 'source_net', 'UTF8', "", ),  # 3
    (4, TType.STRING, 'dest_net', 'UTF8', "", ),  # 4
    (5, TType.STRING, 'role_sys', 'UTF8', "", ),  # 5
    (6, TType.STRING, 'service_desc', 'UTF8', "", ),  # 6
)
all_structs.append(ncTStoragePoolDevice)
ncTStoragePoolDevice.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'swift_device', [ECMSAgent.ttypes.ncTSwiftDevice, None], None, ),  # 1
    (2, TType.STRUCT, 'data_volume', [ECMSAgent.ttypes.ncTDataVolume, None], None, ),  # 2
)
all_structs.append(ncTStoragePool)
ncTStoragePool.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ring', [ECMSAgent.ttypes.ncTSwiftRing, None], None, ),  # 1
    (2, TType.DOUBLE, 'logical_used_size_gb', None, None, ),  # 2
    (3, TType.DOUBLE, 'physical_used_size_gb', None, None, ),  # 3
)
all_structs.append(ncTCephStorageInfo)
ncTCephStorageInfo.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'used_size_gb', None, None, ),  # 1
    (2, TType.DOUBLE, 'capacity_gb', None, None, ),  # 2
)
all_structs.append(ncTConfFileInfo)
ncTConfFileInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'conf_file_path', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'conf_file_md5', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'modified_time', 'UTF8', None, ),  # 3
)
all_structs.append(ncTMonitorProblemRecord)
ncTMonitorProblemRecord.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'objectid', None, None, ),  # 1
    (2, TType.STRING, 'description', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
    (4, TType.I64, 'timestamp_recovery', None, None, ),  # 4
    (5, TType.BOOL, 'value', None, None, ),  # 5
    (6, TType.DOUBLE, 'minimum', None, None, ),  # 6
    (7, TType.DOUBLE, 'maximum', None, None, ),  # 7
)
all_structs.append(ncTNodeServer)
ncTNodeServer.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uuid', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'services', (TType.STRING, 'UTF8', False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
