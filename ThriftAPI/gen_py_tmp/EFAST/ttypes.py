#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTServiceState(object):
    NCT_SERVICE_RUN_STATE = 0
    NCT_SERVICE_STOP_STATE = 1

    _VALUES_TO_NAMES = {
        0: "NCT_SERVICE_RUN_STATE",
        1: "NCT_SERVICE_STOP_STATE",
    }

    _NAMES_TO_VALUES = {
        "NCT_SERVICE_RUN_STATE": 0,
        "NCT_SERVICE_STOP_STATE": 1,
    }


class ncTSortKey(object):
    NCT_NAME = 1
    NCT_LIBTYPE = 2
    NCT_CREATER = 3
    NCT_OWNER = 4
    NCT_USEDSPACERATE = 5
    NCT_ORDER = 6
    NCT_NO = 0

    _VALUES_TO_NAMES = {
        1: "NCT_NAME",
        2: "NCT_LIBTYPE",
        3: "NCT_CREATER",
        4: "NCT_OWNER",
        5: "NCT_USEDSPACERATE",
        6: "NCT_ORDER",
        0: "NCT_NO",
    }

    _NAMES_TO_VALUES = {
        "NCT_NAME": 1,
        "NCT_LIBTYPE": 2,
        "NCT_CREATER": 3,
        "NCT_OWNER": 4,
        "NCT_USEDSPACERATE": 5,
        "NCT_ORDER": 6,
        "NCT_NO": 0,
    }


class ncTSortType(object):
    NCT_SORT_DESC = 0
    NCT_SORT_ASC = 1

    _VALUES_TO_NAMES = {
        0: "NCT_SORT_DESC",
        1: "NCT_SORT_ASC",
    }

    _NAMES_TO_VALUES = {
        "NCT_SORT_DESC": 0,
        "NCT_SORT_ASC": 1,
    }


class ncTEFASTError(object):
    NCT_FAILED_TO_GET_EFAST_DISPATCHER = 10001
    NCT_FAILED_TO_GET_NET_SERVER = 10002
    NCT_EFAST_PTHREAD_CREATE_ERROR = 10003
    NCT_EFASTSERVER_HAS_INIT_ERROR = 10004
    NCT_EFASTSERVER_NOT_INIT_ERROR = 10005
    NCT_FAILED_TO_GET_EFTSEARCH_SERVER = 10006
    NCT_SAME_HTTP_AND_HTTPS_PORT_ERROR = 10007
    FAILED_TO_CREATE_DB_EDOC_MANANGER = 20001
    FAILED_TO_CREATE_ENTRY_DOC_MANAGER = 20002
    FAILED_TO_CREATE_ENTRY_DOC_IOC = 20003
    SPACE_EXCEEDS_THE_MAX_LIMIT = 20004
    NCT_INVALID_QUOTA = 20005
    SET_QUOTA_ERROR = 20006
    UPDATE_MANAGER_SPACE_ERROR = 20007
    NCT_SITE_NOT_EXIST = 20008
    NCT_SITE_HAS_BEEN_MOVED = 20009
    NCT_MUTITENANT_CREATER_BELONG_ONE_OU = 20010
    CANT_SET_ADMIN_TO_OWNER = 20011
    NCT_MUTITENANT_OWNER_BELONG_ONE_OU = 20012
    NCT_MUTITENANT_OWNER_CREATER_BELONG_ONE_OU = 20013
    NCT_DEPARTMENT_NOT_EXIST = 20014
    NCT_DEPART_HAS_RELATE_CUSTOM_DOC = 20015
    NCT_INVALID_PERM_VALUE = 20016
    NCT_TIME_AHEAD_SERVER_TIME = 20017
    NCT_CONFLICATED_WITH_ARCHIVE_DOC_NAME = 20019
    NCT_CONFLICATED_WITH_CUSTOM_DOC_NAME = 20020
    NCT_CONFLICATED_WITH_USER_DOC_NAME = 20021
    CREATER_NOT_EXISTS = 20022
    NCT_USER_NOT_REAL_NAME_AUTH = 20023
    NON_MANAGER_CANT_CREATE = 20024
    NO_OWNER = 20025
    OWNER_NOT_EXISTS = 20026
    OWNER_DISABLE = 20027
    NCT_INVALID_DOC_LIB_NAME = 20028
    NCT_INVALID_DOC_LIB_TYPE_NAME = 20029
    NCT_OBJ_ID_EXISTS = 20030
    EDITER_NOT_EXISTS = 20031
    DOC_ID_NOT_EXISTS = 20032
    NOT_CREATER_CANT_EDIT = 20033
    GET_QUOTA_ERROR = 20034
    NOT_CREATER_CANT_DELETE = 20035
    NCT_INVALID_LIMIT_VALUE = 20036
    NCT_USER_CANNOT_BATCH_ADD_DOC = 20037
    NCT_NO_SELECT_DEPARTMENT = 20038
    NCT_INVALID_DEPARTMENT_LEVEL = 20039
    NCT_OTHER_TASK_IS_PROCESSING = 20040
    NCT_TASK_NOT_EXIST_OR_TIME_OUT = 20041
    NCT_CUSTOM_DOC_DISPLAY_ORDER_INVALID = 20042
    CHECK_ARCHIVE_DOC_EMPTY_ERROR = 20043
    ARCHIVE_DOC_NOT_EMPTY = 20044
    NCT_ARCHIVE_DOC_NOT_SUPPORT_TYPE_SORT = 20045
    USER_DOC_NOT_EXISTS = 20046
    NOT_MOVABLE_DOC_TYPE = 20047
    QUOTA_NOT_ENOUGH = 20048
    INVALID_DOC_TYPE = 20049
    USER_NOT_EXISTS = 20050
    USER_DOC_EXISTS = 20051
    NCT_ENTRY_DOC_NOT_EXIST = 20052
    DELETER_NOT_EXISTS = 20053

    _VALUES_TO_NAMES = {
        10001: "NCT_FAILED_TO_GET_EFAST_DISPATCHER",
        10002: "NCT_FAILED_TO_GET_NET_SERVER",
        10003: "NCT_EFAST_PTHREAD_CREATE_ERROR",
        10004: "NCT_EFASTSERVER_HAS_INIT_ERROR",
        10005: "NCT_EFASTSERVER_NOT_INIT_ERROR",
        10006: "NCT_FAILED_TO_GET_EFTSEARCH_SERVER",
        10007: "NCT_SAME_HTTP_AND_HTTPS_PORT_ERROR",
        20001: "FAILED_TO_CREATE_DB_EDOC_MANANGER",
        20002: "FAILED_TO_CREATE_ENTRY_DOC_MANAGER",
        20003: "FAILED_TO_CREATE_ENTRY_DOC_IOC",
        20004: "SPACE_EXCEEDS_THE_MAX_LIMIT",
        20005: "NCT_INVALID_QUOTA",
        20006: "SET_QUOTA_ERROR",
        20007: "UPDATE_MANAGER_SPACE_ERROR",
        20008: "NCT_SITE_NOT_EXIST",
        20009: "NCT_SITE_HAS_BEEN_MOVED",
        20010: "NCT_MUTITENANT_CREATER_BELONG_ONE_OU",
        20011: "CANT_SET_ADMIN_TO_OWNER",
        20012: "NCT_MUTITENANT_OWNER_BELONG_ONE_OU",
        20013: "NCT_MUTITENANT_OWNER_CREATER_BELONG_ONE_OU",
        20014: "NCT_DEPARTMENT_NOT_EXIST",
        20015: "NCT_DEPART_HAS_RELATE_CUSTOM_DOC",
        20016: "NCT_INVALID_PERM_VALUE",
        20017: "NCT_TIME_AHEAD_SERVER_TIME",
        20019: "NCT_CONFLICATED_WITH_ARCHIVE_DOC_NAME",
        20020: "NCT_CONFLICATED_WITH_CUSTOM_DOC_NAME",
        20021: "NCT_CONFLICATED_WITH_USER_DOC_NAME",
        20022: "CREATER_NOT_EXISTS",
        20023: "NCT_USER_NOT_REAL_NAME_AUTH",
        20024: "NON_MANAGER_CANT_CREATE",
        20025: "NO_OWNER",
        20026: "OWNER_NOT_EXISTS",
        20027: "OWNER_DISABLE",
        20028: "NCT_INVALID_DOC_LIB_NAME",
        20029: "NCT_INVALID_DOC_LIB_TYPE_NAME",
        20030: "NCT_OBJ_ID_EXISTS",
        20031: "EDITER_NOT_EXISTS",
        20032: "DOC_ID_NOT_EXISTS",
        20033: "NOT_CREATER_CANT_EDIT",
        20034: "GET_QUOTA_ERROR",
        20035: "NOT_CREATER_CANT_DELETE",
        20036: "NCT_INVALID_LIMIT_VALUE",
        20037: "NCT_USER_CANNOT_BATCH_ADD_DOC",
        20038: "NCT_NO_SELECT_DEPARTMENT",
        20039: "NCT_INVALID_DEPARTMENT_LEVEL",
        20040: "NCT_OTHER_TASK_IS_PROCESSING",
        20041: "NCT_TASK_NOT_EXIST_OR_TIME_OUT",
        20042: "NCT_CUSTOM_DOC_DISPLAY_ORDER_INVALID",
        20043: "CHECK_ARCHIVE_DOC_EMPTY_ERROR",
        20044: "ARCHIVE_DOC_NOT_EMPTY",
        20045: "NCT_ARCHIVE_DOC_NOT_SUPPORT_TYPE_SORT",
        20046: "USER_DOC_NOT_EXISTS",
        20047: "NOT_MOVABLE_DOC_TYPE",
        20048: "QUOTA_NOT_ENOUGH",
        20049: "INVALID_DOC_TYPE",
        20050: "USER_NOT_EXISTS",
        20051: "USER_DOC_EXISTS",
        20052: "NCT_ENTRY_DOC_NOT_EXIST",
        20053: "DELETER_NOT_EXISTS",
    }

    _NAMES_TO_VALUES = {
        "NCT_FAILED_TO_GET_EFAST_DISPATCHER": 10001,
        "NCT_FAILED_TO_GET_NET_SERVER": 10002,
        "NCT_EFAST_PTHREAD_CREATE_ERROR": 10003,
        "NCT_EFASTSERVER_HAS_INIT_ERROR": 10004,
        "NCT_EFASTSERVER_NOT_INIT_ERROR": 10005,
        "NCT_FAILED_TO_GET_EFTSEARCH_SERVER": 10006,
        "NCT_SAME_HTTP_AND_HTTPS_PORT_ERROR": 10007,
        "FAILED_TO_CREATE_DB_EDOC_MANANGER": 20001,
        "FAILED_TO_CREATE_ENTRY_DOC_MANAGER": 20002,
        "FAILED_TO_CREATE_ENTRY_DOC_IOC": 20003,
        "SPACE_EXCEEDS_THE_MAX_LIMIT": 20004,
        "NCT_INVALID_QUOTA": 20005,
        "SET_QUOTA_ERROR": 20006,
        "UPDATE_MANAGER_SPACE_ERROR": 20007,
        "NCT_SITE_NOT_EXIST": 20008,
        "NCT_SITE_HAS_BEEN_MOVED": 20009,
        "NCT_MUTITENANT_CREATER_BELONG_ONE_OU": 20010,
        "CANT_SET_ADMIN_TO_OWNER": 20011,
        "NCT_MUTITENANT_OWNER_BELONG_ONE_OU": 20012,
        "NCT_MUTITENANT_OWNER_CREATER_BELONG_ONE_OU": 20013,
        "NCT_DEPARTMENT_NOT_EXIST": 20014,
        "NCT_DEPART_HAS_RELATE_CUSTOM_DOC": 20015,
        "NCT_INVALID_PERM_VALUE": 20016,
        "NCT_TIME_AHEAD_SERVER_TIME": 20017,
        "NCT_CONFLICATED_WITH_ARCHIVE_DOC_NAME": 20019,
        "NCT_CONFLICATED_WITH_CUSTOM_DOC_NAME": 20020,
        "NCT_CONFLICATED_WITH_USER_DOC_NAME": 20021,
        "CREATER_NOT_EXISTS": 20022,
        "NCT_USER_NOT_REAL_NAME_AUTH": 20023,
        "NON_MANAGER_CANT_CREATE": 20024,
        "NO_OWNER": 20025,
        "OWNER_NOT_EXISTS": 20026,
        "OWNER_DISABLE": 20027,
        "NCT_INVALID_DOC_LIB_NAME": 20028,
        "NCT_INVALID_DOC_LIB_TYPE_NAME": 20029,
        "NCT_OBJ_ID_EXISTS": 20030,
        "EDITER_NOT_EXISTS": 20031,
        "DOC_ID_NOT_EXISTS": 20032,
        "NOT_CREATER_CANT_EDIT": 20033,
        "GET_QUOTA_ERROR": 20034,
        "NOT_CREATER_CANT_DELETE": 20035,
        "NCT_INVALID_LIMIT_VALUE": 20036,
        "NCT_USER_CANNOT_BATCH_ADD_DOC": 20037,
        "NCT_NO_SELECT_DEPARTMENT": 20038,
        "NCT_INVALID_DEPARTMENT_LEVEL": 20039,
        "NCT_OTHER_TASK_IS_PROCESSING": 20040,
        "NCT_TASK_NOT_EXIST_OR_TIME_OUT": 20041,
        "NCT_CUSTOM_DOC_DISPLAY_ORDER_INVALID": 20042,
        "CHECK_ARCHIVE_DOC_EMPTY_ERROR": 20043,
        "ARCHIVE_DOC_NOT_EMPTY": 20044,
        "NCT_ARCHIVE_DOC_NOT_SUPPORT_TYPE_SORT": 20045,
        "USER_DOC_NOT_EXISTS": 20046,
        "NOT_MOVABLE_DOC_TYPE": 20047,
        "QUOTA_NOT_ENOUGH": 20048,
        "INVALID_DOC_TYPE": 20049,
        "USER_NOT_EXISTS": 20050,
        "USER_DOC_EXISTS": 20051,
        "NCT_ENTRY_DOC_NOT_EXIST": 20052,
        "DELETER_NOT_EXISTS": 20053,
    }


class ncTDepartPerm(object):
    """
    Attributes:
     - permValue
     - endTime

    """


    def __init__(self, permValue=None, endTime=None,):
        self.permValue = permValue
        self.endTime = endTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.permValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDepartPerm')
        if self.permValue is not None:
            oprot.writeFieldBegin('permValue', TType.I32, 1)
            oprot.writeI32(self.permValue)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 2)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAddCustomDocParam(object):
    """
    Attributes:
     - name
     - typeName
     - createrId
     - ownerIds
     - spaceQuota
     - siteId
     - relateDepartId
     - perm

    """


    def __init__(self, name=None, typeName=None, createrId=None, ownerIds=None, spaceQuota=None, siteId=None, relateDepartId=None, perm=None,):
        self.name = name
        self.typeName = typeName
        self.createrId = createrId
        self.ownerIds = ownerIds
        self.spaceQuota = spaceQuota
        self.siteId = siteId
        self.relateDepartId = relateDepartId
        self.perm = perm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.typeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.createrId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.ownerIds = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ownerIds.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.spaceQuota = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.siteId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.relateDepartId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.perm = ncTDepartPerm()
                    self.perm.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAddCustomDocParam')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.typeName is not None:
            oprot.writeFieldBegin('typeName', TType.STRING, 2)
            oprot.writeString(self.typeName.encode('utf-8') if sys.version_info[0] == 2 else self.typeName)
            oprot.writeFieldEnd()
        if self.createrId is not None:
            oprot.writeFieldBegin('createrId', TType.STRING, 3)
            oprot.writeString(self.createrId.encode('utf-8') if sys.version_info[0] == 2 else self.createrId)
            oprot.writeFieldEnd()
        if self.ownerIds is not None:
            oprot.writeFieldBegin('ownerIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.ownerIds))
            for iter6 in self.ownerIds:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.spaceQuota is not None:
            oprot.writeFieldBegin('spaceQuota', TType.I64, 5)
            oprot.writeI64(self.spaceQuota)
            oprot.writeFieldEnd()
        if self.siteId is not None:
            oprot.writeFieldBegin('siteId', TType.STRING, 6)
            oprot.writeString(self.siteId.encode('utf-8') if sys.version_info[0] == 2 else self.siteId)
            oprot.writeFieldEnd()
        if self.relateDepartId is not None:
            oprot.writeFieldBegin('relateDepartId', TType.STRING, 7)
            oprot.writeString(self.relateDepartId.encode('utf-8') if sys.version_info[0] == 2 else self.relateDepartId)
            oprot.writeFieldEnd()
        if self.perm is not None:
            oprot.writeFieldBegin('perm', TType.STRUCT, 8)
            self.perm.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTCustPerm(object):
    """
    Attributes:
     - accessorId
     - accessorType
     - isAllowed
     - permValue
     - endTime

    """


    def __init__(self, accessorId=None, accessorType=None, isAllowed=None, permValue=None, endTime=None,):
        self.accessorId = accessorId
        self.accessorType = accessorType
        self.isAllowed = isAllowed
        self.permValue = permValue
        self.endTime = endTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.accessorId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.accessorType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isAllowed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.permValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTCustPerm')
        if self.accessorId is not None:
            oprot.writeFieldBegin('accessorId', TType.STRING, 1)
            oprot.writeString(self.accessorId.encode('utf-8') if sys.version_info[0] == 2 else self.accessorId)
            oprot.writeFieldEnd()
        if self.accessorType is not None:
            oprot.writeFieldBegin('accessorType', TType.I16, 2)
            oprot.writeI16(self.accessorType)
            oprot.writeFieldEnd()
        if self.isAllowed is not None:
            oprot.writeFieldBegin('isAllowed', TType.BOOL, 3)
            oprot.writeBool(self.isAllowed)
            oprot.writeFieldEnd()
        if self.permValue is not None:
            oprot.writeFieldBegin('permValue', TType.I32, 4)
            oprot.writeI32(self.permValue)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 5)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAddCustomDocParamEx(object):
    """
    Attributes:
     - name
     - typeName
     - createrId
     - ownerIds
     - spaceQuota
     - objId
     - permConfigs
     - siteId

    """


    def __init__(self, name=None, typeName=None, createrId=None, ownerIds=None, spaceQuota=None, objId=None, permConfigs=None, siteId=None,):
        self.name = name
        self.typeName = typeName
        self.createrId = createrId
        self.ownerIds = ownerIds
        self.spaceQuota = spaceQuota
        self.objId = objId
        self.permConfigs = permConfigs
        self.siteId = siteId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.typeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.createrId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.ownerIds = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ownerIds.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.spaceQuota = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.objId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.permConfigs = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = ncTCustPerm()
                        _elem18.read(iprot)
                        self.permConfigs.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.siteId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAddCustomDocParamEx')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.typeName is not None:
            oprot.writeFieldBegin('typeName', TType.STRING, 2)
            oprot.writeString(self.typeName.encode('utf-8') if sys.version_info[0] == 2 else self.typeName)
            oprot.writeFieldEnd()
        if self.createrId is not None:
            oprot.writeFieldBegin('createrId', TType.STRING, 3)
            oprot.writeString(self.createrId.encode('utf-8') if sys.version_info[0] == 2 else self.createrId)
            oprot.writeFieldEnd()
        if self.ownerIds is not None:
            oprot.writeFieldBegin('ownerIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.ownerIds))
            for iter19 in self.ownerIds:
                oprot.writeString(iter19.encode('utf-8') if sys.version_info[0] == 2 else iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.spaceQuota is not None:
            oprot.writeFieldBegin('spaceQuota', TType.I64, 5)
            oprot.writeI64(self.spaceQuota)
            oprot.writeFieldEnd()
        if self.objId is not None:
            oprot.writeFieldBegin('objId', TType.STRING, 6)
            oprot.writeString(self.objId.encode('utf-8') if sys.version_info[0] == 2 else self.objId)
            oprot.writeFieldEnd()
        if self.permConfigs is not None:
            oprot.writeFieldBegin('permConfigs', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.permConfigs))
            for iter20 in self.permConfigs:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.siteId is not None:
            oprot.writeFieldBegin('siteId', TType.STRING, 8)
            oprot.writeString(self.siteId.encode('utf-8') if sys.version_info[0] == 2 else self.siteId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEditCustomDocParam(object):
    """
    Attributes:
     - docId
     - name
     - typeName
     - ownerIds
     - spaceQuota
     - userId
     - siteId

    """


    def __init__(self, docId=None, name=None, typeName=None, ownerIds=None, spaceQuota=None, userId=None, siteId=None,):
        self.docId = docId
        self.name = name
        self.typeName = typeName
        self.ownerIds = ownerIds
        self.spaceQuota = spaceQuota
        self.userId = userId
        self.siteId = siteId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.typeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.ownerIds = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ownerIds.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.spaceQuota = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.siteId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEditCustomDocParam')
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 1)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.typeName is not None:
            oprot.writeFieldBegin('typeName', TType.STRING, 3)
            oprot.writeString(self.typeName.encode('utf-8') if sys.version_info[0] == 2 else self.typeName)
            oprot.writeFieldEnd()
        if self.ownerIds is not None:
            oprot.writeFieldBegin('ownerIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.ownerIds))
            for iter27 in self.ownerIds:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.spaceQuota is not None:
            oprot.writeFieldBegin('spaceQuota', TType.I64, 5)
            oprot.writeI64(self.spaceQuota)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 6)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.siteId is not None:
            oprot.writeFieldBegin('siteId', TType.STRING, 7)
            oprot.writeString(self.siteId.encode('utf-8') if sys.version_info[0] == 2 else self.siteId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDeleteCustomDocParam(object):
    """
    Attributes:
     - docId
     - userId

    """


    def __init__(self, docId=None, userId=None,):
        self.docId = docId
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDeleteCustomDocParam')
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 1)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUserInfo(object):
    """
    Attributes:
     - id
     - name
     - account

    """


    def __init__(self, id=None, name=None, account=None,):
        self.id = id
        self.name = name
        self.account = account

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.account = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUserInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.account is not None:
            oprot.writeFieldBegin('account', TType.STRING, 3)
            oprot.writeString(self.account.encode('utf-8') if sys.version_info[0] == 2 else self.account)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDocSiteInfo(object):
    """
    Attributes:
     - id
     - name

    """


    def __init__(self, id=None, name=None,):
        self.id = id
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDocSiteInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTCustomDocInfo(object):
    """
    Attributes:
     - docId
     - name
     - typeName
     - createrId
     - createrName
     - ownerInfos
     - spaceQuota
     - usedSize
     - usedSpaceRate
     - siteInfo
     - relateDepartName
     - relateDepartId
     - displayOrder

    """


    def __init__(self, docId=None, name=None, typeName=None, createrId=None, createrName=None, ownerInfos=None, spaceQuota=None, usedSize=None, usedSpaceRate=None, siteInfo=None, relateDepartName=None, relateDepartId=None, displayOrder=None,):
        self.docId = docId
        self.name = name
        self.typeName = typeName
        self.createrId = createrId
        self.createrName = createrName
        self.ownerInfos = ownerInfos
        self.spaceQuota = spaceQuota
        self.usedSize = usedSize
        self.usedSpaceRate = usedSpaceRate
        self.siteInfo = siteInfo
        self.relateDepartName = relateDepartName
        self.relateDepartId = relateDepartId
        self.displayOrder = displayOrder

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.typeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.createrId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.createrName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.ownerInfos = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = ncTUserInfo()
                        _elem33.read(iprot)
                        self.ownerInfos.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.spaceQuota = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.usedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.usedSpaceRate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.siteInfo = ncTDocSiteInfo()
                    self.siteInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.relateDepartName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.relateDepartId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTCustomDocInfo')
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 1)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.typeName is not None:
            oprot.writeFieldBegin('typeName', TType.STRING, 3)
            oprot.writeString(self.typeName.encode('utf-8') if sys.version_info[0] == 2 else self.typeName)
            oprot.writeFieldEnd()
        if self.createrId is not None:
            oprot.writeFieldBegin('createrId', TType.STRING, 4)
            oprot.writeString(self.createrId.encode('utf-8') if sys.version_info[0] == 2 else self.createrId)
            oprot.writeFieldEnd()
        if self.createrName is not None:
            oprot.writeFieldBegin('createrName', TType.STRING, 5)
            oprot.writeString(self.createrName.encode('utf-8') if sys.version_info[0] == 2 else self.createrName)
            oprot.writeFieldEnd()
        if self.ownerInfos is not None:
            oprot.writeFieldBegin('ownerInfos', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.ownerInfos))
            for iter34 in self.ownerInfos:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.spaceQuota is not None:
            oprot.writeFieldBegin('spaceQuota', TType.I64, 7)
            oprot.writeI64(self.spaceQuota)
            oprot.writeFieldEnd()
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.I64, 8)
            oprot.writeI64(self.usedSize)
            oprot.writeFieldEnd()
        if self.usedSpaceRate is not None:
            oprot.writeFieldBegin('usedSpaceRate', TType.DOUBLE, 9)
            oprot.writeDouble(self.usedSpaceRate)
            oprot.writeFieldEnd()
        if self.siteInfo is not None:
            oprot.writeFieldBegin('siteInfo', TType.STRUCT, 10)
            self.siteInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.relateDepartName is not None:
            oprot.writeFieldBegin('relateDepartName', TType.STRING, 11)
            oprot.writeString(self.relateDepartName.encode('utf-8') if sys.version_info[0] == 2 else self.relateDepartName)
            oprot.writeFieldEnd()
        if self.relateDepartId is not None:
            oprot.writeFieldBegin('relateDepartId', TType.STRING, 12)
            oprot.writeString(self.relateDepartId.encode('utf-8') if sys.version_info[0] == 2 else self.relateDepartId)
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 13)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTGetPageDocParam(object):
    """
    Attributes:
     - userId
     - sortKey
     - sortType
     - docNames
     - docTypes
     - docOwners
     - docCreaters
     - relateDepartName
     - start
     - limit

    """


    def __init__(self, userId=None, sortKey=None, sortType=None, docNames=None, docTypes=None, docOwners=None, docCreaters=None, relateDepartName=None, start=None, limit=None,):
        self.userId = userId
        self.sortKey = sortKey
        self.sortType = sortType
        self.docNames = docNames
        self.docTypes = docTypes
        self.docOwners = docOwners
        self.docCreaters = docCreaters
        self.relateDepartName = relateDepartName
        self.start = start
        self.limit = limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sortKey = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.sortType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.docNames = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.docNames.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.docTypes = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.docTypes.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.docOwners = []
                    (_etype50, _size47) = iprot.readListBegin()
                    for _i51 in range(_size47):
                        _elem52 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.docOwners.append(_elem52)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.docCreaters = []
                    (_etype56, _size53) = iprot.readListBegin()
                    for _i57 in range(_size53):
                        _elem58 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.docCreaters.append(_elem58)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.relateDepartName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTGetPageDocParam')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.sortKey is not None:
            oprot.writeFieldBegin('sortKey', TType.I32, 2)
            oprot.writeI32(self.sortKey)
            oprot.writeFieldEnd()
        if self.sortType is not None:
            oprot.writeFieldBegin('sortType', TType.I32, 3)
            oprot.writeI32(self.sortType)
            oprot.writeFieldEnd()
        if self.docNames is not None:
            oprot.writeFieldBegin('docNames', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.docNames))
            for iter59 in self.docNames:
                oprot.writeString(iter59.encode('utf-8') if sys.version_info[0] == 2 else iter59)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.docTypes is not None:
            oprot.writeFieldBegin('docTypes', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.docTypes))
            for iter60 in self.docTypes:
                oprot.writeString(iter60.encode('utf-8') if sys.version_info[0] == 2 else iter60)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.docOwners is not None:
            oprot.writeFieldBegin('docOwners', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.docOwners))
            for iter61 in self.docOwners:
                oprot.writeString(iter61.encode('utf-8') if sys.version_info[0] == 2 else iter61)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.docCreaters is not None:
            oprot.writeFieldBegin('docCreaters', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.docCreaters))
            for iter62 in self.docCreaters:
                oprot.writeString(iter62.encode('utf-8') if sys.version_info[0] == 2 else iter62)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.relateDepartName is not None:
            oprot.writeFieldBegin('relateDepartName', TType.STRING, 8)
            oprot.writeString(self.relateDepartName.encode('utf-8') if sys.version_info[0] == 2 else self.relateDepartName)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 9)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 10)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userId is None:
            raise TProtocolException(message='Required field userId is unset!')
        if self.start is None:
            raise TProtocolException(message='Required field start is unset!')
        if self.limit is None:
            raise TProtocolException(message='Required field limit is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTBatchAddCustomDocParam(object):
    """
    Attributes:
     - relateDepartIds
     - includeCurDepart
     - level
     - typeName
     - ownerId
     - perm
     - spaceQuota
     - createrId

    """


    def __init__(self, relateDepartIds=None, includeCurDepart=None, level=None, typeName=None, ownerId=None, perm=None, spaceQuota=None, createrId=None,):
        self.relateDepartIds = relateDepartIds
        self.includeCurDepart = includeCurDepart
        self.level = level
        self.typeName = typeName
        self.ownerId = ownerId
        self.perm = perm
        self.spaceQuota = spaceQuota
        self.createrId = createrId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.relateDepartIds = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.relateDepartIds.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.includeCurDepart = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.typeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ownerId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.perm = ncTDepartPerm()
                    self.perm.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.spaceQuota = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.createrId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTBatchAddCustomDocParam')
        if self.relateDepartIds is not None:
            oprot.writeFieldBegin('relateDepartIds', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.relateDepartIds))
            for iter69 in self.relateDepartIds:
                oprot.writeString(iter69.encode('utf-8') if sys.version_info[0] == 2 else iter69)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.includeCurDepart is not None:
            oprot.writeFieldBegin('includeCurDepart', TType.BOOL, 2)
            oprot.writeBool(self.includeCurDepart)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 3)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.typeName is not None:
            oprot.writeFieldBegin('typeName', TType.STRING, 4)
            oprot.writeString(self.typeName.encode('utf-8') if sys.version_info[0] == 2 else self.typeName)
            oprot.writeFieldEnd()
        if self.ownerId is not None:
            oprot.writeFieldBegin('ownerId', TType.STRING, 5)
            oprot.writeString(self.ownerId.encode('utf-8') if sys.version_info[0] == 2 else self.ownerId)
            oprot.writeFieldEnd()
        if self.perm is not None:
            oprot.writeFieldBegin('perm', TType.STRUCT, 6)
            self.perm.write(oprot)
            oprot.writeFieldEnd()
        if self.spaceQuota is not None:
            oprot.writeFieldBegin('spaceQuota', TType.I64, 7)
            oprot.writeI64(self.spaceQuota)
            oprot.writeFieldEnd()
        if self.createrId is not None:
            oprot.writeFieldBegin('createrId', TType.STRING, 8)
            oprot.writeString(self.createrId.encode('utf-8') if sys.version_info[0] == 2 else self.createrId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAddCustomDocFailInfo(object):
    """
    Attributes:
     - docName
     - detailInfo

    """


    def __init__(self, docName=None, detailInfo=None,):
        self.docName = docName
        self.detailInfo = detailInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.detailInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAddCustomDocFailInfo')
        if self.docName is not None:
            oprot.writeFieldBegin('docName', TType.STRING, 1)
            oprot.writeString(self.docName.encode('utf-8') if sys.version_info[0] == 2 else self.docName)
            oprot.writeFieldEnd()
        if self.detailInfo is not None:
            oprot.writeFieldBegin('detailInfo', TType.STRING, 2)
            oprot.writeString(self.detailInfo.encode('utf-8') if sys.version_info[0] == 2 else self.detailInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTBatchAddCustomDocResult(object):
    """
    Attributes:
     - totalDepartNum
     - successNum
     - failNum
     - failInfos

    """


    def __init__(self, totalDepartNum=None, successNum=None, failNum=None, failInfos=None,):
        self.totalDepartNum = totalDepartNum
        self.successNum = successNum
        self.failNum = failNum
        self.failInfos = failInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.totalDepartNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.successNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.failNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.failInfos = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = ncTAddCustomDocFailInfo()
                        _elem75.read(iprot)
                        self.failInfos.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTBatchAddCustomDocResult')
        if self.totalDepartNum is not None:
            oprot.writeFieldBegin('totalDepartNum', TType.I32, 1)
            oprot.writeI32(self.totalDepartNum)
            oprot.writeFieldEnd()
        if self.successNum is not None:
            oprot.writeFieldBegin('successNum', TType.I32, 2)
            oprot.writeI32(self.successNum)
            oprot.writeFieldEnd()
        if self.failNum is not None:
            oprot.writeFieldBegin('failNum', TType.I32, 3)
            oprot.writeI32(self.failNum)
            oprot.writeFieldEnd()
        if self.failInfos is not None:
            oprot.writeFieldBegin('failInfos', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.failInfos))
            for iter76 in self.failInfos:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAddArchiveDocParam(object):
    """
    Attributes:
     - name
     - createrId
     - ownerId
     - spaceQuota
     - siteId

    """


    def __init__(self, name=None, createrId=None, ownerId=None, spaceQuota=None, siteId=None,):
        self.name = name
        self.createrId = createrId
        self.ownerId = ownerId
        self.spaceQuota = spaceQuota
        self.siteId = siteId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.createrId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ownerId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.spaceQuota = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.siteId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAddArchiveDocParam')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.createrId is not None:
            oprot.writeFieldBegin('createrId', TType.STRING, 2)
            oprot.writeString(self.createrId.encode('utf-8') if sys.version_info[0] == 2 else self.createrId)
            oprot.writeFieldEnd()
        if self.ownerId is not None:
            oprot.writeFieldBegin('ownerId', TType.STRING, 3)
            oprot.writeString(self.ownerId.encode('utf-8') if sys.version_info[0] == 2 else self.ownerId)
            oprot.writeFieldEnd()
        if self.spaceQuota is not None:
            oprot.writeFieldBegin('spaceQuota', TType.I64, 4)
            oprot.writeI64(self.spaceQuota)
            oprot.writeFieldEnd()
        if self.siteId is not None:
            oprot.writeFieldBegin('siteId', TType.STRING, 5)
            oprot.writeString(self.siteId.encode('utf-8') if sys.version_info[0] == 2 else self.siteId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEditArchiveDocParam(object):
    """
    Attributes:
     - docId
     - name
     - ownerId
     - spaceQuota
     - userId
     - siteId

    """


    def __init__(self, docId=None, name=None, ownerId=None, spaceQuota=None, userId=None, siteId=None,):
        self.docId = docId
        self.name = name
        self.ownerId = ownerId
        self.spaceQuota = spaceQuota
        self.userId = userId
        self.siteId = siteId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ownerId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.spaceQuota = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.siteId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEditArchiveDocParam')
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 1)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.ownerId is not None:
            oprot.writeFieldBegin('ownerId', TType.STRING, 3)
            oprot.writeString(self.ownerId.encode('utf-8') if sys.version_info[0] == 2 else self.ownerId)
            oprot.writeFieldEnd()
        if self.spaceQuota is not None:
            oprot.writeFieldBegin('spaceQuota', TType.I64, 4)
            oprot.writeI64(self.spaceQuota)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 5)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.siteId is not None:
            oprot.writeFieldBegin('siteId', TType.STRING, 6)
            oprot.writeString(self.siteId.encode('utf-8') if sys.version_info[0] == 2 else self.siteId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDeleteArchiveDocParam(object):
    """
    Attributes:
     - docId
     - userId

    """


    def __init__(self, docId=None, userId=None,):
        self.docId = docId
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDeleteArchiveDocParam')
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 1)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTArchiveDocInfo(object):
    """
    Attributes:
     - docId
     - name
     - createrId
     - createrName
     - ownerInfo
     - spaceQuota
     - usedSize
     - usedSpaceRate
     - siteInfo

    """


    def __init__(self, docId=None, name=None, createrId=None, createrName=None, ownerInfo=None, spaceQuota=None, usedSize=None, usedSpaceRate=None, siteInfo=None,):
        self.docId = docId
        self.name = name
        self.createrId = createrId
        self.createrName = createrName
        self.ownerInfo = ownerInfo
        self.spaceQuota = spaceQuota
        self.usedSize = usedSize
        self.usedSpaceRate = usedSpaceRate
        self.siteInfo = siteInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.createrId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.createrName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ownerInfo = ncTUserInfo()
                    self.ownerInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.spaceQuota = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.usedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.usedSpaceRate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.siteInfo = ncTDocSiteInfo()
                    self.siteInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTArchiveDocInfo')
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 1)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.createrId is not None:
            oprot.writeFieldBegin('createrId', TType.STRING, 3)
            oprot.writeString(self.createrId.encode('utf-8') if sys.version_info[0] == 2 else self.createrId)
            oprot.writeFieldEnd()
        if self.createrName is not None:
            oprot.writeFieldBegin('createrName', TType.STRING, 4)
            oprot.writeString(self.createrName.encode('utf-8') if sys.version_info[0] == 2 else self.createrName)
            oprot.writeFieldEnd()
        if self.ownerInfo is not None:
            oprot.writeFieldBegin('ownerInfo', TType.STRUCT, 5)
            self.ownerInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.spaceQuota is not None:
            oprot.writeFieldBegin('spaceQuota', TType.I64, 6)
            oprot.writeI64(self.spaceQuota)
            oprot.writeFieldEnd()
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.I64, 7)
            oprot.writeI64(self.usedSize)
            oprot.writeFieldEnd()
        if self.usedSpaceRate is not None:
            oprot.writeFieldBegin('usedSpaceRate', TType.DOUBLE, 8)
            oprot.writeDouble(self.usedSpaceRate)
            oprot.writeFieldEnd()
        if self.siteInfo is not None:
            oprot.writeFieldBegin('siteInfo', TType.STRUCT, 9)
            self.siteInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSpaceQuotaInfo(object):
    """
    Attributes:
     - spaceQuota
     - usedSize

    """


    def __init__(self, spaceQuota=None, usedSize=None,):
        self.spaceQuota = spaceQuota
        self.usedSize = usedSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.spaceQuota = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.usedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSpaceQuotaInfo')
        if self.spaceQuota is not None:
            oprot.writeFieldBegin('spaceQuota', TType.I64, 1)
            oprot.writeI64(self.spaceQuota)
            oprot.writeFieldEnd()
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.I64, 2)
            oprot.writeI64(self.usedSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSysRecycleEntryDocInfo(object):
    """
    Attributes:
     - docId
     - docType
     - typeName
     - docName
     - isDeleted
     - deleterName
     - deleteTime
     - serverTime

    """


    def __init__(self, docId=None, docType=None, typeName=None, docName=None, isDeleted=None, deleterName=None, deleteTime=None, serverTime=None,):
        self.docId = docId
        self.docType = docType
        self.typeName = typeName
        self.docName = docName
        self.isDeleted = isDeleted
        self.deleterName = deleterName
        self.deleteTime = deleteTime
        self.serverTime = serverTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.docType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.typeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.docName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isDeleted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.deleterName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.deleteTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.serverTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSysRecycleEntryDocInfo')
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 1)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.docType is not None:
            oprot.writeFieldBegin('docType', TType.STRING, 2)
            oprot.writeString(self.docType.encode('utf-8') if sys.version_info[0] == 2 else self.docType)
            oprot.writeFieldEnd()
        if self.typeName is not None:
            oprot.writeFieldBegin('typeName', TType.STRING, 3)
            oprot.writeString(self.typeName.encode('utf-8') if sys.version_info[0] == 2 else self.typeName)
            oprot.writeFieldEnd()
        if self.docName is not None:
            oprot.writeFieldBegin('docName', TType.STRING, 4)
            oprot.writeString(self.docName.encode('utf-8') if sys.version_info[0] == 2 else self.docName)
            oprot.writeFieldEnd()
        if self.isDeleted is not None:
            oprot.writeFieldBegin('isDeleted', TType.BOOL, 5)
            oprot.writeBool(self.isDeleted)
            oprot.writeFieldEnd()
        if self.deleterName is not None:
            oprot.writeFieldBegin('deleterName', TType.STRING, 6)
            oprot.writeString(self.deleterName.encode('utf-8') if sys.version_info[0] == 2 else self.deleterName)
            oprot.writeFieldEnd()
        if self.deleteTime is not None:
            oprot.writeFieldBegin('deleteTime', TType.I64, 7)
            oprot.writeI64(self.deleteTime)
            oprot.writeFieldEnd()
        if self.serverTime is not None:
            oprot.writeFieldBegin('serverTime', TType.I64, 8)
            oprot.writeI64(self.serverTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTDepartPerm)
ncTDepartPerm.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'permValue', None, None, ),  # 1
    (2, TType.I64, 'endTime', None, None, ),  # 2
)
all_structs.append(ncTAddCustomDocParam)
ncTAddCustomDocParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'typeName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'createrId', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'ownerIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.I64, 'spaceQuota', None, None, ),  # 5
    (6, TType.STRING, 'siteId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'relateDepartId', 'UTF8', None, ),  # 7
    (8, TType.STRUCT, 'perm', [ncTDepartPerm, None], None, ),  # 8
)
all_structs.append(ncTCustPerm)
ncTCustPerm.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'accessorId', 'UTF8', None, ),  # 1
    (2, TType.I16, 'accessorType', None, None, ),  # 2
    (3, TType.BOOL, 'isAllowed', None, None, ),  # 3
    (4, TType.I32, 'permValue', None, None, ),  # 4
    (5, TType.I64, 'endTime', None, None, ),  # 5
)
all_structs.append(ncTAddCustomDocParamEx)
ncTAddCustomDocParamEx.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'typeName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'createrId', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'ownerIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.I64, 'spaceQuota', None, None, ),  # 5
    (6, TType.STRING, 'objId', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'permConfigs', (TType.STRUCT, [ncTCustPerm, None], False), None, ),  # 7
    (8, TType.STRING, 'siteId', 'UTF8', None, ),  # 8
)
all_structs.append(ncTEditCustomDocParam)
ncTEditCustomDocParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'typeName', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'ownerIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.I64, 'spaceQuota', None, None, ),  # 5
    (6, TType.STRING, 'userId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'siteId', 'UTF8', None, ),  # 7
)
all_structs.append(ncTDeleteCustomDocParam)
ncTDeleteCustomDocParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
)
all_structs.append(ncTUserInfo)
ncTUserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'account', 'UTF8', None, ),  # 3
)
all_structs.append(ncTDocSiteInfo)
ncTDocSiteInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(ncTCustomDocInfo)
ncTCustomDocInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'typeName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'createrId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'createrName', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'ownerInfos', (TType.STRUCT, [ncTUserInfo, None], False), None, ),  # 6
    (7, TType.I64, 'spaceQuota', None, None, ),  # 7
    (8, TType.I64, 'usedSize', None, None, ),  # 8
    (9, TType.DOUBLE, 'usedSpaceRate', None, None, ),  # 9
    (10, TType.STRUCT, 'siteInfo', [ncTDocSiteInfo, None], None, ),  # 10
    (11, TType.STRING, 'relateDepartName', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'relateDepartId', 'UTF8', None, ),  # 12
    (13, TType.I32, 'displayOrder', None, None, ),  # 13
)
all_structs.append(ncTGetPageDocParam)
ncTGetPageDocParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sortKey', None, None, ),  # 2
    (3, TType.I32, 'sortType', None, None, ),  # 3
    (4, TType.LIST, 'docNames', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'docTypes', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.LIST, 'docOwners', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'docCreaters', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.STRING, 'relateDepartName', 'UTF8', None, ),  # 8
    (9, TType.I32, 'start', None, None, ),  # 9
    (10, TType.I32, 'limit', None, None, ),  # 10
)
all_structs.append(ncTBatchAddCustomDocParam)
ncTBatchAddCustomDocParam.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'relateDepartIds', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.BOOL, 'includeCurDepart', None, None, ),  # 2
    (3, TType.I32, 'level', None, None, ),  # 3
    (4, TType.STRING, 'typeName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'ownerId', 'UTF8', None, ),  # 5
    (6, TType.STRUCT, 'perm', [ncTDepartPerm, None], None, ),  # 6
    (7, TType.I64, 'spaceQuota', None, None, ),  # 7
    (8, TType.STRING, 'createrId', 'UTF8', None, ),  # 8
)
all_structs.append(ncTAddCustomDocFailInfo)
ncTAddCustomDocFailInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'detailInfo', 'UTF8', None, ),  # 2
)
all_structs.append(ncTBatchAddCustomDocResult)
ncTBatchAddCustomDocResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'totalDepartNum', None, None, ),  # 1
    (2, TType.I32, 'successNum', None, None, ),  # 2
    (3, TType.I32, 'failNum', None, None, ),  # 3
    (4, TType.LIST, 'failInfos', (TType.STRUCT, [ncTAddCustomDocFailInfo, None], False), None, ),  # 4
)
all_structs.append(ncTAddArchiveDocParam)
ncTAddArchiveDocParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'createrId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ownerId', 'UTF8', None, ),  # 3
    (4, TType.I64, 'spaceQuota', None, None, ),  # 4
    (5, TType.STRING, 'siteId', 'UTF8', None, ),  # 5
)
all_structs.append(ncTEditArchiveDocParam)
ncTEditArchiveDocParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ownerId', 'UTF8', None, ),  # 3
    (4, TType.I64, 'spaceQuota', None, None, ),  # 4
    (5, TType.STRING, 'userId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'siteId', 'UTF8', None, ),  # 6
)
all_structs.append(ncTDeleteArchiveDocParam)
ncTDeleteArchiveDocParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
)
all_structs.append(ncTArchiveDocInfo)
ncTArchiveDocInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'createrId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'createrName', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'ownerInfo', [ncTUserInfo, None], None, ),  # 5
    (6, TType.I64, 'spaceQuota', None, None, ),  # 6
    (7, TType.I64, 'usedSize', None, None, ),  # 7
    (8, TType.DOUBLE, 'usedSpaceRate', None, None, ),  # 8
    (9, TType.STRUCT, 'siteInfo', [ncTDocSiteInfo, None], None, ),  # 9
)
all_structs.append(ncTSpaceQuotaInfo)
ncTSpaceQuotaInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'spaceQuota', None, None, ),  # 1
    (2, TType.I64, 'usedSize', None, None, ),  # 2
)
all_structs.append(ncTSysRecycleEntryDocInfo)
ncTSysRecycleEntryDocInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'docType', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'typeName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'docName', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'isDeleted', None, None, ),  # 5
    (6, TType.STRING, 'deleterName', 'UTF8', None, ),  # 6
    (7, TType.I64, 'deleteTime', None, None, ),  # 7
    (8, TType.I64, 'serverTime', None, None, ),  # 8
)
fix_spec(all_structs)
del all_structs
