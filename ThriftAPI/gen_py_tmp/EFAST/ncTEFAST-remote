#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from EFAST import ncTEFAST
from EFAST.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void EFAST_Start()')
    print('  void EFAST_Stop()')
    print('  ncTServiceState EFAST_GetServiceState()')
    print('  void EFSHttp_SetPort(i32 port)')
    print('  i32 EFSHttp_GetPort()')
    print('  void EFSHttp_SetMaxConcurrency(i32 processPoolCount)')
    print('  i32 EFSHttp_GetMaxConcurrency()')
    print('  void EFAST_AddUserDoc(string userId, i64 totalQuotaBytes, string responsiblePersonId)')
    print('  string EFAST_AddCustomDoc(ncTAddCustomDocParam info)')
    print('  string EFAST_AddCustomDocEx(ncTAddCustomDocParamEx info)')
    print('  void EFAST_EditCustomDoc(ncTEditCustomDocParam info)')
    print('  void EFAST_EditCustomDocManager(string docId, string userId)')
    print('  void EFAST_DeleteCustomDoc(ncTDeleteCustomDocParam info)')
    print('  i32 EFAST_GetCustomDocCnt(string userId)')
    print('  ncTCustomDocInfo EFAST_GetCustomDocByObjId(string objId)')
    print('  ncTCustomDocInfo EFAST_GetCustomDocByDocId(string docId)')
    print('   EFAST_GetCustomDocInfosByPage(i32 start, i32 limit, string userId)')
    print('  void EFAST_CheckDocSpace(string userId,  docIds, i64 quota)')
    print('  void EFAST_SetQuotaInfo(string userId, string docId, i64 quota)')
    print('   EFAST_SearchCustomDocInfos(ncTGetPageDocParam param)')
    print('  i32 EFAST_GetSearchCustomDocCnt(ncTGetPageDocParam param)')
    print('  void EFAST_EditDocLibrarySiteId(string docId, string siteId)')
    print('  string EFAST_BatchAddCustomDocs(ncTBatchAddCustomDocParam param)')
    print('  ncTBatchAddCustomDocResult EFAST_GetBatchAddCustomDocsResult(string taskId)')
    print('   EFAST_SearchAvailableCustomDocInfos(ncTGetPageDocParam param)')
    print('  i32 EFAST_GetSearchAvailableCustomDocCnt(ncTGetPageDocParam param)')
    print('  void EFAST_EditDisplayOrder(string docId, string userId, i32 displayOrder)')
    print('   EFAST_MoveUserDoc(string adminId, string userId, string docId)')
    print('   EFAST_MoveEntryDoc(string adminId, string sourceDocId, string targetDocId)')
    print('   EFAST_DeleteUserDoc(string userId, string deleterId)')
    print('  i64 EFAST_GetUserTotalQuota(string userId)')
    print('  i64 EFAST_GetUserUsedQuota(string userId)')
    print('  void EFAST_EditUserTotalQuota(string userId, i64 totalQuotaBytes)')
    print('   EFAST_GetAllUserDocById(string userId)')
    print('  bool EFAST_ConfictWithLibName(string name)')
    print('  ncTSpaceQuotaInfo EFAST_GetSpaceQuotaInfo(string userId)')
    print('   EFAST_GetAllCustomDocTypeName()')
    print('  string EFAST_GetUserGns(string userId)')
    print('  void EFAST_SysRecycle_RestoreCustomDoc(string docId, string name, string adminId)')
    print('  void EFAST_SysRecycle_RestoreUserDoc(string docId, string responsiblePersonId)')
    print('   EFAST_SysRecycle_GetEntryDocInfos(i32 start, i32 limit, string searchKey)')
    print('  ncTSysRecycleEntryDocInfo EFAST_SysRecycle_GetEntryDocInfoByDocId(string docId)')
    print('  void EFAST_OnDeleteDepartment( departmentIds)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncTEFAST.Client(protocol)
transport.open()

if cmd == 'EFAST_Start':
    if len(args) != 0:
        print('EFAST_Start requires 0 args')
        sys.exit(1)
    pp.pprint(client.EFAST_Start())

elif cmd == 'EFAST_Stop':
    if len(args) != 0:
        print('EFAST_Stop requires 0 args')
        sys.exit(1)
    pp.pprint(client.EFAST_Stop())

elif cmd == 'EFAST_GetServiceState':
    if len(args) != 0:
        print('EFAST_GetServiceState requires 0 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetServiceState())

elif cmd == 'EFSHttp_SetPort':
    if len(args) != 1:
        print('EFSHttp_SetPort requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFSHttp_SetPort(eval(args[0]),))

elif cmd == 'EFSHttp_GetPort':
    if len(args) != 0:
        print('EFSHttp_GetPort requires 0 args')
        sys.exit(1)
    pp.pprint(client.EFSHttp_GetPort())

elif cmd == 'EFSHttp_SetMaxConcurrency':
    if len(args) != 1:
        print('EFSHttp_SetMaxConcurrency requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFSHttp_SetMaxConcurrency(eval(args[0]),))

elif cmd == 'EFSHttp_GetMaxConcurrency':
    if len(args) != 0:
        print('EFSHttp_GetMaxConcurrency requires 0 args')
        sys.exit(1)
    pp.pprint(client.EFSHttp_GetMaxConcurrency())

elif cmd == 'EFAST_AddUserDoc':
    if len(args) != 3:
        print('EFAST_AddUserDoc requires 3 args')
        sys.exit(1)
    pp.pprint(client.EFAST_AddUserDoc(args[0], eval(args[1]), args[2],))

elif cmd == 'EFAST_AddCustomDoc':
    if len(args) != 1:
        print('EFAST_AddCustomDoc requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_AddCustomDoc(eval(args[0]),))

elif cmd == 'EFAST_AddCustomDocEx':
    if len(args) != 1:
        print('EFAST_AddCustomDocEx requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_AddCustomDocEx(eval(args[0]),))

elif cmd == 'EFAST_EditCustomDoc':
    if len(args) != 1:
        print('EFAST_EditCustomDoc requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_EditCustomDoc(eval(args[0]),))

elif cmd == 'EFAST_EditCustomDocManager':
    if len(args) != 2:
        print('EFAST_EditCustomDocManager requires 2 args')
        sys.exit(1)
    pp.pprint(client.EFAST_EditCustomDocManager(args[0], args[1],))

elif cmd == 'EFAST_DeleteCustomDoc':
    if len(args) != 1:
        print('EFAST_DeleteCustomDoc requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_DeleteCustomDoc(eval(args[0]),))

elif cmd == 'EFAST_GetCustomDocCnt':
    if len(args) != 1:
        print('EFAST_GetCustomDocCnt requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetCustomDocCnt(args[0],))

elif cmd == 'EFAST_GetCustomDocByObjId':
    if len(args) != 1:
        print('EFAST_GetCustomDocByObjId requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetCustomDocByObjId(args[0],))

elif cmd == 'EFAST_GetCustomDocByDocId':
    if len(args) != 1:
        print('EFAST_GetCustomDocByDocId requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetCustomDocByDocId(args[0],))

elif cmd == 'EFAST_GetCustomDocInfosByPage':
    if len(args) != 3:
        print('EFAST_GetCustomDocInfosByPage requires 3 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetCustomDocInfosByPage(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'EFAST_CheckDocSpace':
    if len(args) != 3:
        print('EFAST_CheckDocSpace requires 3 args')
        sys.exit(1)
    pp.pprint(client.EFAST_CheckDocSpace(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'EFAST_SetQuotaInfo':
    if len(args) != 3:
        print('EFAST_SetQuotaInfo requires 3 args')
        sys.exit(1)
    pp.pprint(client.EFAST_SetQuotaInfo(args[0], args[1], eval(args[2]),))

elif cmd == 'EFAST_SearchCustomDocInfos':
    if len(args) != 1:
        print('EFAST_SearchCustomDocInfos requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_SearchCustomDocInfos(eval(args[0]),))

elif cmd == 'EFAST_GetSearchCustomDocCnt':
    if len(args) != 1:
        print('EFAST_GetSearchCustomDocCnt requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetSearchCustomDocCnt(eval(args[0]),))

elif cmd == 'EFAST_EditDocLibrarySiteId':
    if len(args) != 2:
        print('EFAST_EditDocLibrarySiteId requires 2 args')
        sys.exit(1)
    pp.pprint(client.EFAST_EditDocLibrarySiteId(args[0], args[1],))

elif cmd == 'EFAST_BatchAddCustomDocs':
    if len(args) != 1:
        print('EFAST_BatchAddCustomDocs requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_BatchAddCustomDocs(eval(args[0]),))

elif cmd == 'EFAST_GetBatchAddCustomDocsResult':
    if len(args) != 1:
        print('EFAST_GetBatchAddCustomDocsResult requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetBatchAddCustomDocsResult(args[0],))

elif cmd == 'EFAST_SearchAvailableCustomDocInfos':
    if len(args) != 1:
        print('EFAST_SearchAvailableCustomDocInfos requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_SearchAvailableCustomDocInfos(eval(args[0]),))

elif cmd == 'EFAST_GetSearchAvailableCustomDocCnt':
    if len(args) != 1:
        print('EFAST_GetSearchAvailableCustomDocCnt requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetSearchAvailableCustomDocCnt(eval(args[0]),))

elif cmd == 'EFAST_EditDisplayOrder':
    if len(args) != 3:
        print('EFAST_EditDisplayOrder requires 3 args')
        sys.exit(1)
    pp.pprint(client.EFAST_EditDisplayOrder(args[0], args[1], eval(args[2]),))

elif cmd == 'EFAST_MoveUserDoc':
    if len(args) != 3:
        print('EFAST_MoveUserDoc requires 3 args')
        sys.exit(1)
    pp.pprint(client.EFAST_MoveUserDoc(args[0], args[1], args[2],))

elif cmd == 'EFAST_MoveEntryDoc':
    if len(args) != 3:
        print('EFAST_MoveEntryDoc requires 3 args')
        sys.exit(1)
    pp.pprint(client.EFAST_MoveEntryDoc(args[0], args[1], args[2],))

elif cmd == 'EFAST_DeleteUserDoc':
    if len(args) != 2:
        print('EFAST_DeleteUserDoc requires 2 args')
        sys.exit(1)
    pp.pprint(client.EFAST_DeleteUserDoc(args[0], args[1],))

elif cmd == 'EFAST_GetUserTotalQuota':
    if len(args) != 1:
        print('EFAST_GetUserTotalQuota requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetUserTotalQuota(args[0],))

elif cmd == 'EFAST_GetUserUsedQuota':
    if len(args) != 1:
        print('EFAST_GetUserUsedQuota requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetUserUsedQuota(args[0],))

elif cmd == 'EFAST_EditUserTotalQuota':
    if len(args) != 2:
        print('EFAST_EditUserTotalQuota requires 2 args')
        sys.exit(1)
    pp.pprint(client.EFAST_EditUserTotalQuota(args[0], eval(args[1]),))

elif cmd == 'EFAST_GetAllUserDocById':
    if len(args) != 1:
        print('EFAST_GetAllUserDocById requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetAllUserDocById(args[0],))

elif cmd == 'EFAST_ConfictWithLibName':
    if len(args) != 1:
        print('EFAST_ConfictWithLibName requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_ConfictWithLibName(args[0],))

elif cmd == 'EFAST_GetSpaceQuotaInfo':
    if len(args) != 1:
        print('EFAST_GetSpaceQuotaInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetSpaceQuotaInfo(args[0],))

elif cmd == 'EFAST_GetAllCustomDocTypeName':
    if len(args) != 0:
        print('EFAST_GetAllCustomDocTypeName requires 0 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetAllCustomDocTypeName())

elif cmd == 'EFAST_GetUserGns':
    if len(args) != 1:
        print('EFAST_GetUserGns requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_GetUserGns(args[0],))

elif cmd == 'EFAST_SysRecycle_RestoreCustomDoc':
    if len(args) != 3:
        print('EFAST_SysRecycle_RestoreCustomDoc requires 3 args')
        sys.exit(1)
    pp.pprint(client.EFAST_SysRecycle_RestoreCustomDoc(args[0], args[1], args[2],))

elif cmd == 'EFAST_SysRecycle_RestoreUserDoc':
    if len(args) != 2:
        print('EFAST_SysRecycle_RestoreUserDoc requires 2 args')
        sys.exit(1)
    pp.pprint(client.EFAST_SysRecycle_RestoreUserDoc(args[0], args[1],))

elif cmd == 'EFAST_SysRecycle_GetEntryDocInfos':
    if len(args) != 3:
        print('EFAST_SysRecycle_GetEntryDocInfos requires 3 args')
        sys.exit(1)
    pp.pprint(client.EFAST_SysRecycle_GetEntryDocInfos(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'EFAST_SysRecycle_GetEntryDocInfoByDocId':
    if len(args) != 1:
        print('EFAST_SysRecycle_GetEntryDocInfoByDocId requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_SysRecycle_GetEntryDocInfoByDocId(args[0],))

elif cmd == 'EFAST_OnDeleteDepartment':
    if len(args) != 1:
        print('EFAST_OnDeleteDepartment requires 1 args')
        sys.exit(1)
    pp.pprint(client.EFAST_OnDeleteDepartment(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
