#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTLogType(object):
    LT_INFO = 0
    LT_WARNNING = 1
    LT_ERROR = 2
    LT_OPERATION = 3
    LT_DEBUG = 4

    _VALUES_TO_NAMES = {
        0: "LT_INFO",
        1: "LT_WARNNING",
        2: "LT_ERROR",
        3: "LT_OPERATION",
        4: "LT_DEBUG",
    }

    _NAMES_TO_VALUES = {
        "LT_INFO": 0,
        "LT_WARNNING": 1,
        "LT_ERROR": 2,
        "LT_OPERATION": 3,
        "LT_DEBUG": 4,
    }


class ncTLogItem(object):
    """
    Attributes:
     - owner
     - log_type
     - log_mesg
     - filename
     - line
     - time
     - host

    """


    def __init__(self, owner=None, log_type=None, log_mesg=None, filename=None, line=None, time=None, host=None,):
        self.owner = owner
        self.log_type = log_type
        self.log_mesg = log_mesg
        self.filename = filename
        self.line = line
        self.time = time
        self.host = host

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.owner = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.log_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.log_mesg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.filename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.line = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLogItem')
        if self.owner is not None:
            oprot.writeFieldBegin('owner', TType.STRING, 1)
            oprot.writeString(self.owner.encode('utf-8') if sys.version_info[0] == 2 else self.owner)
            oprot.writeFieldEnd()
        if self.log_type is not None:
            oprot.writeFieldBegin('log_type', TType.I32, 2)
            oprot.writeI32(self.log_type)
            oprot.writeFieldEnd()
        if self.log_mesg is not None:
            oprot.writeFieldBegin('log_mesg', TType.STRING, 3)
            oprot.writeString(self.log_mesg.encode('utf-8') if sys.version_info[0] == 2 else self.log_mesg)
            oprot.writeFieldEnd()
        if self.filename is not None:
            oprot.writeFieldBegin('filename', TType.STRING, 4)
            oprot.writeString(self.filename.encode('utf-8') if sys.version_info[0] == 2 else self.filename)
            oprot.writeFieldEnd()
        if self.line is not None:
            oprot.writeFieldBegin('line', TType.I32, 5)
            oprot.writeI32(self.line)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I32, 6)
            oprot.writeI32(self.time)
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 7)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.owner is None:
            raise TProtocolException(message='Required field owner is unset!')
        if self.log_type is None:
            raise TProtocolException(message='Required field log_type is unset!')
        if self.log_mesg is None:
            raise TProtocolException(message='Required field log_mesg is unset!')
        if self.filename is None:
            raise TProtocolException(message='Required field filename is unset!')
        if self.line is None:
            raise TProtocolException(message='Required field line is unset!')
        if self.time is None:
            raise TProtocolException(message='Required field time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTLogItem)
ncTLogItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'owner', 'UTF8', None, ),  # 1
    (2, TType.I32, 'log_type', None, None, ),  # 2
    (3, TType.STRING, 'log_mesg', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'filename', 'UTF8', None, ),  # 4
    (5, TType.I32, 'line', None, None, ),  # 5
    (6, TType.I32, 'time', None, None, ),  # 6
    (7, TType.STRING, 'host', 'UTF8', None, ),  # 7
)
fix_spec(all_structs)
del all_structs
