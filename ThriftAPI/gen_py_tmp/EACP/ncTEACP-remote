#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from EACP import ncTEACP
from EACP.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i32 EACP_GetOnlineUserCount()')
    print('  i32 EACP_GetTenantOnlineUserCount(string orgId)')
    print('  void EACP_OnDeleteUser(string userId)')
    print('  void EACP_OnDeleteGroup(string groupId)')
    print('  void EACP_OnDeleteDepartment( departmentIds)')
    print('  void EACP_ClearPermOutOfScope()')
    print('  void EACP_ClearLinkOutOfScope()')
    print('  void EACP_ClearFindOutOfScope()')
    print('  string EACP_GetLicenseInfo(string license)')
    print('  i32 EACP_VerifyActiveCode(string license, string machineCode, string activeCode)')
    print('  ncTAutolockConfig EACP_GetAutolockConfig()')
    print('  void EACP_SetAutolockConfig(ncTAutolockConfig config)')
    print('   EACP_GetDevicesByUserId(string userId, i32 start, i32 limit)')
    print('  void EACP_AddDevice(string userId, string udid, i32 osType)')
    print('   EACP_AddDevices(string userId,  udids, i32 osType)')
    print('   EACP_SearchDevicesByUserIdAndUdid(string userId, string udid, i32 start, i32 limit)')
    print('   EACP_SearchDevices(string key, i32 start, i32 limit)')
    print('   EACP_SearchUserByDeviceUdid(string udid, i32 start, i32 limit)')
    print('  void EACP_DeleteDevices(string userId,  udids)')
    print('  void EACP_BindDevice(string userId, string udid)')
    print('  void EACP_UnbindDevice(string userId, string udid)')
    print('  void EACP_EnableDevice(string userId, string udid)')
    print('  void EACP_DisableDevice(string userId, string udid)')
    print('  void EACP_SetPermConfigs(string docId,  permConfigs)')
    print('  void EACP_ClearTokenByUserId(string userId)')
    print('  void EACP_OnProcessChange(string processId)')
    print('  void EACP_ClearAllToken()')
    print('  void EACP_UpdateAllTokenFlagByOsType(i32 osType)')
    print('  void EACP_UpdateAllTokenFlagByIdcardStatus()')
    print('  bool EACP_CheckTokenId(ncTCheckTokenInfo tokenInfo)')
    print('  void EACP_ClearAllInvitationInfo()')
    print('  void EACP_ClearUserInvitationInfo(string userId)')
    print('  void EACP_RestartGlobalShareMgntServer()')
    print('  void EACP_RestartLocalShareMgntServer()')
    print('  void EACP_SetPushMessagesConfig(string appId)')
    print('  string EACP_GetPushMessagesConfig()')
    print('  void EACP_PublishDocExchange(ncTDocExchangeProcessInfo params)')
    print('  void EACP_AddAntivirusMessage(ncTAntivirusMessage msg)')
    print('  void EACP_AddQuarantineMessage(ncTQuarantineMessage msg)')
    print('  void EACP_AddAppealMessage(ncTAppealMessage msg)')
    print('  void EACP_AddDocRemindMessage(ncTDocRemindMessage msg)')
    print('  void EACP_SetSendShareMailStatus(bool status)')
    print('  bool EACP_GetSendShareMailStatus()')
    print('  void EACP_UpdateTokenFlagByUserId(string userId, i32 flag)')
    print('  void EACP_UpdateTokenFlagByPriority(i32 priority, i32 flag)')
    print('  void EACP_SetMessageNotifyStatus(bool status)')
    print('  bool EACP_GetMessageNotifyStatus()')
    print('  void EACP_DeleteContactPermByUserID(string dbName, string userId)')
    print('  void EACP_SetCustomApplicationConfig(string appConfig)')
    print('  string EACP_GetCustomApplicationConfig()')
    print('  void EACP_NotifyPushWebhookThread()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncTEACP.Client(protocol)
transport.open()

if cmd == 'EACP_GetOnlineUserCount':
    if len(args) != 0:
        print('EACP_GetOnlineUserCount requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_GetOnlineUserCount())

elif cmd == 'EACP_GetTenantOnlineUserCount':
    if len(args) != 1:
        print('EACP_GetTenantOnlineUserCount requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_GetTenantOnlineUserCount(args[0],))

elif cmd == 'EACP_OnDeleteUser':
    if len(args) != 1:
        print('EACP_OnDeleteUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_OnDeleteUser(args[0],))

elif cmd == 'EACP_OnDeleteGroup':
    if len(args) != 1:
        print('EACP_OnDeleteGroup requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_OnDeleteGroup(args[0],))

elif cmd == 'EACP_OnDeleteDepartment':
    if len(args) != 1:
        print('EACP_OnDeleteDepartment requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_OnDeleteDepartment(eval(args[0]),))

elif cmd == 'EACP_ClearPermOutOfScope':
    if len(args) != 0:
        print('EACP_ClearPermOutOfScope requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_ClearPermOutOfScope())

elif cmd == 'EACP_ClearLinkOutOfScope':
    if len(args) != 0:
        print('EACP_ClearLinkOutOfScope requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_ClearLinkOutOfScope())

elif cmd == 'EACP_ClearFindOutOfScope':
    if len(args) != 0:
        print('EACP_ClearFindOutOfScope requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_ClearFindOutOfScope())

elif cmd == 'EACP_GetLicenseInfo':
    if len(args) != 1:
        print('EACP_GetLicenseInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_GetLicenseInfo(args[0],))

elif cmd == 'EACP_VerifyActiveCode':
    if len(args) != 3:
        print('EACP_VerifyActiveCode requires 3 args')
        sys.exit(1)
    pp.pprint(client.EACP_VerifyActiveCode(args[0], args[1], args[2],))

elif cmd == 'EACP_GetAutolockConfig':
    if len(args) != 0:
        print('EACP_GetAutolockConfig requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_GetAutolockConfig())

elif cmd == 'EACP_SetAutolockConfig':
    if len(args) != 1:
        print('EACP_SetAutolockConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_SetAutolockConfig(eval(args[0]),))

elif cmd == 'EACP_GetDevicesByUserId':
    if len(args) != 3:
        print('EACP_GetDevicesByUserId requires 3 args')
        sys.exit(1)
    pp.pprint(client.EACP_GetDevicesByUserId(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'EACP_AddDevice':
    if len(args) != 3:
        print('EACP_AddDevice requires 3 args')
        sys.exit(1)
    pp.pprint(client.EACP_AddDevice(args[0], args[1], eval(args[2]),))

elif cmd == 'EACP_AddDevices':
    if len(args) != 3:
        print('EACP_AddDevices requires 3 args')
        sys.exit(1)
    pp.pprint(client.EACP_AddDevices(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'EACP_SearchDevicesByUserIdAndUdid':
    if len(args) != 4:
        print('EACP_SearchDevicesByUserIdAndUdid requires 4 args')
        sys.exit(1)
    pp.pprint(client.EACP_SearchDevicesByUserIdAndUdid(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'EACP_SearchDevices':
    if len(args) != 3:
        print('EACP_SearchDevices requires 3 args')
        sys.exit(1)
    pp.pprint(client.EACP_SearchDevices(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'EACP_SearchUserByDeviceUdid':
    if len(args) != 3:
        print('EACP_SearchUserByDeviceUdid requires 3 args')
        sys.exit(1)
    pp.pprint(client.EACP_SearchUserByDeviceUdid(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'EACP_DeleteDevices':
    if len(args) != 2:
        print('EACP_DeleteDevices requires 2 args')
        sys.exit(1)
    pp.pprint(client.EACP_DeleteDevices(args[0], eval(args[1]),))

elif cmd == 'EACP_BindDevice':
    if len(args) != 2:
        print('EACP_BindDevice requires 2 args')
        sys.exit(1)
    pp.pprint(client.EACP_BindDevice(args[0], args[1],))

elif cmd == 'EACP_UnbindDevice':
    if len(args) != 2:
        print('EACP_UnbindDevice requires 2 args')
        sys.exit(1)
    pp.pprint(client.EACP_UnbindDevice(args[0], args[1],))

elif cmd == 'EACP_EnableDevice':
    if len(args) != 2:
        print('EACP_EnableDevice requires 2 args')
        sys.exit(1)
    pp.pprint(client.EACP_EnableDevice(args[0], args[1],))

elif cmd == 'EACP_DisableDevice':
    if len(args) != 2:
        print('EACP_DisableDevice requires 2 args')
        sys.exit(1)
    pp.pprint(client.EACP_DisableDevice(args[0], args[1],))

elif cmd == 'EACP_SetPermConfigs':
    if len(args) != 2:
        print('EACP_SetPermConfigs requires 2 args')
        sys.exit(1)
    pp.pprint(client.EACP_SetPermConfigs(args[0], eval(args[1]),))

elif cmd == 'EACP_ClearTokenByUserId':
    if len(args) != 1:
        print('EACP_ClearTokenByUserId requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_ClearTokenByUserId(args[0],))

elif cmd == 'EACP_OnProcessChange':
    if len(args) != 1:
        print('EACP_OnProcessChange requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_OnProcessChange(args[0],))

elif cmd == 'EACP_ClearAllToken':
    if len(args) != 0:
        print('EACP_ClearAllToken requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_ClearAllToken())

elif cmd == 'EACP_UpdateAllTokenFlagByOsType':
    if len(args) != 1:
        print('EACP_UpdateAllTokenFlagByOsType requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_UpdateAllTokenFlagByOsType(eval(args[0]),))

elif cmd == 'EACP_UpdateAllTokenFlagByIdcardStatus':
    if len(args) != 0:
        print('EACP_UpdateAllTokenFlagByIdcardStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_UpdateAllTokenFlagByIdcardStatus())

elif cmd == 'EACP_CheckTokenId':
    if len(args) != 1:
        print('EACP_CheckTokenId requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_CheckTokenId(eval(args[0]),))

elif cmd == 'EACP_ClearAllInvitationInfo':
    if len(args) != 0:
        print('EACP_ClearAllInvitationInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_ClearAllInvitationInfo())

elif cmd == 'EACP_ClearUserInvitationInfo':
    if len(args) != 1:
        print('EACP_ClearUserInvitationInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_ClearUserInvitationInfo(args[0],))

elif cmd == 'EACP_RestartGlobalShareMgntServer':
    if len(args) != 0:
        print('EACP_RestartGlobalShareMgntServer requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_RestartGlobalShareMgntServer())

elif cmd == 'EACP_RestartLocalShareMgntServer':
    if len(args) != 0:
        print('EACP_RestartLocalShareMgntServer requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_RestartLocalShareMgntServer())

elif cmd == 'EACP_SetPushMessagesConfig':
    if len(args) != 1:
        print('EACP_SetPushMessagesConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_SetPushMessagesConfig(args[0],))

elif cmd == 'EACP_GetPushMessagesConfig':
    if len(args) != 0:
        print('EACP_GetPushMessagesConfig requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_GetPushMessagesConfig())

elif cmd == 'EACP_PublishDocExchange':
    if len(args) != 1:
        print('EACP_PublishDocExchange requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_PublishDocExchange(eval(args[0]),))

elif cmd == 'EACP_AddAntivirusMessage':
    if len(args) != 1:
        print('EACP_AddAntivirusMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_AddAntivirusMessage(eval(args[0]),))

elif cmd == 'EACP_AddQuarantineMessage':
    if len(args) != 1:
        print('EACP_AddQuarantineMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_AddQuarantineMessage(eval(args[0]),))

elif cmd == 'EACP_AddAppealMessage':
    if len(args) != 1:
        print('EACP_AddAppealMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_AddAppealMessage(eval(args[0]),))

elif cmd == 'EACP_AddDocRemindMessage':
    if len(args) != 1:
        print('EACP_AddDocRemindMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_AddDocRemindMessage(eval(args[0]),))

elif cmd == 'EACP_SetSendShareMailStatus':
    if len(args) != 1:
        print('EACP_SetSendShareMailStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_SetSendShareMailStatus(eval(args[0]),))

elif cmd == 'EACP_GetSendShareMailStatus':
    if len(args) != 0:
        print('EACP_GetSendShareMailStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_GetSendShareMailStatus())

elif cmd == 'EACP_UpdateTokenFlagByUserId':
    if len(args) != 2:
        print('EACP_UpdateTokenFlagByUserId requires 2 args')
        sys.exit(1)
    pp.pprint(client.EACP_UpdateTokenFlagByUserId(args[0], eval(args[1]),))

elif cmd == 'EACP_UpdateTokenFlagByPriority':
    if len(args) != 2:
        print('EACP_UpdateTokenFlagByPriority requires 2 args')
        sys.exit(1)
    pp.pprint(client.EACP_UpdateTokenFlagByPriority(eval(args[0]), eval(args[1]),))

elif cmd == 'EACP_SetMessageNotifyStatus':
    if len(args) != 1:
        print('EACP_SetMessageNotifyStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_SetMessageNotifyStatus(eval(args[0]),))

elif cmd == 'EACP_GetMessageNotifyStatus':
    if len(args) != 0:
        print('EACP_GetMessageNotifyStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_GetMessageNotifyStatus())

elif cmd == 'EACP_DeleteContactPermByUserID':
    if len(args) != 2:
        print('EACP_DeleteContactPermByUserID requires 2 args')
        sys.exit(1)
    pp.pprint(client.EACP_DeleteContactPermByUserID(args[0], args[1],))

elif cmd == 'EACP_SetCustomApplicationConfig':
    if len(args) != 1:
        print('EACP_SetCustomApplicationConfig requires 1 args')
        sys.exit(1)
    pp.pprint(client.EACP_SetCustomApplicationConfig(args[0],))

elif cmd == 'EACP_GetCustomApplicationConfig':
    if len(args) != 0:
        print('EACP_GetCustomApplicationConfig requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_GetCustomApplicationConfig())

elif cmd == 'EACP_NotifyPushWebhookThread':
    if len(args) != 0:
        print('EACP_NotifyPushWebhookThread requires 0 args')
        sys.exit(1)
    pp.pprint(client.EACP_NotifyPushWebhookThread())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
