#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTEACPError(object):
    NCT_DB_OPERATE_FAILED = 10001
    NCT_UNKNOWN_ERROR = 10002
    NCT_INVALID_URL = 20001
    NCT_INVALID_JSON = 20002
    NCT_LOGIN_DEVICE_EXISTS = 20101
    NCT_INVALID_LIMIT_VALUE = 20210
    NCT_MAC_ADDR_INVALID = 20217
    NCT_INVALID_EXPIRED_INTERVAL = 20401

    _VALUES_TO_NAMES = {
        10001: "NCT_DB_OPERATE_FAILED",
        10002: "NCT_UNKNOWN_ERROR",
        20001: "NCT_INVALID_URL",
        20002: "NCT_INVALID_JSON",
        20101: "NCT_LOGIN_DEVICE_EXISTS",
        20210: "NCT_INVALID_LIMIT_VALUE",
        20217: "NCT_MAC_ADDR_INVALID",
        20401: "NCT_INVALID_EXPIRED_INTERVAL",
    }

    _NAMES_TO_VALUES = {
        "NCT_DB_OPERATE_FAILED": 10001,
        "NCT_UNKNOWN_ERROR": 10002,
        "NCT_INVALID_URL": 20001,
        "NCT_INVALID_JSON": 20002,
        "NCT_LOGIN_DEVICE_EXISTS": 20101,
        "NCT_INVALID_LIMIT_VALUE": 20210,
        "NCT_MAC_ADDR_INVALID": 20217,
        "NCT_INVALID_EXPIRED_INTERVAL": 20401,
    }


class ncTAntivirusOperationType(object):
    NCT_ISOLATION = 1
    NCT_REPAIR = 2

    _VALUES_TO_NAMES = {
        1: "NCT_ISOLATION",
        2: "NCT_REPAIR",
    }

    _NAMES_TO_VALUES = {
        "NCT_ISOLATION": 1,
        "NCT_REPAIR": 2,
    }


class ncTQuarantineMSGType(object):
    NCT_QUARANTINE = 1
    NCT_RESTORE = 2
    NCT_APPROVE = 3
    NCT_VETO = 4

    _VALUES_TO_NAMES = {
        1: "NCT_QUARANTINE",
        2: "NCT_RESTORE",
        3: "NCT_APPROVE",
        4: "NCT_VETO",
    }

    _NAMES_TO_VALUES = {
        "NCT_QUARANTINE": 1,
        "NCT_RESTORE": 2,
        "NCT_APPROVE": 3,
        "NCT_VETO": 4,
    }


class ncTCustomPerm(object):
    """
    Attributes:
     - accessorId
     - accessorType
     - isAllowed
     - permValue
     - endTime

    """


    def __init__(self, accessorId=None, accessorType=None, isAllowed=None, permValue=None, endTime=None,):
        self.accessorId = accessorId
        self.accessorType = accessorType
        self.isAllowed = isAllowed
        self.permValue = permValue
        self.endTime = endTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.accessorId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.accessorType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isAllowed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.permValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTCustomPerm')
        if self.accessorId is not None:
            oprot.writeFieldBegin('accessorId', TType.STRING, 1)
            oprot.writeString(self.accessorId.encode('utf-8') if sys.version_info[0] == 2 else self.accessorId)
            oprot.writeFieldEnd()
        if self.accessorType is not None:
            oprot.writeFieldBegin('accessorType', TType.I16, 2)
            oprot.writeI16(self.accessorType)
            oprot.writeFieldEnd()
        if self.isAllowed is not None:
            oprot.writeFieldBegin('isAllowed', TType.BOOL, 3)
            oprot.writeBool(self.isAllowed)
            oprot.writeFieldEnd()
        if self.permValue is not None:
            oprot.writeFieldBegin('permValue', TType.I32, 4)
            oprot.writeI32(self.permValue)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 5)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLoginDeviceBaseInfo(object):
    """
    Attributes:
     - udid
     - name
     - osType
     - deviceType
     - lastLoginIp
     - lastLoginTime

    """


    def __init__(self, udid=None, name=None, osType=None, deviceType=None, lastLoginIp=None, lastLoginTime=None,):
        self.udid = udid
        self.name = name
        self.osType = osType
        self.deviceType = deviceType
        self.lastLoginIp = lastLoginIp
        self.lastLoginTime = lastLoginTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.udid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.osType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.deviceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.lastLoginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.lastLoginTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLoginDeviceBaseInfo')
        if self.udid is not None:
            oprot.writeFieldBegin('udid', TType.STRING, 1)
            oprot.writeString(self.udid.encode('utf-8') if sys.version_info[0] == 2 else self.udid)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.osType is not None:
            oprot.writeFieldBegin('osType', TType.I32, 3)
            oprot.writeI32(self.osType)
            oprot.writeFieldEnd()
        if self.deviceType is not None:
            oprot.writeFieldBegin('deviceType', TType.STRING, 4)
            oprot.writeString(self.deviceType.encode('utf-8') if sys.version_info[0] == 2 else self.deviceType)
            oprot.writeFieldEnd()
        if self.lastLoginIp is not None:
            oprot.writeFieldBegin('lastLoginIp', TType.STRING, 5)
            oprot.writeString(self.lastLoginIp.encode('utf-8') if sys.version_info[0] == 2 else self.lastLoginIp)
            oprot.writeFieldEnd()
        if self.lastLoginTime is not None:
            oprot.writeFieldBegin('lastLoginTime', TType.I64, 6)
            oprot.writeI64(self.lastLoginTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLoginDeviceInfo(object):
    """
    Attributes:
     - baseInfo
     - eraseFlag
     - lastEraseTime
     - disableFlag
     - bindFlag
     - loginFlag

    """


    def __init__(self, baseInfo=None, eraseFlag=None, lastEraseTime=None, disableFlag=None, bindFlag=None, loginFlag=None,):
        self.baseInfo = baseInfo
        self.eraseFlag = eraseFlag
        self.lastEraseTime = lastEraseTime
        self.disableFlag = disableFlag
        self.bindFlag = bindFlag
        self.loginFlag = loginFlag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.baseInfo = ncTLoginDeviceBaseInfo()
                    self.baseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.eraseFlag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastEraseTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.disableFlag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.bindFlag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.loginFlag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLoginDeviceInfo')
        if self.baseInfo is not None:
            oprot.writeFieldBegin('baseInfo', TType.STRUCT, 1)
            self.baseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.eraseFlag is not None:
            oprot.writeFieldBegin('eraseFlag', TType.I32, 2)
            oprot.writeI32(self.eraseFlag)
            oprot.writeFieldEnd()
        if self.lastEraseTime is not None:
            oprot.writeFieldBegin('lastEraseTime', TType.I64, 3)
            oprot.writeI64(self.lastEraseTime)
            oprot.writeFieldEnd()
        if self.disableFlag is not None:
            oprot.writeFieldBegin('disableFlag', TType.I32, 4)
            oprot.writeI32(self.disableFlag)
            oprot.writeFieldEnd()
        if self.bindFlag is not None:
            oprot.writeFieldBegin('bindFlag', TType.I32, 5)
            oprot.writeI32(self.bindFlag)
            oprot.writeFieldEnd()
        if self.loginFlag is not None:
            oprot.writeFieldBegin('loginFlag', TType.I32, 6)
            oprot.writeI32(self.loginFlag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDocExchangeProcessInfo(object):
    """
    Attributes:
     - userId
     - docId
     - applyMsg
     - dstDocName
     - dstDir
     - toInbox
     - isLibSync

    """


    def __init__(self, userId=None, docId=None, applyMsg=None, dstDocName=None, dstDir=None, toInbox=None, isLibSync=None,):
        self.userId = userId
        self.docId = docId
        self.applyMsg = applyMsg
        self.dstDocName = dstDocName
        self.dstDir = dstDir
        self.toInbox = toInbox
        self.isLibSync = isLibSync

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.applyMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.dstDocName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.dstDir = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.toInbox = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.isLibSync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDocExchangeProcessInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 2)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.applyMsg is not None:
            oprot.writeFieldBegin('applyMsg', TType.STRING, 3)
            oprot.writeString(self.applyMsg.encode('utf-8') if sys.version_info[0] == 2 else self.applyMsg)
            oprot.writeFieldEnd()
        if self.dstDocName is not None:
            oprot.writeFieldBegin('dstDocName', TType.STRING, 4)
            oprot.writeString(self.dstDocName.encode('utf-8') if sys.version_info[0] == 2 else self.dstDocName)
            oprot.writeFieldEnd()
        if self.dstDir is not None:
            oprot.writeFieldBegin('dstDir', TType.STRING, 5)
            oprot.writeString(self.dstDir.encode('utf-8') if sys.version_info[0] == 2 else self.dstDir)
            oprot.writeFieldEnd()
        if self.toInbox is not None:
            oprot.writeFieldBegin('toInbox', TType.BOOL, 6)
            oprot.writeBool(self.toInbox)
            oprot.writeFieldEnd()
        if self.isLibSync is not None:
            oprot.writeFieldBegin('isLibSync', TType.BOOL, 7)
            oprot.writeBool(self.isLibSync)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAutolockConfig(object):
    """
    Attributes:
     - isEnable
     - expiredInterval

    """


    def __init__(self, isEnable=None, expiredInterval=None,):
        self.isEnable = isEnable
        self.expiredInterval = expiredInterval

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.expiredInterval = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAutolockConfig')
        if self.isEnable is not None:
            oprot.writeFieldBegin('isEnable', TType.BOOL, 1)
            oprot.writeBool(self.isEnable)
            oprot.writeFieldEnd()
        if self.expiredInterval is not None:
            oprot.writeFieldBegin('expiredInterval', TType.I64, 2)
            oprot.writeI64(self.expiredInterval)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTCheckTokenInfo(object):
    """
    Attributes:
     - userId
     - tokenId
     - ip

    """


    def __init__(self, userId=None, tokenId=None, ip=None,):
        self.userId = userId
        self.tokenId = tokenId
        self.ip = ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tokenId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTCheckTokenInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.tokenId is not None:
            oprot.writeFieldBegin('tokenId', TType.STRING, 2)
            oprot.writeString(self.tokenId.encode('utf-8') if sys.version_info[0] == 2 else self.tokenId)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 3)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAntivirusMessage(object):
    """
    Attributes:
     - receiverId
     - senderId
     - antivirusAdmin
     - docId
     - url
     - antivirusOp
     - accessorType
     - isDir

    """


    def __init__(self, receiverId=None, senderId=None, antivirusAdmin=None, docId=None, url=None, antivirusOp=None, accessorType=None, isDir=None,):
        self.receiverId = receiverId
        self.senderId = senderId
        self.antivirusAdmin = antivirusAdmin
        self.docId = docId
        self.url = url
        self.antivirusOp = antivirusOp
        self.accessorType = accessorType
        self.isDir = isDir

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.receiverId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.senderId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.antivirusAdmin = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.antivirusOp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.accessorType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.isDir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAntivirusMessage')
        if self.receiverId is not None:
            oprot.writeFieldBegin('receiverId', TType.STRING, 1)
            oprot.writeString(self.receiverId.encode('utf-8') if sys.version_info[0] == 2 else self.receiverId)
            oprot.writeFieldEnd()
        if self.senderId is not None:
            oprot.writeFieldBegin('senderId', TType.STRING, 2)
            oprot.writeString(self.senderId.encode('utf-8') if sys.version_info[0] == 2 else self.senderId)
            oprot.writeFieldEnd()
        if self.antivirusAdmin is not None:
            oprot.writeFieldBegin('antivirusAdmin', TType.STRING, 3)
            oprot.writeString(self.antivirusAdmin.encode('utf-8') if sys.version_info[0] == 2 else self.antivirusAdmin)
            oprot.writeFieldEnd()
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 4)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 5)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.antivirusOp is not None:
            oprot.writeFieldBegin('antivirusOp', TType.I32, 6)
            oprot.writeI32(self.antivirusOp)
            oprot.writeFieldEnd()
        if self.accessorType is not None:
            oprot.writeFieldBegin('accessorType', TType.I32, 7)
            oprot.writeI32(self.accessorType)
            oprot.writeFieldEnd()
        if self.isDir is not None:
            oprot.writeFieldBegin('isDir', TType.BOOL, 8)
            oprot.writeBool(self.isDir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTQuarantineMessage(object):
    """
    Attributes:
     - senderId
     - docId
     - url
     - msgType
     - creatorId
     - modifierId
     - csflevel
     - quarantineType
     - processType

    """


    def __init__(self, senderId=None, docId=None, url=None, msgType=None, creatorId=None, modifierId=None, csflevel=None, quarantineType=None, processType=None,):
        self.senderId = senderId
        self.docId = docId
        self.url = url
        self.msgType = msgType
        self.creatorId = creatorId
        self.modifierId = modifierId
        self.csflevel = csflevel
        self.quarantineType = quarantineType
        self.processType = processType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.senderId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.msgType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.creatorId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.modifierId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.csflevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.quarantineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.processType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTQuarantineMessage')
        if self.senderId is not None:
            oprot.writeFieldBegin('senderId', TType.STRING, 1)
            oprot.writeString(self.senderId.encode('utf-8') if sys.version_info[0] == 2 else self.senderId)
            oprot.writeFieldEnd()
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 2)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 3)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.msgType is not None:
            oprot.writeFieldBegin('msgType', TType.I32, 4)
            oprot.writeI32(self.msgType)
            oprot.writeFieldEnd()
        if self.creatorId is not None:
            oprot.writeFieldBegin('creatorId', TType.STRING, 5)
            oprot.writeString(self.creatorId.encode('utf-8') if sys.version_info[0] == 2 else self.creatorId)
            oprot.writeFieldEnd()
        if self.modifierId is not None:
            oprot.writeFieldBegin('modifierId', TType.STRING, 6)
            oprot.writeString(self.modifierId.encode('utf-8') if sys.version_info[0] == 2 else self.modifierId)
            oprot.writeFieldEnd()
        if self.csflevel is not None:
            oprot.writeFieldBegin('csflevel', TType.I32, 7)
            oprot.writeI32(self.csflevel)
            oprot.writeFieldEnd()
        if self.quarantineType is not None:
            oprot.writeFieldBegin('quarantineType', TType.I32, 8)
            oprot.writeI32(self.quarantineType)
            oprot.writeFieldEnd()
        if self.processType is not None:
            oprot.writeFieldBegin('processType', TType.I32, 9)
            oprot.writeI32(self.processType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAppealMessage(object):
    """
    Attributes:
     - senderId
     - docId
     - url
     - msgType
     - creatorId
     - modifierId
     - csflevel
     - appealSuggest

    """


    def __init__(self, senderId=None, docId=None, url=None, msgType=None, creatorId=None, modifierId=None, csflevel=None, appealSuggest=None,):
        self.senderId = senderId
        self.docId = docId
        self.url = url
        self.msgType = msgType
        self.creatorId = creatorId
        self.modifierId = modifierId
        self.csflevel = csflevel
        self.appealSuggest = appealSuggest

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.senderId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.msgType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.creatorId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.modifierId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.csflevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.appealSuggest = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAppealMessage')
        if self.senderId is not None:
            oprot.writeFieldBegin('senderId', TType.STRING, 1)
            oprot.writeString(self.senderId.encode('utf-8') if sys.version_info[0] == 2 else self.senderId)
            oprot.writeFieldEnd()
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 2)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 3)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.msgType is not None:
            oprot.writeFieldBegin('msgType', TType.I32, 4)
            oprot.writeI32(self.msgType)
            oprot.writeFieldEnd()
        if self.creatorId is not None:
            oprot.writeFieldBegin('creatorId', TType.STRING, 5)
            oprot.writeString(self.creatorId.encode('utf-8') if sys.version_info[0] == 2 else self.creatorId)
            oprot.writeFieldEnd()
        if self.modifierId is not None:
            oprot.writeFieldBegin('modifierId', TType.STRING, 6)
            oprot.writeString(self.modifierId.encode('utf-8') if sys.version_info[0] == 2 else self.modifierId)
            oprot.writeFieldEnd()
        if self.csflevel is not None:
            oprot.writeFieldBegin('csflevel', TType.I32, 7)
            oprot.writeI32(self.csflevel)
            oprot.writeFieldEnd()
        if self.appealSuggest is not None:
            oprot.writeFieldBegin('appealSuggest', TType.STRING, 8)
            oprot.writeString(self.appealSuggest.encode('utf-8') if sys.version_info[0] == 2 else self.appealSuggest)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDocRemindMessage(object):
    """
    Attributes:
     - docId
     - isDir
     - url
     - csflevel
     - dueDate
     - receivers
     - remindContent

    """


    def __init__(self, docId=None, isDir=None, url=None, csflevel=None, dueDate=None, receivers=None, remindContent=None,):
        self.docId = docId
        self.isDir = isDir
        self.url = url
        self.csflevel = csflevel
        self.dueDate = dueDate
        self.receivers = receivers
        self.remindContent = remindContent

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isDir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.csflevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.dueDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.receivers = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.receivers.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.remindContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDocRemindMessage')
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 1)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.isDir is not None:
            oprot.writeFieldBegin('isDir', TType.BOOL, 2)
            oprot.writeBool(self.isDir)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 3)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.csflevel is not None:
            oprot.writeFieldBegin('csflevel', TType.I32, 4)
            oprot.writeI32(self.csflevel)
            oprot.writeFieldEnd()
        if self.dueDate is not None:
            oprot.writeFieldBegin('dueDate', TType.I64, 5)
            oprot.writeI64(self.dueDate)
            oprot.writeFieldEnd()
        if self.receivers is not None:
            oprot.writeFieldBegin('receivers', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.receivers))
            for iter6 in self.receivers:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.remindContent is not None:
            oprot.writeFieldBegin('remindContent', TType.STRING, 7)
            oprot.writeString(self.remindContent.encode('utf-8') if sys.version_info[0] == 2 else self.remindContent)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTCustomPerm)
ncTCustomPerm.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'accessorId', 'UTF8', None, ),  # 1
    (2, TType.I16, 'accessorType', None, None, ),  # 2
    (3, TType.BOOL, 'isAllowed', None, None, ),  # 3
    (4, TType.I32, 'permValue', None, None, ),  # 4
    (5, TType.I64, 'endTime', None, None, ),  # 5
)
all_structs.append(ncTLoginDeviceBaseInfo)
ncTLoginDeviceBaseInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'udid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'osType', None, None, ),  # 3
    (4, TType.STRING, 'deviceType', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'lastLoginIp', 'UTF8', None, ),  # 5
    (6, TType.I64, 'lastLoginTime', None, None, ),  # 6
)
all_structs.append(ncTLoginDeviceInfo)
ncTLoginDeviceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'baseInfo', [ncTLoginDeviceBaseInfo, None], None, ),  # 1
    (2, TType.I32, 'eraseFlag', None, None, ),  # 2
    (3, TType.I64, 'lastEraseTime', None, None, ),  # 3
    (4, TType.I32, 'disableFlag', None, None, ),  # 4
    (5, TType.I32, 'bindFlag', None, None, ),  # 5
    (6, TType.I32, 'loginFlag', None, None, ),  # 6
)
all_structs.append(ncTDocExchangeProcessInfo)
ncTDocExchangeProcessInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'docId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'applyMsg', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'dstDocName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'dstDir', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'toInbox', None, None, ),  # 6
    (7, TType.BOOL, 'isLibSync', None, None, ),  # 7
)
all_structs.append(ncTAutolockConfig)
ncTAutolockConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isEnable', None, None, ),  # 1
    (2, TType.I64, 'expiredInterval', None, None, ),  # 2
)
all_structs.append(ncTCheckTokenInfo)
ncTCheckTokenInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tokenId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ip', 'UTF8', None, ),  # 3
)
all_structs.append(ncTAntivirusMessage)
ncTAntivirusMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'receiverId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'senderId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'antivirusAdmin', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'docId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'url', 'UTF8', None, ),  # 5
    (6, TType.I32, 'antivirusOp', None, None, ),  # 6
    (7, TType.I32, 'accessorType', None, None, ),  # 7
    (8, TType.BOOL, 'isDir', None, None, ),  # 8
)
all_structs.append(ncTQuarantineMessage)
ncTQuarantineMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'senderId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'docId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'url', 'UTF8', None, ),  # 3
    (4, TType.I32, 'msgType', None, None, ),  # 4
    (5, TType.STRING, 'creatorId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'modifierId', 'UTF8', None, ),  # 6
    (7, TType.I32, 'csflevel', None, None, ),  # 7
    (8, TType.I32, 'quarantineType', None, None, ),  # 8
    (9, TType.I32, 'processType', None, None, ),  # 9
)
all_structs.append(ncTAppealMessage)
ncTAppealMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'senderId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'docId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'url', 'UTF8', None, ),  # 3
    (4, TType.I32, 'msgType', None, None, ),  # 4
    (5, TType.STRING, 'creatorId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'modifierId', 'UTF8', None, ),  # 6
    (7, TType.I32, 'csflevel', None, None, ),  # 7
    (8, TType.STRING, 'appealSuggest', 'UTF8', None, ),  # 8
)
all_structs.append(ncTDocRemindMessage)
ncTDocRemindMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'isDir', None, None, ),  # 2
    (3, TType.STRING, 'url', 'UTF8', None, ),  # 3
    (4, TType.I32, 'csflevel', None, None, ),  # 4
    (5, TType.I64, 'dueDate', None, None, ),  # 5
    (6, TType.LIST, 'receivers', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.STRING, 'remindContent', 'UTF8', None, ),  # 7
)
fix_spec(all_structs)
del all_structs
