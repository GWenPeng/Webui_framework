#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes
import EVFS.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTLogType(object):
    NCT_LT_LOGIN = 10
    NCT_LT_MANAGEMENT = 11
    NCT_LT_OPEARTION = 12

    _VALUES_TO_NAMES = {
        10: "NCT_LT_LOGIN",
        11: "NCT_LT_MANAGEMENT",
        12: "NCT_LT_OPEARTION",
    }

    _NAMES_TO_VALUES = {
        "NCT_LT_LOGIN": 10,
        "NCT_LT_MANAGEMENT": 11,
        "NCT_LT_OPEARTION": 12,
    }


class ncTLogLevel(object):
    NCT_LL_ALL = 0
    NCT_LL_INFO = 1
    NCT_LL_WARN = 2

    _VALUES_TO_NAMES = {
        0: "NCT_LL_ALL",
        1: "NCT_LL_INFO",
        2: "NCT_LL_WARN",
    }

    _NAMES_TO_VALUES = {
        "NCT_LL_ALL": 0,
        "NCT_LL_INFO": 1,
        "NCT_LL_WARN": 2,
    }


class ncTLoginType(object):
    NCT_CLT_ALL = 0
    NCT_CLT_LOGIN_IN = 1
    NCT_CLT_LOGIN_OUT = 2
    NCT_CLT_OTHER = 127

    _VALUES_TO_NAMES = {
        0: "NCT_CLT_ALL",
        1: "NCT_CLT_LOGIN_IN",
        2: "NCT_CLT_LOGIN_OUT",
        127: "NCT_CLT_OTHER",
    }

    _NAMES_TO_VALUES = {
        "NCT_CLT_ALL": 0,
        "NCT_CLT_LOGIN_IN": 1,
        "NCT_CLT_LOGIN_OUT": 2,
        "NCT_CLT_OTHER": 127,
    }


class ncTManagementType(object):
    NCT_MNT_ALL = 0
    NCT_MNT_CREATE = 1
    NCT_MNT_ADD = 2
    NCT_MNT_SET = 3
    NCT_MNT_DELETE = 4
    NCT_MNT_COPY = 5
    NCT_MNT_MOVE = 6
    NCT_MNT_REMOVE = 7
    NCT_MNT_IMPORT = 8
    NCT_MNT_EXPORT = 9
    NCT_MNT_AUDIT_MGM = 10
    NCT_MNT_QUARANTINE = 11
    NCT_MNT_UPLOAD = 12
    NCT_MNT_PREVIEW = 13
    NCT_MNT_DOWNLOAD = 14
    NCT_MNT_RESTORE = 15
    NCT_MNT_QUARANTINE_APPEAL = 16
    NCT_MNT_RESTART = 17
    NCT_MNT_SEND_EMAIL = 18
    NCT_MNT_RECOVER = 19
    NCT_MNT_OTHER = 127

    _VALUES_TO_NAMES = {
        0: "NCT_MNT_ALL",
        1: "NCT_MNT_CREATE",
        2: "NCT_MNT_ADD",
        3: "NCT_MNT_SET",
        4: "NCT_MNT_DELETE",
        5: "NCT_MNT_COPY",
        6: "NCT_MNT_MOVE",
        7: "NCT_MNT_REMOVE",
        8: "NCT_MNT_IMPORT",
        9: "NCT_MNT_EXPORT",
        10: "NCT_MNT_AUDIT_MGM",
        11: "NCT_MNT_QUARANTINE",
        12: "NCT_MNT_UPLOAD",
        13: "NCT_MNT_PREVIEW",
        14: "NCT_MNT_DOWNLOAD",
        15: "NCT_MNT_RESTORE",
        16: "NCT_MNT_QUARANTINE_APPEAL",
        17: "NCT_MNT_RESTART",
        18: "NCT_MNT_SEND_EMAIL",
        19: "NCT_MNT_RECOVER",
        127: "NCT_MNT_OTHER",
    }

    _NAMES_TO_VALUES = {
        "NCT_MNT_ALL": 0,
        "NCT_MNT_CREATE": 1,
        "NCT_MNT_ADD": 2,
        "NCT_MNT_SET": 3,
        "NCT_MNT_DELETE": 4,
        "NCT_MNT_COPY": 5,
        "NCT_MNT_MOVE": 6,
        "NCT_MNT_REMOVE": 7,
        "NCT_MNT_IMPORT": 8,
        "NCT_MNT_EXPORT": 9,
        "NCT_MNT_AUDIT_MGM": 10,
        "NCT_MNT_QUARANTINE": 11,
        "NCT_MNT_UPLOAD": 12,
        "NCT_MNT_PREVIEW": 13,
        "NCT_MNT_DOWNLOAD": 14,
        "NCT_MNT_RESTORE": 15,
        "NCT_MNT_QUARANTINE_APPEAL": 16,
        "NCT_MNT_RESTART": 17,
        "NCT_MNT_SEND_EMAIL": 18,
        "NCT_MNT_RECOVER": 19,
        "NCT_MNT_OTHER": 127,
    }


class ncTDocOperType(object):
    NCT_DOT_ALL = 0
    NCT_DOT_PREVIEW = 1
    NCT_DOT_UPLOAD = 2
    NCT_DOT_DOWNLOAD = 3
    NCT_DOT_EDIT = 4
    NCT_DOT_RENAME = 5
    NCT_DOT_DELETE = 6
    NCT_DOT_COPY = 7
    NCT_DOT_MOVE = 8
    NCT_DOT_REC_RESTORE = 9
    NCT_DOT_REC_DELETE = 10
    NCT_DOT_RESTORE_REV = 50
    NCT_DOT_PERM_MGM = 11
    NCT_DOT_OLINK_SHARE = 12
    NCT_DOT_FINDER_MGM = 13
    NCT_DOT_BACKUP_TASK = 14
    NCT_DOT_LOCK_MGM = 16
    NCT_DOT_ENTRY_DOC_MGM = 17
    NCT_DOT_DEVICE_MGM = 18
    NCT_DOT_SET = 19
    NCT_DOT_SYSREC_DELETE = 20
    NCT_DOT_SYSREC_REC_RESTORE = 21
    NCT_DOT_OTHER = 127

    _VALUES_TO_NAMES = {
        0: "NCT_DOT_ALL",
        1: "NCT_DOT_PREVIEW",
        2: "NCT_DOT_UPLOAD",
        3: "NCT_DOT_DOWNLOAD",
        4: "NCT_DOT_EDIT",
        5: "NCT_DOT_RENAME",
        6: "NCT_DOT_DELETE",
        7: "NCT_DOT_COPY",
        8: "NCT_DOT_MOVE",
        9: "NCT_DOT_REC_RESTORE",
        10: "NCT_DOT_REC_DELETE",
        50: "NCT_DOT_RESTORE_REV",
        11: "NCT_DOT_PERM_MGM",
        12: "NCT_DOT_OLINK_SHARE",
        13: "NCT_DOT_FINDER_MGM",
        14: "NCT_DOT_BACKUP_TASK",
        16: "NCT_DOT_LOCK_MGM",
        17: "NCT_DOT_ENTRY_DOC_MGM",
        18: "NCT_DOT_DEVICE_MGM",
        19: "NCT_DOT_SET",
        20: "NCT_DOT_SYSREC_DELETE",
        21: "NCT_DOT_SYSREC_REC_RESTORE",
        127: "NCT_DOT_OTHER",
    }

    _NAMES_TO_VALUES = {
        "NCT_DOT_ALL": 0,
        "NCT_DOT_PREVIEW": 1,
        "NCT_DOT_UPLOAD": 2,
        "NCT_DOT_DOWNLOAD": 3,
        "NCT_DOT_EDIT": 4,
        "NCT_DOT_RENAME": 5,
        "NCT_DOT_DELETE": 6,
        "NCT_DOT_COPY": 7,
        "NCT_DOT_MOVE": 8,
        "NCT_DOT_REC_RESTORE": 9,
        "NCT_DOT_REC_DELETE": 10,
        "NCT_DOT_RESTORE_REV": 50,
        "NCT_DOT_PERM_MGM": 11,
        "NCT_DOT_OLINK_SHARE": 12,
        "NCT_DOT_FINDER_MGM": 13,
        "NCT_DOT_BACKUP_TASK": 14,
        "NCT_DOT_LOCK_MGM": 16,
        "NCT_DOT_ENTRY_DOC_MGM": 17,
        "NCT_DOT_DEVICE_MGM": 18,
        "NCT_DOT_SET": 19,
        "NCT_DOT_SYSREC_DELETE": 20,
        "NCT_DOT_SYSREC_REC_RESTORE": 21,
        "NCT_DOT_OTHER": 127,
    }


class ncTLogItem(object):
    """
    Attributes:
     - userId
     - logType
     - level
     - opType
     - date
     - ip
     - mac
     - msg
     - exMsg
     - userAgent
     - objId
     - additionalInfo

    """


    def __init__(self, userId=None, logType=None, level=None, opType=None, date=None, ip=None, mac=None, msg=None, exMsg=None, userAgent=None, objId=None, additionalInfo=None,):
        self.userId = userId
        self.logType = logType
        self.level = level
        self.opType = opType
        self.date = date
        self.ip = ip
        self.mac = mac
        self.msg = msg
        self.exMsg = exMsg
        self.userAgent = userAgent
        self.objId = objId
        self.additionalInfo = additionalInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.logType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.opType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.date = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.exMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.userAgent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.objId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.additionalInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLogItem')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.logType is not None:
            oprot.writeFieldBegin('logType', TType.I32, 2)
            oprot.writeI32(self.logType)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 3)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.opType is not None:
            oprot.writeFieldBegin('opType', TType.I32, 4)
            oprot.writeI32(self.opType)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.I64, 5)
            oprot.writeI64(self.date)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 6)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 7)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 8)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.exMsg is not None:
            oprot.writeFieldBegin('exMsg', TType.STRING, 9)
            oprot.writeString(self.exMsg.encode('utf-8') if sys.version_info[0] == 2 else self.exMsg)
            oprot.writeFieldEnd()
        if self.userAgent is not None:
            oprot.writeFieldBegin('userAgent', TType.STRING, 10)
            oprot.writeString(self.userAgent.encode('utf-8') if sys.version_info[0] == 2 else self.userAgent)
            oprot.writeFieldEnd()
        if self.objId is not None:
            oprot.writeFieldBegin('objId', TType.STRING, 11)
            oprot.writeString(self.objId.encode('utf-8') if sys.version_info[0] == 2 else self.objId)
            oprot.writeFieldEnd()
        if self.additionalInfo is not None:
            oprot.writeFieldBegin('additionalInfo', TType.STRING, 12)
            oprot.writeString(self.additionalInfo.encode('utf-8') if sys.version_info[0] == 2 else self.additionalInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLogInfo(object):
    """
    Attributes:
     - userId
     - userName
     - objId
     - logType
     - level
     - opType
     - date
     - ip
     - mac
     - msg
     - exMsg

    """


    def __init__(self, userId=None, userName=None, objId=None, logType=None, level=None, opType=None, date=None, ip=None, mac=None, msg=None, exMsg=None,):
        self.userId = userId
        self.userName = userName
        self.objId = objId
        self.logType = logType
        self.level = level
        self.opType = opType
        self.date = date
        self.ip = ip
        self.mac = mac
        self.msg = msg
        self.exMsg = exMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.logType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.opType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.date = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.exMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLogInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 2)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.objId is not None:
            oprot.writeFieldBegin('objId', TType.STRING, 3)
            oprot.writeString(self.objId.encode('utf-8') if sys.version_info[0] == 2 else self.objId)
            oprot.writeFieldEnd()
        if self.logType is not None:
            oprot.writeFieldBegin('logType', TType.I32, 4)
            oprot.writeI32(self.logType)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 5)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.opType is not None:
            oprot.writeFieldBegin('opType', TType.I32, 6)
            oprot.writeI32(self.opType)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.I64, 7)
            oprot.writeI64(self.date)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 8)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 9)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 10)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.exMsg is not None:
            oprot.writeFieldBegin('exMsg', TType.STRING, 11)
            oprot.writeString(self.exMsg.encode('utf-8') if sys.version_info[0] == 2 else self.exMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTGetLogCountParam(object):
    """
    Attributes:
     - userId
     - logType
     - startDate
     - endDate
     - levels
     - opTypes
     - displayNames
     - ips
     - macs
     - msgs
     - exMsgs

    """


    def __init__(self, userId=None, logType=None, startDate=None, endDate=None, levels=None, opTypes=None, displayNames=None, ips=None, macs=None, msgs=None, exMsgs=None,):
        self.userId = userId
        self.logType = logType
        self.startDate = startDate
        self.endDate = endDate
        self.levels = levels
        self.opTypes = opTypes
        self.displayNames = displayNames
        self.ips = ips
        self.macs = macs
        self.msgs = msgs
        self.exMsgs = exMsgs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.logType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.startDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.endDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.levels = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.levels.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.opTypes = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.opTypes.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.displayNames = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.displayNames.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.ips = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ips.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.macs = []
                    (_etype27, _size24) = iprot.readListBegin()
                    for _i28 in range(_size24):
                        _elem29 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.macs.append(_elem29)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.msgs = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.msgs.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.exMsgs = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.exMsgs.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTGetLogCountParam')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.logType is not None:
            oprot.writeFieldBegin('logType', TType.I32, 2)
            oprot.writeI32(self.logType)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.I64, 3)
            oprot.writeI64(self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.I64, 4)
            oprot.writeI64(self.endDate)
            oprot.writeFieldEnd()
        if self.levels is not None:
            oprot.writeFieldBegin('levels', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.levels))
            for iter42 in self.levels:
                oprot.writeI32(iter42)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.opTypes is not None:
            oprot.writeFieldBegin('opTypes', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.opTypes))
            for iter43 in self.opTypes:
                oprot.writeI32(iter43)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.displayNames is not None:
            oprot.writeFieldBegin('displayNames', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.displayNames))
            for iter44 in self.displayNames:
                oprot.writeString(iter44.encode('utf-8') if sys.version_info[0] == 2 else iter44)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ips is not None:
            oprot.writeFieldBegin('ips', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.ips))
            for iter45 in self.ips:
                oprot.writeString(iter45.encode('utf-8') if sys.version_info[0] == 2 else iter45)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.macs is not None:
            oprot.writeFieldBegin('macs', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.macs))
            for iter46 in self.macs:
                oprot.writeString(iter46.encode('utf-8') if sys.version_info[0] == 2 else iter46)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.msgs is not None:
            oprot.writeFieldBegin('msgs', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.msgs))
            for iter47 in self.msgs:
                oprot.writeString(iter47.encode('utf-8') if sys.version_info[0] == 2 else iter47)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.exMsgs is not None:
            oprot.writeFieldBegin('exMsgs', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.exMsgs))
            for iter48 in self.exMsgs:
                oprot.writeString(iter48.encode('utf-8') if sys.version_info[0] == 2 else iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLogCountInfo(object):
    """
    Attributes:
     - logCount
     - maxLogId

    """


    def __init__(self, logCount=None, maxLogId=None,):
        self.logCount = logCount
        self.maxLogId = maxLogId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.logCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.maxLogId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLogCountInfo')
        if self.logCount is not None:
            oprot.writeFieldBegin('logCount', TType.I64, 1)
            oprot.writeI64(self.logCount)
            oprot.writeFieldEnd()
        if self.maxLogId is not None:
            oprot.writeFieldBegin('maxLogId', TType.I64, 2)
            oprot.writeI64(self.maxLogId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTGetPageLogParam(object):
    """
    Attributes:
     - userId
     - logType
     - startDate
     - endDate
     - levels
     - opTypes
     - displayNames
     - ips
     - macs
     - msgs
     - exMsgs
     - start
     - limit
     - maxLogId

    """


    def __init__(self, userId=None, logType=None, startDate=None, endDate=None, levels=None, opTypes=None, displayNames=None, ips=None, macs=None, msgs=None, exMsgs=None, start=None, limit=None, maxLogId=None,):
        self.userId = userId
        self.logType = logType
        self.startDate = startDate
        self.endDate = endDate
        self.levels = levels
        self.opTypes = opTypes
        self.displayNames = displayNames
        self.ips = ips
        self.macs = macs
        self.msgs = msgs
        self.exMsgs = exMsgs
        self.start = start
        self.limit = limit
        self.maxLogId = maxLogId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.logType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.startDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.endDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.levels = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readI32()
                        self.levels.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.opTypes = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = iprot.readI32()
                        self.opTypes.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.displayNames = []
                    (_etype64, _size61) = iprot.readListBegin()
                    for _i65 in range(_size61):
                        _elem66 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.displayNames.append(_elem66)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.ips = []
                    (_etype70, _size67) = iprot.readListBegin()
                    for _i71 in range(_size67):
                        _elem72 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ips.append(_elem72)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.macs = []
                    (_etype76, _size73) = iprot.readListBegin()
                    for _i77 in range(_size73):
                        _elem78 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.macs.append(_elem78)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.msgs = []
                    (_etype82, _size79) = iprot.readListBegin()
                    for _i83 in range(_size79):
                        _elem84 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.msgs.append(_elem84)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.exMsgs = []
                    (_etype88, _size85) = iprot.readListBegin()
                    for _i89 in range(_size85):
                        _elem90 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.exMsgs.append(_elem90)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.maxLogId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTGetPageLogParam')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.logType is not None:
            oprot.writeFieldBegin('logType', TType.I32, 2)
            oprot.writeI32(self.logType)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.I64, 3)
            oprot.writeI64(self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.I64, 4)
            oprot.writeI64(self.endDate)
            oprot.writeFieldEnd()
        if self.levels is not None:
            oprot.writeFieldBegin('levels', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.levels))
            for iter91 in self.levels:
                oprot.writeI32(iter91)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.opTypes is not None:
            oprot.writeFieldBegin('opTypes', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.opTypes))
            for iter92 in self.opTypes:
                oprot.writeI32(iter92)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.displayNames is not None:
            oprot.writeFieldBegin('displayNames', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.displayNames))
            for iter93 in self.displayNames:
                oprot.writeString(iter93.encode('utf-8') if sys.version_info[0] == 2 else iter93)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ips is not None:
            oprot.writeFieldBegin('ips', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.ips))
            for iter94 in self.ips:
                oprot.writeString(iter94.encode('utf-8') if sys.version_info[0] == 2 else iter94)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.macs is not None:
            oprot.writeFieldBegin('macs', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.macs))
            for iter95 in self.macs:
                oprot.writeString(iter95.encode('utf-8') if sys.version_info[0] == 2 else iter95)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.msgs is not None:
            oprot.writeFieldBegin('msgs', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.msgs))
            for iter96 in self.msgs:
                oprot.writeString(iter96.encode('utf-8') if sys.version_info[0] == 2 else iter96)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.exMsgs is not None:
            oprot.writeFieldBegin('exMsgs', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.exMsgs))
            for iter97 in self.exMsgs:
                oprot.writeString(iter97.encode('utf-8') if sys.version_info[0] == 2 else iter97)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 12)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 13)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        if self.maxLogId is not None:
            oprot.writeFieldBegin('maxLogId', TType.I64, 14)
            oprot.writeI64(self.maxLogId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTGetHistoryLogCountParam(object):
    """
    Attributes:
     - logType
     - names

    """


    def __init__(self, logType=None, names=None,):
        self.logType = logType
        self.names = names

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.logType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.names = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.names.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTGetHistoryLogCountParam')
        if self.logType is not None:
            oprot.writeFieldBegin('logType', TType.I32, 1)
            oprot.writeI32(self.logType)
            oprot.writeFieldEnd()
        if self.names is not None:
            oprot.writeFieldBegin('names', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.names))
            for iter104 in self.names:
                oprot.writeString(iter104.encode('utf-8') if sys.version_info[0] == 2 else iter104)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTGetPageHistoryLogParam(object):
    """
    Attributes:
     - logType
     - names
     - start
     - limit

    """


    def __init__(self, logType=None, names=None, start=None, limit=None,):
        self.logType = logType
        self.names = names
        self.start = start
        self.limit = limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.logType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.names = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.names.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTGetPageHistoryLogParam')
        if self.logType is not None:
            oprot.writeFieldBegin('logType', TType.I32, 1)
            oprot.writeI32(self.logType)
            oprot.writeFieldEnd()
        if self.names is not None:
            oprot.writeFieldBegin('names', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.names))
            for iter111 in self.names:
                oprot.writeString(iter111.encode('utf-8') if sys.version_info[0] == 2 else iter111)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 3)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 4)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTExportLogParam(object):
    """
    Attributes:
     - userId
     - logType
     - startDate
     - endDate
     - levels
     - opTypes
     - displayNames
     - ips
     - macs
     - msgs
     - exMsgs
     - start
     - limit
     - maxLogId

    """


    def __init__(self, userId=None, logType=None, startDate=None, endDate=None, levels=None, opTypes=None, displayNames=None, ips=None, macs=None, msgs=None, exMsgs=None, start=None, limit=None, maxLogId=None,):
        self.userId = userId
        self.logType = logType
        self.startDate = startDate
        self.endDate = endDate
        self.levels = levels
        self.opTypes = opTypes
        self.displayNames = displayNames
        self.ips = ips
        self.macs = macs
        self.msgs = msgs
        self.exMsgs = exMsgs
        self.start = start
        self.limit = limit
        self.maxLogId = maxLogId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.logType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.startDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.endDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.levels = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = iprot.readI32()
                        self.levels.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.opTypes = []
                    (_etype121, _size118) = iprot.readListBegin()
                    for _i122 in range(_size118):
                        _elem123 = iprot.readI32()
                        self.opTypes.append(_elem123)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.displayNames = []
                    (_etype127, _size124) = iprot.readListBegin()
                    for _i128 in range(_size124):
                        _elem129 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.displayNames.append(_elem129)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.ips = []
                    (_etype133, _size130) = iprot.readListBegin()
                    for _i134 in range(_size130):
                        _elem135 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ips.append(_elem135)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.macs = []
                    (_etype139, _size136) = iprot.readListBegin()
                    for _i140 in range(_size136):
                        _elem141 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.macs.append(_elem141)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.msgs = []
                    (_etype145, _size142) = iprot.readListBegin()
                    for _i146 in range(_size142):
                        _elem147 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.msgs.append(_elem147)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.exMsgs = []
                    (_etype151, _size148) = iprot.readListBegin()
                    for _i152 in range(_size148):
                        _elem153 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.exMsgs.append(_elem153)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.maxLogId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTExportLogParam')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.logType is not None:
            oprot.writeFieldBegin('logType', TType.I32, 2)
            oprot.writeI32(self.logType)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.I64, 3)
            oprot.writeI64(self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.I64, 4)
            oprot.writeI64(self.endDate)
            oprot.writeFieldEnd()
        if self.levels is not None:
            oprot.writeFieldBegin('levels', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.levels))
            for iter154 in self.levels:
                oprot.writeI32(iter154)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.opTypes is not None:
            oprot.writeFieldBegin('opTypes', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.opTypes))
            for iter155 in self.opTypes:
                oprot.writeI32(iter155)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.displayNames is not None:
            oprot.writeFieldBegin('displayNames', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.displayNames))
            for iter156 in self.displayNames:
                oprot.writeString(iter156.encode('utf-8') if sys.version_info[0] == 2 else iter156)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ips is not None:
            oprot.writeFieldBegin('ips', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.ips))
            for iter157 in self.ips:
                oprot.writeString(iter157.encode('utf-8') if sys.version_info[0] == 2 else iter157)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.macs is not None:
            oprot.writeFieldBegin('macs', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.macs))
            for iter158 in self.macs:
                oprot.writeString(iter158.encode('utf-8') if sys.version_info[0] == 2 else iter158)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.msgs is not None:
            oprot.writeFieldBegin('msgs', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.msgs))
            for iter159 in self.msgs:
                oprot.writeString(iter159.encode('utf-8') if sys.version_info[0] == 2 else iter159)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.exMsgs is not None:
            oprot.writeFieldBegin('exMsgs', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.exMsgs))
            for iter160 in self.exMsgs:
                oprot.writeString(iter160.encode('utf-8') if sys.version_info[0] == 2 else iter160)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 12)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 13)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        if self.maxLogId is not None:
            oprot.writeFieldBegin('maxLogId', TType.I64, 14)
            oprot.writeI64(self.maxLogId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTHistoryLogInfo(object):
    """
    Attributes:
     - name
     - id
     - size
     - dumpDate

    """


    def __init__(self, name=None, id=None, size=None, dumpDate=None,):
        self.name = name
        self.id = id
        self.size = size
        self.dumpDate = dumpDate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.dumpDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTHistoryLogInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 3)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.dumpDate is not None:
            oprot.writeFieldBegin('dumpDate', TType.I64, 4)
            oprot.writeI64(self.dumpDate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLogSpaceInfo(object):
    """
    Attributes:
     - totalSize
     - usedSize

    """


    def __init__(self, totalSize=None, usedSize=None,):
        self.totalSize = totalSize
        self.usedSize = usedSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.usedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLogSpaceInfo')
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 1)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.I64, 2)
            oprot.writeI64(self.usedSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTLogItem)
ncTLogItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'logType', None, None, ),  # 2
    (3, TType.I32, 'level', None, None, ),  # 3
    (4, TType.I32, 'opType', None, None, ),  # 4
    (5, TType.I64, 'date', None, None, ),  # 5
    (6, TType.STRING, 'ip', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'mac', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'msg', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'exMsg', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'userAgent', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'objId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'additionalInfo', 'UTF8', None, ),  # 12
)
all_structs.append(ncTLogInfo)
ncTLogInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'objId', 'UTF8', None, ),  # 3
    (4, TType.I32, 'logType', None, None, ),  # 4
    (5, TType.I32, 'level', None, None, ),  # 5
    (6, TType.I32, 'opType', None, None, ),  # 6
    (7, TType.I64, 'date', None, None, ),  # 7
    (8, TType.STRING, 'ip', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'mac', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'msg', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'exMsg', 'UTF8', None, ),  # 11
)
all_structs.append(ncTGetLogCountParam)
ncTGetLogCountParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'logType', None, None, ),  # 2
    (3, TType.I64, 'startDate', None, None, ),  # 3
    (4, TType.I64, 'endDate', None, None, ),  # 4
    (5, TType.LIST, 'levels', (TType.I32, None, False), None, ),  # 5
    (6, TType.LIST, 'opTypes', (TType.I32, None, False), None, ),  # 6
    (7, TType.LIST, 'displayNames', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.LIST, 'ips', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.LIST, 'macs', (TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.LIST, 'msgs', (TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.LIST, 'exMsgs', (TType.STRING, 'UTF8', False), None, ),  # 11
)
all_structs.append(ncTLogCountInfo)
ncTLogCountInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'logCount', None, None, ),  # 1
    (2, TType.I64, 'maxLogId', None, None, ),  # 2
)
all_structs.append(ncTGetPageLogParam)
ncTGetPageLogParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'logType', None, None, ),  # 2
    (3, TType.I64, 'startDate', None, None, ),  # 3
    (4, TType.I64, 'endDate', None, None, ),  # 4
    (5, TType.LIST, 'levels', (TType.I32, None, False), None, ),  # 5
    (6, TType.LIST, 'opTypes', (TType.I32, None, False), None, ),  # 6
    (7, TType.LIST, 'displayNames', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.LIST, 'ips', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.LIST, 'macs', (TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.LIST, 'msgs', (TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.LIST, 'exMsgs', (TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.I32, 'start', None, None, ),  # 12
    (13, TType.I32, 'limit', None, None, ),  # 13
    (14, TType.I64, 'maxLogId', None, None, ),  # 14
)
all_structs.append(ncTGetHistoryLogCountParam)
ncTGetHistoryLogCountParam.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'logType', None, None, ),  # 1
    (2, TType.LIST, 'names', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ncTGetPageHistoryLogParam)
ncTGetPageHistoryLogParam.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'logType', None, None, ),  # 1
    (2, TType.LIST, 'names', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'start', None, None, ),  # 3
    (4, TType.I32, 'limit', None, None, ),  # 4
)
all_structs.append(ncTExportLogParam)
ncTExportLogParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'logType', None, None, ),  # 2
    (3, TType.I64, 'startDate', None, None, ),  # 3
    (4, TType.I64, 'endDate', None, None, ),  # 4
    (5, TType.LIST, 'levels', (TType.I32, None, False), None, ),  # 5
    (6, TType.LIST, 'opTypes', (TType.I32, None, False), None, ),  # 6
    (7, TType.LIST, 'displayNames', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.LIST, 'ips', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.LIST, 'macs', (TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.LIST, 'msgs', (TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.LIST, 'exMsgs', (TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.I32, 'start', None, None, ),  # 12
    (13, TType.I32, 'limit', None, None, ),  # 13
    (14, TType.I64, 'maxLogId', None, None, ),  # 14
)
all_structs.append(ncTHistoryLogInfo)
ncTHistoryLogInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.I64, 'size', None, None, ),  # 3
    (4, TType.I64, 'dumpDate', None, None, ),  # 4
)
all_structs.append(ncTLogSpaceInfo)
ncTLogSpaceInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalSize', None, None, ),  # 1
    (2, TType.I64, 'usedSize', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
